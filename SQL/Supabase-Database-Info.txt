[
  {
    "database_structure": {
      "metadata": {
        "database_name": "postgres",
        "database_size": "15 MB",
        "version": "PostgreSQL 15.6 on aarch64-unknown-linux-gnu, compiled by gcc (GCC) 13.2.0, 64-bit",
        "current_schemas": [
          "public",
          "extensions"
        ]
      },
      "tables": [
        {
          "table_name": "admin_permissions",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "48 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "admin_role_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "permission",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "admin_permissions_admin_role_id_fkey",
              "type": "FOREIGN KEY",
              "column": "admin_role_id",
              "foreign_table": "admin_roles",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "admin_permissions_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "admin_permissions",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_role_permission",
              "type": "UNIQUE",
              "column": "admin_role_id",
              "foreign_table": "admin_permissions",
              "foreign_column": "admin_role_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_role_permission",
              "type": "UNIQUE",
              "column": "admin_role_id",
              "foreign_table": "admin_permissions",
              "foreign_column": "permission",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_role_permission",
              "type": "UNIQUE",
              "column": "permission",
              "foreign_table": "admin_permissions",
              "foreign_column": "admin_role_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_role_permission",
              "type": "UNIQUE",
              "column": "permission",
              "foreign_table": "admin_permissions",
              "foreign_column": "permission",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_5_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "admin_permissions_pkey",
              "definition": "CREATE UNIQUE INDEX admin_permissions_pkey ON public.admin_permissions USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "unique_role_permission",
              "definition": "CREATE UNIQUE INDEX unique_role_permission ON public.admin_permissions USING btree (admin_role_id, permission)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 100",
              "opclass": "10065 3126",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "admin_roles",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "40 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "admin_roles_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "admin_roles",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "admin_roles_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "unique_player_role",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "admin_roles",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127149_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127149_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127149_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127149_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "admin_roles_pkey",
              "definition": "CREATE UNIQUE INDEX admin_roles_pkey ON public.admin_roles USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "unique_player_role",
              "definition": "CREATE UNIQUE INDEX unique_player_role ON public.admin_roles USING btree (player_id)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "balanced_team_assignments",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "64 kB",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "team_assignments",
              "type": "jsonb",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "attack_differential",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "defense_differential",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "total_differential",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "experience_differential",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "balanced_team_assignments_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "balanced_team_assignments_pkey",
              "type": "PRIMARY KEY",
              "column": "game_id",
              "foreign_table": "balanced_team_assignments",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127155_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127155_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127155_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "balanced_team_assignments_pkey",
              "definition": "CREATE UNIQUE INDEX balanced_team_assignments_pkey ON public.balanced_team_assignments USING btree (game_id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable delete access for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "DELETE",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable insert access for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "true"
            },
            {
              "name": "Enable read access for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable update access for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "true",
              "with_check": "true"
            }
          ]
        },
        {
          "table_name": "debug_logs",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "64 kB",
          "estimated_rows": 45,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "bigint",
              "nullable": "NO",
              "default": "nextval('debug_logs_id_seq'::regclass)",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 64,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "timestamp",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "event_type",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "message",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "details",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "debug_logs_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "debug_logs",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_137859_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "debug_logs_pkey",
              "definition": "CREATE UNIQUE INDEX debug_logs_pkey ON public.debug_logs USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "3124",
              "storage_parameters": null
            }
          ],
          "rls_policies": null
        },
        {
          "table_name": "extended_player_stats",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendlyName",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "activeBonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "activePenalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "winRate",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 5,
              "numeric_scale": 2,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "currentStreak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "maxStreak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatarSvg",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "gameSequences",
              "type": "ARRAY",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        },
        {
          "table_name": "game_registrations",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "296 kB",
          "estimated_rows": 529,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "gen_random_uuid()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{0042f36b-c3ba-4f90-a15f-1f541d0a0712,015d4b4d-48f1-4de1-b776-64b4747db012,03c9d259-85df-4550-acef-c2746ef37c7f,05962d7c-b2a4-40b9-8b26-f9f71060bb8d,0a24b15c-1ea7-4869-a5e1-47c0365772a3,0ddfef69-5d0e-4d9a-8bc7-6b833ac7b196,0e729b8c-cb00-48a7-81b0-8d78430a0bd4,0f880048-3cc3-4efa-b248-b8112754e930,12d4f01c-2795-4689-bb73-5a295dcf864b,1402e38d-51a3-47ee-ac40-61bc2e25d7bf,18259c2a-e7bf-4fd3-bb66-10c4bde61525,1b9e6e0e-a2cd-4bd1-9186-3574d82468ed,1df68000-6560-4a17-8b54-a256bd77d3cd,2055f7b3-adb9-44d0-831a-8532e6ca2ebe,241ad41a-7656-44dd-bd56-089a47cd991d,27a7bc9b-12e3-4c27-9a04-405d697c397c,2a43c0b7-afd9-4fdb-ab0c-626638df8b21,2c7d420b-4eac-4e48-b43a-d6e5a18537bb,2e21a9ab-8ef7-4068-b6b3-a28fa36f990f,2f0892d0-09c5-4d25-954f-e86e9dd6f50d,30238cdd-332f-49ec-947f-e304bbf9da3b,35f2d701-cd39-484a-815a-9d0d8ff88597,3851e969-73a7-4d3b-ae65-167c999f27f4,3a372363-504e-4adb-90de-78c3d6e336e7,3bcde45e-1fbf-461f-a815-74f8c54b53fb,3de445b6-a583-4eea-a7e5-dd0e35d7532e,407f1ff5-778f-49a7-8bc4-e557974d31a3,43cf6b9c-27ed-4e9c-af18-9f9d921a53b9,477bf58e-f0d7-432d-b799-a95e513d5a08,4a07f894-171e-42c6-b659-1afd3eda0452,4b68be04-b100-47da-ab23-e9d5a46ecbcc,50115e67-dee0-4e89-b7ac-dc7b6a9a94c4,51389763-3e54-4b2f-b31d-6bc398103b5a,54b7355a-d76b-411c-bf2d-64cc3bb28b7d,5b164d4a-9b3d-4537-b990-a73ae04cb9fd,5dd8903f-97b6-4222-a0c2-d59b68653c24,60a95b32-0a45-4d77-b019-77ebcacdd4f4,63dfccf1-6da3-4824-9601-3f78f3e799dd,66ab85af-f99b-4b42-81ef-506534ee7f8e,6964496d-b8fc-4561-a3fd-1ed734dd833d,6c9b1b2c-65f6-4050-9cdd-566e1a7d2e91,6fd2cb53-fc2c-4d62-80ae-cc516cf00424,72536b5f-9007-4eed-9c72-0d8bc4630b3f,74131140-f8f2-402c-ba35-c935b3de5847,767a66ea-8b66-48fb-9c44-ad483a4c8b44,77c2919e-adc9-4330-9f9e-fc1e78f9f8a3,796b9260-54fd-4b89-afa2-b0d977b6b81c,7af8f7bf-e31f-478b-bf8b-6a36eb8dc20a,7e23a7f9-c163-4470-bfc5-bf5e4b708f29,814e239a-1509-48c9-b3b3-611fd560f364,82c86742-3826-4200-8092-ff192f955f1f,85a16e44-1a85-4337-842b-3674cbf3ac81,889ea826-196c-413e-9f4e-b592f3524596,8ce0caf0-5a19-48cb-9479-32668edec2e8,906d5ae8-ceff-4e65-b1ad-947ffa419ea8,91be19f7-654d-4be5-971d-862acc0d587b,94c71e0f-e9b6-4b28-ab11-394be6c72abc,97c6d7c1-625a-435e-9076-54bb3bb4358b,99ced21e-a257-4061-84e3-4ac58199dacc,9b547f80-6fad-48ae-aecd-f77d509e544e,9de91aa0-afce-4efe-b523-8506553effef,a0f5df8f-cd23-4c22-b34c-f1cc61786630,a3e0aa52-9399-4f72-891e-3443afc31a51,a478431a-937f-4548-aa16-08d0420ac979,a695be22-c2cd-4f68-a4ed-106efcae380a,a9e89631-063f-403d-b5d7-e23ca965b9e1,ac65d147-01ae-4b9b-a760-c387dc3f9ef9,af1af095-d06f-4f37-9275-177a798188a7,b19eaea6-b440-4a28-9be3-d60510a8b0c3,b3d5e656-ef8b-4d6a-a429-958fe297f1f0,b667aae7-b802-4244-bb32-e84a599f9212,b939e34e-937f-49c1-adb1-9ccebef04a1d,ba4cf99a-3e5c-4de7-82bb-c011b8948d36,bb82794d-6d3a-44a1-9153-9cd986693baf,be78baea-9b37-4726-9813-decf6e99ece3,c0ce95c4-3c77-4ff5-9c7c-6400d7eca7b3,c21d4322-8825-4566-9117-2fddc082b200,c3de9747-4825-4f75-b39b-d084fbfee969,c4a4987b-df6a-4f7c-9649-65854fa00d91,c975d91b-2bab-4b3e-af5a-ace60b218065,cb03b14a-0836-4552-bbfc-5b130320f004,cd3c996f-6345-49d1-a01a-1edc106a1e1a,d101c82b-4321-4021-8a80-1821676f1bfc,d3198135-88c1-4666-9521-01096fa65139,d6592ecb-6c58-47eb-a085-054cbce9955d,d90d5be8-e518-483c-8b89-b06819134d02,deafea4a-6033-422d-b98f-c170be3b44e9,dfdab5a3-db42-445e-a081-6c5c14fe49b7,e3df76ce-6bda-4fb3-a93a-96cd2a25ef49,e6bd586a-10fc-44ab-a56d-d2e71e6a9fc1,e9594811-7a16-474e-a96e-1905d960a9bc,eac13abe-f95d-46d0-8234-331f1490093a,ecab990d-4825-48bd-ba67-df19b8aa12ff,ee79e5f5-6308-4033-9aa7-457359b5d2ae,f165da46-9b8c-4357-ad9c-346c328f6b56,f2ea22ca-3885-45c3-929b-816e324c8fe2,f4dccde9-d5e5-46db-beaf-1aba2bec6985,f94676ce-726f-4970-9f93-2b78bb271328,fb86ccd8-bd4a-497c-b214-502db104c014,fe12e876-b471-4c60-a76d-af177fa2fece,ffcbd257-7be5-4773-b631-994a0f4057ee}",
              "correlation": "-0.00136775"
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 29,
              "most_common_values": "{7ea4ba48-babf-4271-82f0-eb4990c9f9d3,9030ab33-efb9-4763-9fd3-e30c87b6b20d,08a33fb7-7677-41c2-8baa-0375c1f4d9c2,1afd7965-a642-40ad-9d23-57e607c8f835,2ca68eac-a8b1-45d7-9c10-f0803800e1f7,3332c2d8-8600-4ba6-9029-26fa6190be96,34078038-5c66-4cba-a6e1-a41d732dcebe,3808f43c-6b2e-4c6c-bb1f-71702e119cff,3b1d39cf-3201-4053-80ab-c2bf95b7613a,3d03f1f9-5b12-41dd-a72e-214cf73f4fb6,42417771-801c-46ec-8d6e-ebefbcd0fb04,43cef2a8-9c8c-48f7-9124-8ab6b17de301,54bc6b11-ea09-42d0-9f56-dd38809c669e,5aa66610-9141-478c-804f-97191da0198f,95fc8176-f956-4f3b-bf01-9488e17ebbaa,ae6c1dfa-39c3-465c-890f-3fe6ab5f4bc9,e3c77ca3-1210-4a14-bc74-f99f5ec554b9,eb444d7d-e9d4-4207-bc88-fec8109ebdf2,f360829a-1586-4ffa-ad25-28789c28d903,4cc10211-be50-4611-bc85-d59d16399a6b,11cbf31e-b275-4fee-a5f6-d9468caf3d10,4e4c4605-22ef-4138-b088-3cd9d5b65d2d,5125c991-ade2-454e-86ea-27d116e0abf5,57fea9a1-765e-406c-b182-883d2720d99c,68e251b3-a23a-4a31-886a-07f171067de0,b52a8b13-f411-46a9-b9ba-3c858f74e2d5,83ca5ef5-7a7c-406d-8d25-7ccb9500db05,ea863f1a-b7da-4169-aae6-04c33f3dbce4,37725ca3-8857-411d-8e38-4135d9317bad}",
              "most_common_frequencies": "{0.102079,0.0415879,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0340265,0.0321361,0.0302457,0.0302457,0.0302457,0.0302457,0.0302457,0.0302457,0.0226843,0.0226843,0.0189036}",
              "histogram_bounds": null,
              "correlation": "-0.109654"
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.102079,
              "most_common_values": "{2711aec5-829a-4569-a85f-ecf8c89f123d,1db2da77-3c88-4bda-989b-349b4cab6604,876113b5-d7c3-41bc-ab69-4b6859f864a5,904a7c17-c8cc-4aff-958d-7788dea001dc,35905fe4-5532-4513-9f58-de3c28942e1a,8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd,489fd3c5-73e4-4be9-9058-3fcb04dcad5d,81c9ec8f-7b81-4263-879e-b2088aefaca8,fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5,5c0e1219-9355-4078-b76d-a63ec320969c,8af191dc-5e8f-4fe9-a5f0-97fe316b0004,3a712b45-cd7e-4e66-a6dd-133255be5895,84c631df-a046-41e9-a10c-4a77561e6c08,8ad90589-7135-461f-b61d-272cbf3f6d04,be32d4f4-d8a2-4ac4-8fb2-21879753581c,b2466431-ede1-4eaa-a86e-ad0c7128b125,5d401fa5-157f-445f-9f06-def9de2ae6ce,32f8ab9b-1259-4764-b463-aa2e70ca8c74,a950fdd0-847e-4f4d-96f5-9064719c8953,dd6651f8-9203-4efb-92ca-e2b6f8230f97,05bb40f8-d63f-4469-9a35-e466d1f2f1da,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca,18ebd05e-2357-44c6-a49d-d280ceed7784,be3517a2-68e2-4884-85f9-18eb16eebdd0,c465ed34-a5df-42ef-9332-3273a72f4c4d,0c2096c3-6eca-4582-b2a1-2166d2c8d61e,78ba8339-270a-4d10-b7f6-f10999568948,9082191f-69ff-469f-baa6-46cc918346ae,d31a40f9-1972-43e9-9864-277110c9e958,5200018e-14e6-46a0-8dff-2aa113ea6b8e,52128184-ee7e-44c6-8c65-31acee1b6843,56b37bdf-5f8b-4110-91b2-e55f6e83eb30,75e00430-067e-44af-b498-84b28edd51be,8481aae6-f7e9-41b1-9a93-77a9fd8e800f,ba4d8e2a-5559-4cfe-a7a1-92e6d03efe65,c83d54c5-3468-4fde-b2b6-220034bb7480,d3920bbc-a281-4b97-bc88-96315e38d3ba,0bfd9afb-285d-474b-86cc-c91ab64c5622,22e64ff0-c283-47a4-a445-91f7f7194373,2806705a-9b9f-4437-b9bb-ca6489404484,2d7bd29f-85c0-4593-bdcf-eb2102445cfc,33443732-814b-4407-bbf0-8b30b57ef390,5e23dccd-8454-4c69-96a8-ec5b1d0ec54c,667be1e9-a840-4368-a40a-ed9e89dcf055,6e34ce3e-bbcd-4ba7-812e-32b0c39192fb,767cc150-1746-4d71-a8db-b9771f2f7770,813eac3e-b880-4988-823f-a345c5d6ed87,a0a34603-1309-4c2c-9064-02e62cda7d41,a298edef-70b4-4805-95eb-f921c50c2838,d909f3d1-18e3-4637-9ab4-bd05e81f87af,e790c8d4-4068-4f9e-b34f-633e392c562e,ee7ff6aa-3a38-47e7-92b5-060342521a61}",
              "most_common_frequencies": "{0.0491493,0.047259,0.047259,0.047259,0.0453686,0.0453686,0.0434783,0.0415879,0.0415879,0.0396975,0.0396975,0.0378072,0.0340265,0.0321361,0.0321361,0.0302457,0.0283554,0.026465,0.026465,0.026465,0.0245747,0.0245747,0.0132325,0.0132325,0.0113422,0.0094518,0.0094518,0.00756144,0.00756144,0.00756144,0.00756144,0.00567108,0.00567108,0.00567108,0.00567108,0.00567108,0.00567108,0.00567108,0.00567108,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072,0.00378072}",
              "histogram_bounds": null,
              "correlation": "0.0826701"
            },
            {
              "name": "status",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{selected,reserve}",
              "most_common_frequencies": "{0.931947,0.0680529}",
              "histogram_bounds": null,
              "correlation": "0.623639"
            },
            {
              "name": "team",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{orange,blue}",
              "most_common_frequencies": "{0.449905,0.448015}",
              "histogram_bounds": null,
              "correlation": "0.572075"
            },
            {
              "name": "paid",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{t,f}",
              "most_common_frequencies": "{0.897921,0.102079}",
              "histogram_bounds": null,
              "correlation": "0.450043"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "timezone('utc'::text, now())",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.10775,
              "most_common_values": "{\"2025-01-02 15:52:54.624+00\",\"2024-11-15 15:32:28.417896+00\",\"2024-11-15 15:32:28.534694+00\",\"2024-11-11 17:26:09.811064+00\",\"2024-11-11 17:26:09.87908+00\",\"2024-11-11 17:29:00.404629+00\",\"2024-11-11 17:29:00.459064+00\",\"2024-11-11 17:32:33.391191+00\",\"2024-11-11 17:32:33.448724+00\",\"2024-11-15 10:49:59.018562+00\",\"2024-11-15 10:49:59.08566+00\",\"2024-11-15 15:25:20.731293+00\",\"2024-11-15 15:25:20.808342+00\",\"2024-11-15 15:36:14.785982+00\",\"2024-11-15 15:36:14.850174+00\",\"2024-11-15 15:41:05.987294+00\",\"2024-11-15 15:41:06.072672+00\",\"2024-11-15 15:45:17.925549+00\",\"2024-11-15 15:45:18.031348+00\",\"2024-11-15 15:48:49.304042+00\",\"2024-11-15 15:48:49.38855+00\",\"2024-11-15 15:51:48.368044+00\",\"2024-11-15 15:51:48.4376+00\",\"2024-11-15 16:04:25.477469+00\",\"2024-11-15 16:04:25.53922+00\",\"2024-11-15 23:40:49.259957+00\",\"2024-11-15 23:40:49.328407+00\",\"2024-11-16 00:17:38.660113+00\",\"2024-11-16 00:17:38.724796+00\",\"2024-11-16 00:19:23.127238+00\",\"2024-11-16 00:19:23.174666+00\",\"2024-11-28 09:22:39.830321+00\",\"2024-11-28 09:22:39.89501+00\",\"2024-12-16 09:51:53.718502+00\",\"2024-12-19 13:43:26.197049+00\",\"2024-12-19 13:43:26.287209+00\",\"2024-12-19 15:03:42.562721+00\",\"2024-12-19 15:03:42.638915+00\",\"2024-11-11 17:23:18.874391+00\",\"2024-11-11 17:23:18.9478+00\",\"2024-11-15 11:09:28.958801+00\",\"2024-11-15 11:09:29.03145+00\",\"2024-11-15 15:26:50.716691+00\",\"2024-11-15 15:26:50.783285+00\",\"2024-11-15 16:06:28.923613+00\",\"2024-11-15 16:06:28.989375+00\",\"2024-11-20 23:47:31.706078+00\",\"2024-11-20 23:47:31.788576+00\",\"2024-12-05 15:13:54.754434+00\",\"2024-12-05 15:13:54.85387+00\",\"2024-12-16 09:51:53.602842+00\",\"2024-11-11 17:07:30.569145+00\",\"2024-11-11 17:07:30.662434+00\",\"2024-11-11 17:18:03.786984+00\",\"2024-11-11 17:18:03.847411+00\",\"2024-11-11 17:02:27.557002+00\",\"2024-11-11 17:02:27.617386+00\"}",
              "most_common_frequencies": "{0.102079,0.020794,0.020794,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0170132,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0151229,0.0113422,0.0113422,0.0113422,0.0113422,0.0094518,0.0094518}",
              "histogram_bounds": null,
              "correlation": "0.421695"
            },
            {
              "name": "paid_by_player_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "payment_recipient_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "payment_received_date",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{\"2024-12-29 00:03:01.41468+00\"}",
              "most_common_frequencies": "{0.897921}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "selection_method",
              "type": "text",
              "nullable": "NO",
              "default": "'none'::text",
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 3,
              "most_common_values": "{merit,none,random}",
              "most_common_frequencies": "{0.860113,0.136106,0.00378072}",
              "histogram_bounds": null,
              "correlation": "0.872184"
            },
            {
              "name": "payment_status",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{admin_verified}",
              "most_common_frequencies": "{0.897921}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "payment_verified_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{\"2024-12-29 00:03:01.41468+00\"}",
              "most_common_frequencies": "{0.897921}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "payment_verified_by",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "game_registrations_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "game_registrations_paid_by_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "paid_by_player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "game_registrations_payment_recipient_id_fkey",
              "type": "FOREIGN KEY",
              "column": "payment_recipient_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "game_registrations_payment_status_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "game_registrations",
              "foreign_column": "payment_status",
              "check_definition": "CHECK ((payment_status = ANY (ARRAY['unpaid'::text, 'marked_paid'::text, 'admin_verified'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "game_registrations_payment_verified_by_fkey",
              "type": "FOREIGN KEY",
              "column": "payment_verified_by",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "game_registrations_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "game_registrations",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "game_registrations_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "game_registrations_selection_method_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "game_registrations",
              "foreign_column": "selection_method",
              "check_definition": "CHECK ((selection_method = ANY (ARRAY['merit'::text, 'random'::text, 'none'::text, 'slot_offer'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "game_registrations_status_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "game_registrations",
              "foreign_column": "status",
              "check_definition": "CHECK ((status = ANY (ARRAY['registered'::text, 'selected'::text, 'reserve'::text, 'dropped_out'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "game_registrations_team_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "game_registrations",
              "foreign_column": "team",
              "check_definition": "CHECK ((team = ANY (ARRAY['blue'::text, 'orange'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_game_player",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "game_registrations",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_game_player",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "game_registrations",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_game_player",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "game_registrations",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_game_player",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "game_registrations",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_126996_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_126996_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_126996_11_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "game_registration_xp_update",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION handle_game_registration_xp()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_registration_xp_update",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION handle_game_registration_xp()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_streaks_trigger",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_player_streaks()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_streaks_trigger",
              "timing": "AFTER",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION update_player_streaks()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_streaks_trigger",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_streaks()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "game_registrations_pkey",
              "definition": "CREATE UNIQUE INDEX game_registrations_pkey ON public.game_registrations USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "unique_game_player",
              "definition": "CREATE UNIQUE INDEX unique_game_player ON public.game_registrations USING btree (game_id, player_id)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0",
              "opclass": "10065 10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can register any player",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(EXISTS ( SELECT 1\n   FROM players p\n  WHERE ((p.id = auth.uid()) AND ((p.is_admin = true) OR (p.is_super_admin = true)))))"
            },
            {
              "name": "Enable insert for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "((EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.id = auth.uid()) AND (players.is_admin = true)))) OR (player_id = auth.uid()))"
            },
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable update for admins",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "((EXISTS ( SELECT 1\n   FROM ((players p\n     JOIN admin_roles ar ON ((ar.player_id = p.id)))\n     JOIN admin_permissions ap ON ((ap.admin_role_id = ar.id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text)))) OR (player_id = ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid()))))",
              "with_check": null
            },
            {
              "name": "Everyone can view game registrations",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Players can delete their own registration",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "DELETE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = game_registrations.player_id)))",
              "with_check": null
            },
            {
              "name": "Players can register themselves",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = game_registrations.player_id)))"
            },
            {
              "name": "Players can update their own registration",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = game_registrations.player_id)))",
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = game_registrations.player_id)))"
            }
          ]
        },
        {
          "table_name": "game_selections",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "264 kB",
          "estimated_rows": 7,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{02bb4c69-a503-4082-9ac8-4de6f884ec20,1d83f971-3e42-4c25-a817-0e639357a4bb,99a65425-5ca2-408e-93fc-ade4122e3392}",
              "correlation": "-0.5"
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.333333,
              "most_common_values": "{7ea4ba48-babf-4271-82f0-eb4990c9f9d3}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "selected_players",
              "type": "jsonb",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.666667,
              "most_common_values": "{[]}",
              "most_common_frequencies": "{0.666667}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "reserve_players",
              "type": "jsonb",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.666667,
              "most_common_values": "{[]}",
              "most_common_frequencies": "{0.666667}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "selection_metadata",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"{\\\"timestamp\\\": \\\"2025-01-02T15:53:00.840Z\\\"}\",\"{\\\"timestamp\\\": \\\"2025-01-02T15:53:00.913Z\\\"}\",\"{\\\"timestamp\\\": \\\"2025-01-02T15:53:07.403Z\\\", \\\"merit_selected\\\": [\\\"2711aec5-829a-4569-a85f-ecf8c89f123d\\\", \\\"1db2da77-3c88-4bda-989b-349b4cab6604\\\", \\\"8af191dc-5e8f-4fe9-a5f0-97fe316b0004\\\", \\\"8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd\\\", \\\"35905fe4-5532-4513-9f58-de3c28942e1a\\\", \\\"876113b5-d7c3-41bc-ab69-4b6859f864a5\\\", \\\"904a7c17-c8cc-4aff-958d-7788dea001dc\\\", \\\"3a712b45-cd7e-4e66-a6dd-133255be5895\\\", \\\"fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5\\\", \\\"489fd3c5-73e4-4be9-9058-3fcb04dcad5d\\\", \\\"81c9ec8f-7b81-4263-879e-b2088aefaca8\\\", \\\"84c631df-a046-41e9-a10c-4a77561e6c08\\\", \\\"5c0e1219-9355-4078-b76d-a63ec320969c\\\", \\\"dd6651f8-9203-4efb-92ca-e2b6f8230f97\\\", \\\"5d401fa5-157f-445f-9f06-def9de2ae6ce\\\", \\\"32f8ab9b-1259-4764-b463-aa2e70ca8c74\\\"], \\\"random_selected\\\": [\\\"c465ed34-a5df-42ef-9332-3273a72f4c4d\\\", \\\"6e34ce3e-bbcd-4ba7-812e-32b0c39192fb\\\"]}\"}",
              "correlation": "1"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "timezone('utc'::text, now())",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2025-01-02 15:52:57.925697+00\",\"2025-01-02 15:52:57.964113+00\",\"2025-01-02 15:53:04.450914+00\"}",
              "correlation": "1"
            }
          ],
          "constraints": [
            {
              "name": "game_selections_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "game_selections_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "game_selections",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_6_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "game_selections_pkey",
              "definition": "CREATE UNIQUE INDEX game_selections_pkey ON public.game_selections USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable insert for authenticated users only",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.role() = 'authenticated'::text)"
            },
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "games",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "80 kB",
          "estimated_rows": 29,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "gen_random_uuid()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{08a33fb7-7677-41c2-8baa-0375c1f4d9c2,11cbf31e-b275-4fee-a5f6-d9468caf3d10,1afd7965-a642-40ad-9d23-57e607c8f835,2ca68eac-a8b1-45d7-9c10-f0803800e1f7,3332c2d8-8600-4ba6-9029-26fa6190be96,34078038-5c66-4cba-a6e1-a41d732dcebe,37725ca3-8857-411d-8e38-4135d9317bad,3808f43c-6b2e-4c6c-bb1f-71702e119cff,3b1d39cf-3201-4053-80ab-c2bf95b7613a,3d03f1f9-5b12-41dd-a72e-214cf73f4fb6,42417771-801c-46ec-8d6e-ebefbcd0fb04,43cef2a8-9c8c-48f7-9124-8ab6b17de301,4cc10211-be50-4611-bc85-d59d16399a6b,4e4c4605-22ef-4138-b088-3cd9d5b65d2d,5125c991-ade2-454e-86ea-27d116e0abf5,54bc6b11-ea09-42d0-9f56-dd38809c669e,57fea9a1-765e-406c-b182-883d2720d99c,5aa66610-9141-478c-804f-97191da0198f,68e251b3-a23a-4a31-886a-07f171067de0,7ea4ba48-babf-4271-82f0-eb4990c9f9d3,83ca5ef5-7a7c-406d-8d25-7ccb9500db05,9030ab33-efb9-4763-9fd3-e30c87b6b20d,95fc8176-f956-4f3b-bf01-9488e17ebbaa,ae6c1dfa-39c3-465c-890f-3fe6ab5f4bc9,b52a8b13-f411-46a9-b9ba-3c858f74e2d5,e3c77ca3-1210-4a14-bc74-f99f5ec554b9,ea863f1a-b7da-4169-aae6-04c33f3dbce4,eb444d7d-e9d4-4207-bc88-fec8109ebdf2,f360829a-1586-4ffa-ad25-28789c28d903}",
              "correlation": "-0.0472906"
            },
            {
              "name": "date",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-05-15 23:59:59.999+00\",\"2024-06-19 23:59:59.999+00\",\"2024-06-26 20:00:00+00\",\"2024-07-03 20:00:00+00\",\"2024-07-11 20:00:00+00\",\"2024-07-17 20:00:00+00\",\"2024-07-24 20:00:00+00\",\"2024-07-31 20:00:00+00\",\"2024-08-07 23:59:59.999+00\",\"2024-08-14 23:59:59.999+00\",\"2024-08-21 23:59:59.999+00\",\"2024-08-28 20:00:00+00\",\"2024-09-04 20:00:00+00\",\"2024-09-11 20:00:00+00\",\"2024-09-18 23:59:59.999+00\",\"2024-09-25 20:00:00+00\",\"2024-10-02 20:00:00+00\",\"2024-10-09 20:00:00+00\",\"2024-10-16 20:00:00+00\",\"2024-10-23 23:59:59.999+00\",\"2024-10-30 20:00:00+00\",\"2024-11-06 20:00:00+00\",\"2024-11-13 20:00:00+00\",\"2024-11-20 20:00:00+00\",\"2024-11-27 20:00:00+00\",\"2024-12-04 20:00:00+00\",\"2024-12-11 20:00:00+00\",\"2024-12-18 20:00:00+00\",\"2025-01-08 21:00:00+00\"}",
              "correlation": "0.477833"
            },
            {
              "name": "registration_window_start",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-05-15 00:00:00+00\",\"2024-06-19 00:00:00+00\",\"2024-06-26 00:00:00+00\",\"2024-07-03 00:00:00+00\",\"2024-07-11 00:00:00+00\",\"2024-07-17 00:00:00+00\",\"2024-07-24 00:00:00+00\",\"2024-07-31 00:00:00+00\",\"2024-08-07 00:00:00+00\",\"2024-08-14 00:00:00+00\",\"2024-08-21 00:00:00+00\",\"2024-08-28 00:00:00+00\",\"2024-09-04 00:00:00+00\",\"2024-09-11 00:00:00+00\",\"2024-09-18 00:00:00+00\",\"2024-09-25 00:00:00+00\",\"2024-10-02 00:00:00+00\",\"2024-10-09 00:00:00+00\",\"2024-10-16 00:00:00+00\",\"2024-10-23 00:00:00+00\",\"2024-10-30 00:00:00+00\",\"2024-11-06 00:00:00+00\",\"2024-11-13 00:00:00+00\",\"2024-11-20 00:00:00+00\",\"2024-11-27 00:00:00+00\",\"2024-12-04 00:00:00+00\",\"2024-12-11 00:00:00+00\",\"2024-12-18 00:00:00+00\",\"2025-01-02 15:52:00+00\"}",
              "correlation": "0.477833"
            },
            {
              "name": "registration_window_end",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-05-15 23:59:58.999+00\",\"2024-06-19 23:59:59.998+00\",\"2024-06-26 20:00:00+00\",\"2024-07-03 20:00:00+00\",\"2024-07-11 20:00:00+00\",\"2024-07-17 20:00:00+00\",\"2024-07-24 20:00:00+00\",\"2024-07-31 20:00:00+00\",\"2024-08-07 23:59:58.999+00\",\"2024-08-14 23:59:58.999+00\",\"2024-08-21 23:59:58.999+00\",\"2024-08-28 20:00:00+00\",\"2024-09-04 20:00:00+00\",\"2024-09-11 20:00:00+00\",\"2024-09-18 23:59:58.999+00\",\"2024-09-25 20:00:00+00\",\"2024-10-02 20:00:00+00\",\"2024-10-09 20:00:00+00\",\"2024-10-16 20:00:00+00\",\"2024-10-23 23:59:58.999+00\",\"2024-10-30 20:00:00+00\",\"2024-11-06 20:00:00+00\",\"2024-11-13 20:00:00+00\",\"2024-11-20 20:00:00+00\",\"2024-11-27 20:00:00+00\",\"2024-12-04 20:00:00+00\",\"2024-12-11 20:00:00+00\",\"2024-12-18 20:00:00+00\",\"2025-01-02 15:53:00+00\"}",
              "correlation": "0.477833"
            },
            {
              "name": "score_blue",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.172414,
              "most_common_values": "{5,4,3}",
              "most_common_frequencies": "{0.172414,0.137931,0.0689655}",
              "histogram_bounds": "{7,8}",
              "correlation": "-0.351648"
            },
            {
              "name": "score_orange",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.206897,
              "most_common_values": "{5,3}",
              "most_common_frequencies": "{0.172414,0.137931}",
              "histogram_bounds": "{2,4,6,10}",
              "correlation": "-0.0769231"
            },
            {
              "name": "outcome",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.103448,
              "most_common_values": "{blue_win,orange_win,draw}",
              "most_common_frequencies": "{0.344828,0.241379,0.0689655}",
              "histogram_bounds": null,
              "correlation": "0.610526"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "timezone('utc'::text, now())",
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-11-11 16:53:47.616288+00\",\"2024-11-11 17:07:30.469444+00\",\"2024-11-11 17:18:03.706994+00\",\"2024-11-11 17:23:18.801122+00\",\"2024-11-11 17:26:09.716193+00\",\"2024-11-11 17:29:00.311676+00\",\"2024-11-11 17:32:33.308869+00\",\"2024-11-15 10:49:58.900155+00\",\"2024-11-15 11:09:28.864134+00\",\"2024-11-15 15:00:38.640031+00\",\"2024-11-15 15:17:51.610432+00\",\"2024-11-15 15:21:30.654751+00\",\"2024-11-15 15:26:50.629529+00\",\"2024-11-15 15:32:28.341681+00\",\"2024-11-15 15:36:14.706985+00\",\"2024-11-15 15:38:46.514516+00\",\"2024-11-15 15:41:05.888517+00\",\"2024-11-15 15:45:17.834528+00\",\"2024-11-15 15:48:49.234186+00\",\"2024-11-15 15:51:48.290128+00\",\"2024-11-15 15:57:50.931802+00\",\"2024-11-15 16:06:28.837439+00\",\"2024-11-15 23:40:49.13482+00\",\"2024-11-20 23:47:31.604513+00\",\"2024-11-28 09:22:39.728864+00\",\"2024-12-05 15:13:54.593481+00\",\"2024-12-16 09:51:53.452089+00\",\"2024-12-19 13:43:26.083004+00\",\"2025-01-02 15:52:49.012485+00\"}",
              "correlation": "0.412808"
            },
            {
              "name": "venue_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{abe7111c-c99b-47f6-9508-75234c70cd9f}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "max_players",
              "type": "integer",
              "nullable": "YES",
              "default": "18",
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.206897,
              "most_common_values": "{18,16,12}",
              "most_common_frequencies": "{0.62069,0.206897,0.0689655}",
              "histogram_bounds": "{10,17,22}",
              "correlation": "0.675862"
            },
            {
              "name": "random_slots",
              "type": "integer",
              "nullable": "NO",
              "default": "2",
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 2,
              "most_common_values": "{0}",
              "most_common_frequencies": "{0.965517}",
              "histogram_bounds": null,
              "correlation": "0.933005"
            },
            {
              "name": "is_historical",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{t}",
              "most_common_frequencies": "{0.965517}",
              "histogram_bounds": null,
              "correlation": "0.961576"
            },
            {
              "name": "sequence_number",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29}",
              "correlation": "0.477833"
            },
            {
              "name": "pitch_cost",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 10,
              "numeric_scale": 2,
              "n_distinct": -0.0344828,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "payment_link",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 15,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0689655,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{https://monzo.me/davidleiyungchoo/2.95?h=wTE85F&d=Wednesday%20night%20football%20%E2%9A%BD%EF%B8%8F%20,https://monzo.me/davidleiyungchoo/3.00?h=wTE85F&d=Festive%20football%20%E2%9A%BD%EF%B8%8F%20}",
              "correlation": "1"
            },
            {
              "name": "needs_completion",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 16,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{f}",
              "most_common_frequencies": "{0.965517}",
              "histogram_bounds": null,
              "correlation": "0.933005"
            },
            {
              "name": "completed",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 17,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{t}",
              "most_common_frequencies": "{0.965517}",
              "histogram_bounds": null,
              "correlation": "0.961576"
            },
            {
              "name": "teams_announced",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 18,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{f}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "team_announcement_time",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 19,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.896552,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-05-15 19:59:59.999+00\",\"2024-06-19 19:59:59.999+00\",\"2024-06-26 16:00:00+00\",\"2024-07-03 16:00:00+00\",\"2024-07-11 16:00:00+00\",\"2024-07-17 16:00:00+00\",\"2024-07-24 16:00:00+00\",\"2024-07-31 16:00:00+00\",\"2024-08-07 19:59:59.999+00\",\"2024-08-14 19:59:59.999+00\",\"2024-08-21 19:59:59.999+00\",\"2024-08-28 16:00:00+00\",\"2024-09-04 16:00:00+00\",\"2024-09-11 16:00:00+00\",\"2024-09-18 19:59:59.999+00\",\"2024-09-25 16:00:00+00\",\"2024-10-02 16:00:00+00\",\"2024-10-09 16:00:00+00\",\"2024-10-16 16:00:00+00\",\"2024-10-23 19:59:59.999+00\",\"2024-10-30 16:00:00+00\",\"2024-11-06 16:00:00+00\",\"2024-11-13 16:00:00+00\",\"2024-11-20 16:00:00+00\",\"2024-11-27 16:00:00+00\",\"2025-01-08 17:00:00+00\"}",
              "correlation": "0.693675"
            },
            {
              "name": "status",
              "type": "USER-DEFINED",
              "nullable": "NO",
              "default": "'open'::game_status",
              "description": null,
              "position": 20,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{open}",
              "most_common_frequencies": "{0.965517}",
              "histogram_bounds": null,
              "correlation": "0.933005"
            }
          ],
          "constraints": [
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "created_at",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "needs_completion",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "outcome",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "score_blue",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "score_orange",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "games_outcome_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "outcome",
              "check_definition": "CHECK ((outcome = ANY (ARRAY['blue_win'::text, 'orange_win'::text, 'draw'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "games_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "games_venue_id_fkey",
              "type": "FOREIGN KEY",
              "column": "venue_id",
              "foreign_table": "venues",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "valid_dates",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "date",
              "check_definition": "CHECK (((registration_window_start < registration_window_end) AND (registration_window_end <= date)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_dates",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "registration_window_end",
              "check_definition": "CHECK (((registration_window_start < registration_window_end) AND (registration_window_end <= date)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_dates",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "registration_window_start",
              "check_definition": "CHECK (((registration_window_start < registration_window_end) AND (registration_window_end <= date)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_score",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "score_blue",
              "check_definition": "CHECK ((((score_blue IS NULL) AND (score_orange IS NULL)) OR ((score_blue IS NOT NULL) AND (score_orange IS NOT NULL))))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_score",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "score_orange",
              "check_definition": "CHECK ((((score_blue IS NULL) AND (score_orange IS NULL)) OR ((score_blue IS NOT NULL) AND (score_orange IS NOT NULL))))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_11_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_20_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "game_completion_status_check",
              "timing": "BEFORE",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION check_game_completion_status()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_sequence_delete",
              "timing": "AFTER",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION update_game_sequence_numbers()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_sequence_insert",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_game_sequence_numbers()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_sequence_update",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_game_sequence_numbers()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "set_game_needs_completion",
              "timing": "BEFORE",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_game_needs_completion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "set_game_needs_completion",
              "timing": "BEFORE",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_game_needs_completion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "trigger_game_deletion",
              "timing": "BEFORE",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION handle_game_deletion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_caps_on_game_completion",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_caps_on_game_completion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "games_pkey",
              "definition": "CREATE UNIQUE INDEX games_pkey ON public.games USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Everyone can view games",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Only admins can delete games",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "DELETE",
              "definition": "(auth.uid() IN ( SELECT p.user_id\n   FROM players p\n  WHERE (p.is_admin = true)))",
              "with_check": null
            },
            {
              "name": "Only admins can insert games",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.is_admin = true)))"
            },
            {
              "name": "Only admins can update games",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.is_admin = true)))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "notifications",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "48 kB",
          "estimated_rows": 3,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{41e1a2e4-e69d-4760-ad03-a5b5b4e2cf46,5fa14baa-0d78-41c3-8e9e-972ecaa34837,984f919e-09c9-45d3-9046-ef706db4f200,ad429bf5-106d-4290-8a9c-f96c070506ef}",
              "correlation": "-0.2"
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.75,
              "most_common_values": "{904a7c17-c8cc-4aff-958d-7788dea001dc}",
              "most_common_frequencies": "{0.5}",
              "histogram_bounds": "{32f8ab9b-1259-4764-b463-aa2e70ca8c74,b2466431-ede1-4eaa-a86e-ad0c7128b125}",
              "correlation": "0.8"
            },
            {
              "name": "type",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.5,
              "most_common_values": "{slot_offer,system_announcement}",
              "most_common_frequencies": "{0.5,0.5}",
              "histogram_bounds": null,
              "correlation": "0.8"
            },
            {
              "name": "message",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"A spot has opened up in a game on 08/01/2025. You have exclusive access until 16:32!\",\"A spot has opened up in a game on 08/01/2025. You have exclusive access until 16:33!\",\"Created slot offer for Justin (highest XP reserve player) for game on 08/01/2025\",\"Created slot offer for Tom K (highest XP reserve player) for game on 08/01/2025\"}",
              "correlation": "0.8"
            },
            {
              "name": "action_url",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.5,
              "most_common_values": "{\"2025-01-02 12:54:16.311383+00\",\"2025-01-02 12:55:02.597227+00\"}",
              "most_common_frequencies": "{0.5,0.5}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "read_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "expires_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "metadata",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.75,
              "most_common_values": "{\"{\\\"action\\\": \\\"slot_offers_created\\\", \\\"game_id\\\": \\\"0f1e67b6-f9b3-4a02-b26d-08879271df34\\\"}\"}",
              "most_common_frequencies": "{0.5}",
              "histogram_bounds": "{\"{\\\"game_id\\\": \\\"0f1e67b6-f9b3-4a02-b26d-08879271df34\\\", \\\"slot_offer_id\\\": \\\"39522bc2-f474-4a2e-baa9-e332ac425695\\\", \\\"exclusive_until\\\": \\\"2025-01-02T16:32:47.524956+00:00\\\"}\",\"{\\\"game_id\\\": \\\"0f1e67b6-f9b3-4a02-b26d-08879271df34\\\", \\\"slot_offer_id\\\": \\\"64675928-e6cf-4fab-bf8a-0d670abccde8\\\", \\\"exclusive_until\\\": \\\"2025-01-02T16:33:32.525082+00:00\\\"}\"}",
              "correlation": "0"
            },
            {
              "name": "title",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": "Optional title for the notification",
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.5,
              "most_common_values": "{\"Exclusive Game Slot Available!\",\"Slot Offer Created\"}",
              "most_common_frequencies": "{0.5,0.5}",
              "histogram_bounds": null,
              "correlation": "0.8"
            },
            {
              "name": "icon",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": "Optional icon identifier for the notification",
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "priority",
              "type": "smallint",
              "nullable": "YES",
              "default": "0",
              "description": "Priority level for the notification (higher numbers = higher priority)",
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 16,
              "numeric_scale": 0,
              "n_distinct": -0.5,
              "most_common_values": "{1,2}",
              "most_common_frequencies": "{0.5,0.5}",
              "histogram_bounds": null,
              "correlation": "0"
            }
          ],
          "constraints": [
            {
              "name": "notifications_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "notifications",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "notifications_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "notifications_type_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "notifications",
              "foreign_column": "type",
              "check_definition": "CHECK ((type = ANY (ARRAY['game_created'::text, 'game_cancelled'::text, 'team_announced'::text, 'game_reminder'::text, 'payment_request'::text, 'payment_confirmed'::text, 'registration_confirmed'::text, 'registration_removed'::text, 'bonus_earned'::text, 'penalty_earned'::text, 'system_announcement'::text, 'slot_offer'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127186_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127186_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127186_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127186_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "notifications_pkey",
              "definition": "CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can create all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))"
            },
            {
              "name": "Admins can create notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))"
            },
            {
              "name": "Admins can delete all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "DELETE",
              "definition": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))",
              "with_check": null
            },
            {
              "name": "Admins can update all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))",
              "with_check": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))"
            },
            {
              "name": "Admins can view all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "(EXISTS ( SELECT 1\n   FROM ((admin_roles ar\n     JOIN admin_permissions ap ON ((ap.admin_role_id = ar.id)))\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text))))",
              "with_check": null
            },
            {
              "name": "Players can create notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "((auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id))) OR (EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid()))))"
            },
            {
              "name": "Players can create their own notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))"
            },
            {
              "name": "Players can delete their notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "DELETE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))",
              "with_check": null
            },
            {
              "name": "Players can update their notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))",
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))"
            },
            {
              "name": "Players can update their own notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))",
              "with_check": null
            },
            {
              "name": "Players can view their notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "((auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id))) OR (EXISTS ( SELECT 1\n   FROM ((admin_roles ar\n     JOIN admin_permissions ap ON ((ap.admin_role_id = ar.id)))\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text)))))",
              "with_check": null
            },
            {
              "name": "Players can view their own notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))",
              "with_check": null
            },
            {
              "name": "Service role can manage all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "service_role"
              ],
              "command": "ALL",
              "definition": "true",
              "with_check": "true"
            },
            {
              "name": "Service role can manage notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "service_role"
              ],
              "command": "ALL",
              "definition": "true",
              "with_check": "true"
            }
          ]
        },
        {
          "table_name": "payment_presets",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "16 kB",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "name",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "payment_presets_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "payment_presets",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "payment_presets_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "2200_127195_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127195_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127195_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "payment_presets_pkey",
              "definition": "CREATE UNIQUE INDEX payment_presets_pkey ON public.payment_presets USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": null
        },
        {
          "table_name": "player_penalties",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "24 kB",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "penalty_type",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "expires_after_games",
              "type": "integer",
              "nullable": "NO",
              "default": "5",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "games_remaining",
              "type": "integer",
              "nullable": "NO",
              "default": "5",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "player_penalties_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "player_penalties_penalty_type_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_penalties",
              "foreign_column": "penalty_type",
              "check_definition": "CHECK ((penalty_type = 'SAME_DAY_DROPOUT'::text))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "player_penalties",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "player_penalties",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "player_penalties",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "player_penalties",
              "foreign_column": "penalty_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "player_penalties",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "player_penalties",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "player_penalties",
              "foreign_column": "penalty_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "penalty_type",
              "foreign_table": "player_penalties",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "penalty_type",
              "foreign_table": "player_penalties",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "penalty_type",
              "foreign_table": "player_penalties",
              "foreign_column": "penalty_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_6_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_7_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "player_penalties_pkey",
              "definition": "CREATE UNIQUE INDEX player_penalties_pkey ON public.player_penalties USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "definition": "CREATE UNIQUE INDEX player_penalties_player_id_game_id_penalty_type_key ON public.player_penalties USING btree (player_id, game_id, penalty_type)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0 100",
              "opclass": "10065 10065 3126",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Players can add same-day dropout penalties to themselves",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "((auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = player_penalties.player_id))) AND (penalty_type = 'SAME_DAY_DROPOUT'::text))"
            },
            {
              "name": "Players can view their own penalties",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = player_penalties.player_id)))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "player_ratings",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "48 kB",
          "estimated_rows": 24,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "rater_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "rated_player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "cannot_rate_self",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_ratings",
              "foreign_column": "rated_player_id",
              "check_definition": "CHECK ((rater_id <> rated_player_id))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "cannot_rate_self",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_ratings",
              "foreign_column": "rater_id",
              "check_definition": "CHECK ((rater_id <> rated_player_id))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_ratings_attack_rating_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_ratings",
              "foreign_column": "attack_rating",
              "check_definition": "CHECK (((attack_rating >= (0)::numeric) AND (attack_rating <= (10)::numeric)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_ratings_defense_rating_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_ratings",
              "foreign_column": "defense_rating",
              "check_definition": "CHECK (((defense_rating >= (0)::numeric) AND (defense_rating <= (10)::numeric)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_ratings_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "player_ratings",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_ratings_rated_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "rated_player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "player_ratings_rater_id_fkey",
              "type": "FOREIGN KEY",
              "column": "rater_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "unique_rating_pair",
              "type": "UNIQUE",
              "column": "rater_id",
              "foreign_table": "player_ratings",
              "foreign_column": "rater_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_rating_pair",
              "type": "UNIQUE",
              "column": "rater_id",
              "foreign_table": "player_ratings",
              "foreign_column": "rated_player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_rating_pair",
              "type": "UNIQUE",
              "column": "rated_player_id",
              "foreign_table": "player_ratings",
              "foreign_column": "rater_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_rating_pair",
              "type": "UNIQUE",
              "column": "rated_player_id",
              "foreign_table": "player_ratings",
              "foreign_column": "rated_player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127212_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127212_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127212_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "update_player_ratings_timestamp",
              "timing": "BEFORE",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_updated_at()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_player_ratings_trigger",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_player_average_ratings()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_player_ratings_trigger",
              "timing": "AFTER",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION update_player_average_ratings()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_player_ratings_trigger",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_average_ratings()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "player_ratings_pkey",
              "definition": "CREATE UNIQUE INDEX player_ratings_pkey ON public.player_ratings USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "unique_rating_pair",
              "definition": "CREATE UNIQUE INDEX unique_rating_pair ON public.player_ratings USING btree (rater_id, rated_player_id)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0",
              "opclass": "10065 10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can see all ratings",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "ALL",
              "definition": "((EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.id = player_ratings.rater_id) AND (players.user_id = auth.uid())))) OR (EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.user_id = auth.uid()) AND (players.is_admin = true)))))",
              "with_check": null
            },
            {
              "name": "Players can rate others they've played with",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "ALL",
              "definition": "(EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.id = player_ratings.rater_id) AND (players.user_id = auth.uid()))))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "player_stats",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "user_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "win_rate",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 5,
              "numeric_scale": 2,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_svg",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_options",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "current_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "max_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        },
        {
          "table_name": "player_stats_with_xp",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "user_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "win_rate",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 5,
              "numeric_scale": 2,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_svg",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_options",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "current_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "max_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        },
        {
          "table_name": "player_xp",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "64 kB",
          "estimated_rows": 54,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{05bb40f8-d63f-4469-9a35-e466d1f2f1da,0bfd9afb-285d-474b-86cc-c91ab64c5622,0c2096c3-6eca-4582-b2a1-2166d2c8d61e,18ebd05e-2357-44c6-a49d-d280ceed7784,1db2da77-3c88-4bda-989b-349b4cab6604,22e64ff0-c283-47a4-a445-91f7f7194373,2711aec5-829a-4569-a85f-ecf8c89f123d,2806705a-9b9f-4437-b9bb-ca6489404484,2d7bd29f-85c0-4593-bdcf-eb2102445cfc,32f8ab9b-1259-4764-b463-aa2e70ca8c74,33443732-814b-4407-bbf0-8b30b57ef390,35905fe4-5532-4513-9f58-de3c28942e1a,3a712b45-cd7e-4e66-a6dd-133255be5895,489fd3c5-73e4-4be9-9058-3fcb04dcad5d,5200018e-14e6-46a0-8dff-2aa113ea6b8e,52128184-ee7e-44c6-8c65-31acee1b6843,56b37bdf-5f8b-4110-91b2-e55f6e83eb30,5c0e1219-9355-4078-b76d-a63ec320969c,5d401fa5-157f-445f-9f06-def9de2ae6ce,5e23dccd-8454-4c69-96a8-ec5b1d0ec54c,667be1e9-a840-4368-a40a-ed9e89dcf055,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,6e34ce3e-bbcd-4ba7-812e-32b0c39192fb,75e00430-067e-44af-b498-84b28edd51be,767cc150-1746-4d71-a8db-b9771f2f7770,78ba8339-270a-4d10-b7f6-f10999568948,813eac3e-b880-4988-823f-a345c5d6ed87,81c9ec8f-7b81-4263-879e-b2088aefaca8,8481aae6-f7e9-41b1-9a93-77a9fd8e800f,84c631df-a046-41e9-a10c-4a77561e6c08,876113b5-d7c3-41bc-ab69-4b6859f864a5,8ad90589-7135-461f-b61d-272cbf3f6d04,8af191dc-5e8f-4fe9-a5f0-97fe316b0004,8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd,904a7c17-c8cc-4aff-958d-7788dea001dc,9082191f-69ff-469f-baa6-46cc918346ae,a0a34603-1309-4c2c-9064-02e62cda7d41,a298edef-70b4-4805-95eb-f921c50c2838,a950fdd0-847e-4f4d-96f5-9064719c8953,b2466431-ede1-4eaa-a86e-ad0c7128b125,ba4d8e2a-5559-4cfe-a7a1-92e6d03efe65,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,be32d4f4-d8a2-4ac4-8fb2-21879753581c,be3517a2-68e2-4884-85f9-18eb16eebdd0,c465ed34-a5df-42ef-9332-3273a72f4c4d,c83d54c5-3468-4fde-b2b6-220034bb7480,d31a40f9-1972-43e9-9864-277110c9e958,d3920bbc-a281-4b97-bc88-96315e38d3ba,d909f3d1-18e3-4637-9ab4-bd05e81f87af,dd6651f8-9203-4efb-92ca-e2b6f8230f97,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca,e790c8d4-4068-4f9e-b34f-633e392c562e,ee7ff6aa-3a38-47e7-92b5-060342521a61,fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5}",
              "correlation": "-0.0639222"
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "NO",
              "default": "0",
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.722222,
              "most_common_values": "{12,10,20,14,26,34,40}",
              "most_common_frequencies": "{0.111111,0.0925926,0.0555556,0.037037,0.037037,0.037037,0.037037}",
              "histogram_bounds": "{16,18,22,24,30,46,68,76,86,112,165,174,180,188,192,202,218,223,239,240,244,274,312,326,344,360,403,409,417,456,562,717}",
              "correlation": "0.272804"
            },
            {
              "name": "last_calculated",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.351852,
              "most_common_values": "{\"2025-01-02 15:53:04.374032+00\"}",
              "most_common_frequencies": "{0.666667}",
              "histogram_bounds": "{\"2025-01-02 15:53:04.325714+00\",\"2025-01-02 15:53:04.325898+00\",\"2025-01-02 15:53:04.328199+00\",\"2025-01-02 15:53:04.330869+00\",\"2025-01-02 15:53:04.336178+00\",\"2025-01-02 15:53:04.337945+00\",\"2025-01-02 15:53:04.34379+00\",\"2025-01-02 15:53:04.344391+00\",\"2025-01-02 15:53:04.345627+00\",\"2025-01-02 15:53:04.346382+00\",\"2025-01-02 15:53:04.347254+00\",\"2025-01-02 15:53:04.35868+00\",\"2025-01-02 15:53:04.364029+00\",\"2025-01-02 15:53:04.365732+00\",\"2025-01-02 15:53:04.36884+00\",\"2025-01-02 15:53:04.369451+00\",\"2025-01-02 15:53:04.374555+00\",\"2025-01-02 15:53:04.375265+00\"}",
              "correlation": "0.150372"
            }
          ],
          "constraints": [
            {
              "name": "player_xp_pkey",
              "type": "PRIMARY KEY",
              "column": "player_id",
              "foreign_table": "player_xp",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_xp_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "player_xp_xp_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_xp",
              "foreign_column": "xp",
              "check_definition": "CHECK ((xp >= 0))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_134426_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_134426_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "player_xp_pkey",
              "definition": "CREATE UNIQUE INDEX player_xp_pkey ON public.player_xp USING btree (player_id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": null
        },
        {
          "table_name": "players",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "96 kB",
          "estimated_rows": 54,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "gen_random_uuid()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{05bb40f8-d63f-4469-9a35-e466d1f2f1da,0bfd9afb-285d-474b-86cc-c91ab64c5622,0c2096c3-6eca-4582-b2a1-2166d2c8d61e,18ebd05e-2357-44c6-a49d-d280ceed7784,1db2da77-3c88-4bda-989b-349b4cab6604,22e64ff0-c283-47a4-a445-91f7f7194373,2711aec5-829a-4569-a85f-ecf8c89f123d,2806705a-9b9f-4437-b9bb-ca6489404484,2d7bd29f-85c0-4593-bdcf-eb2102445cfc,32f8ab9b-1259-4764-b463-aa2e70ca8c74,33443732-814b-4407-bbf0-8b30b57ef390,35905fe4-5532-4513-9f58-de3c28942e1a,3a712b45-cd7e-4e66-a6dd-133255be5895,489fd3c5-73e4-4be9-9058-3fcb04dcad5d,5200018e-14e6-46a0-8dff-2aa113ea6b8e,52128184-ee7e-44c6-8c65-31acee1b6843,56b37bdf-5f8b-4110-91b2-e55f6e83eb30,5c0e1219-9355-4078-b76d-a63ec320969c,5d401fa5-157f-445f-9f06-def9de2ae6ce,5e23dccd-8454-4c69-96a8-ec5b1d0ec54c,667be1e9-a840-4368-a40a-ed9e89dcf055,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,6e34ce3e-bbcd-4ba7-812e-32b0c39192fb,75e00430-067e-44af-b498-84b28edd51be,767cc150-1746-4d71-a8db-b9771f2f7770,78ba8339-270a-4d10-b7f6-f10999568948,813eac3e-b880-4988-823f-a345c5d6ed87,81c9ec8f-7b81-4263-879e-b2088aefaca8,8481aae6-f7e9-41b1-9a93-77a9fd8e800f,84c631df-a046-41e9-a10c-4a77561e6c08,876113b5-d7c3-41bc-ab69-4b6859f864a5,8ad90589-7135-461f-b61d-272cbf3f6d04,8af191dc-5e8f-4fe9-a5f0-97fe316b0004,8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd,904a7c17-c8cc-4aff-958d-7788dea001dc,9082191f-69ff-469f-baa6-46cc918346ae,a0a34603-1309-4c2c-9064-02e62cda7d41,a298edef-70b4-4805-95eb-f921c50c2838,a950fdd0-847e-4f4d-96f5-9064719c8953,b2466431-ede1-4eaa-a86e-ad0c7128b125,ba4d8e2a-5559-4cfe-a7a1-92e6d03efe65,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,be32d4f4-d8a2-4ac4-8fb2-21879753581c,be3517a2-68e2-4884-85f9-18eb16eebdd0,c465ed34-a5df-42ef-9332-3273a72f4c4d,c83d54c5-3468-4fde-b2b6-220034bb7480,d31a40f9-1972-43e9-9864-277110c9e958,d3920bbc-a281-4b97-bc88-96315e38d3ba,d909f3d1-18e3-4637-9ab4-bd05e81f87af,dd6651f8-9203-4efb-92ca-e2b6f8230f97,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca,e790c8d4-4068-4f9e-b34f-633e392c562e,ee7ff6aa-3a38-47e7-92b5-060342521a61,fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5}",
              "correlation": "0.137107"
            },
            {
              "name": "user_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.037037,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{1013107b-535e-45a9-9fc8-f54faa410585,a4c15f00-d500-4ae3-b9f2-b8808f7f737c}",
              "correlation": "-1"
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"Adrian P\",\"Alex E\",\"Anthony B\",\"Ben W\",Boyle,Callum,Calvin,Carlton,\"Chris F\",\"Chris H\",Colin,Craig,Daniel,Danion,\"Darren C\",\"Darren W\",Dave,Dilon,Dom,Ethan,Faz,\"Gaz G\",\"Jack G\",\"Jack M\",\"James H\",Joe,Johnny,Justin,Kaci,Ken,Kieran,Kyle,\"Lee M\",\"Lee S\",Lewis,Maddocks,Matty,\"Mike B\",\"Mike M\",Paul,Pete,\"Phil J\",\"Phil R\",\"Phil V\",\"Ryan J\",\"Ryan L\",Sam,\"Scott J\",Simon,Stephen,\"Tom Ip\",\"Tom K\",Twiggy,Zhao}",
              "correlation": "0.24879"
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.351852,
              "most_common_values": "{1,2,3,13,24,4,6,12,16,20,21,23}",
              "most_common_frequencies": "{0.277778,0.148148,0.0740741,0.0555556,0.0555556,0.037037,0.037037,0.037037,0.037037,0.037037,0.037037,0.037037}",
              "histogram_bounds": "{5,14,15,17,19,22,25}",
              "correlation": "0.243453"
            },
            {
              "name": "win_rate",
              "type": "numeric",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 5,
              "numeric_scale": 2,
              "n_distinct": 1,
              "most_common_values": "{0.00}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "active_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 1,
              "most_common_values": "{0}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "active_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 1,
              "most_common_values": "{0}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "timezone('utc'::text, now())",
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.148148,
              "most_common_values": "{\"2024-11-11 15:52:58.97872+00\"}",
              "most_common_frequencies": "{0.87037}",
              "histogram_bounds": "{\"2024-11-08 00:21:14.457969+00\",\"2024-11-11 15:46:24.694242+00\",\"2024-11-15 15:58:08.358688+00\",\"2024-11-15 15:59:47.248446+00\",\"2024-11-20 23:45:39.998846+00\",\"2024-12-05 15:12:14.368105+00\",\"2024-12-24 16:53:39.142845+00\"}",
              "correlation": "0.78624"
            },
            {
              "name": "is_admin",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{f}",
              "most_common_frequencies": "{0.981481}",
              "histogram_bounds": null,
              "correlation": "0.978959"
            },
            {
              "name": "is_super_admin",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{f}",
              "most_common_frequencies": "{0.981481}",
              "histogram_bounds": null,
              "correlation": "0.978959"
            },
            {
              "name": "avatar_svg",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0185185,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_options",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0185185,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.185185,
              "most_common_values": "{0,6.0000000000000000,7.0000000000000000,5.0000000000000000,1.00000000000000000000}",
              "most_common_frequencies": "{0.574074,0.111111,0.111111,0.0740741,0.037037}",
              "histogram_bounds": "{2.0000000000000000,3.0000000000000000,8.0000000000000000,9.0000000000000000,9.5000000000000000}",
              "correlation": "0.553116"
            },
            {
              "name": "defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.166667,
              "most_common_values": "{0,4.0000000000000000,7.0000000000000000,5.0000000000000000,6.0000000000000000,8.0000000000000000}",
              "most_common_frequencies": "{0.574074,0.0925926,0.0925926,0.0740741,0.0555556,0.0555556}",
              "histogram_bounds": "{1.00000000000000000000,6.5000000000000000,9.0000000000000000}",
              "correlation": "0.501658"
            },
            {
              "name": "is_test_user",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 15,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{t}",
              "most_common_frequencies": "{0.981481}",
              "histogram_bounds": null,
              "correlation": "0.964551"
            },
            {
              "name": "manual_caps_override",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 16,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{f}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "current_streak",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 17,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.148148,
              "most_common_values": "{0,2,3,1,4}",
              "most_common_frequencies": "{0.666667,0.0925926,0.0740741,0.0555556,0.0555556}",
              "histogram_bounds": "{7,8,12}",
              "correlation": "0.57187"
            },
            {
              "name": "max_streak",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 18,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.259259,
              "most_common_values": "{1,2,3,4,5,6,11,8,12,13}",
              "most_common_frequencies": "{0.462963,0.0740741,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.037037,0.037037,0.037037}",
              "histogram_bounds": "{7,9,10,16}",
              "correlation": "0.37854"
            },
            {
              "name": "average_attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 19,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 4,
              "numeric_scale": 2,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "average_defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 20,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 4,
              "numeric_scale": 2,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "players_friendly_name_test_unique",
              "type": "UNIQUE",
              "column": "friendly_name",
              "foreign_table": "players",
              "foreign_column": "friendly_name",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_friendly_name_test_unique",
              "type": "UNIQUE",
              "column": "friendly_name",
              "foreign_table": "players",
              "foreign_column": "is_test_user",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_friendly_name_test_unique",
              "type": "UNIQUE",
              "column": "is_test_user",
              "foreign_table": "players",
              "foreign_column": "friendly_name",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_friendly_name_test_unique",
              "type": "UNIQUE",
              "column": "is_test_user",
              "foreign_table": "players",
              "foreign_column": "is_test_user",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_user_id_fkey",
              "type": "FOREIGN KEY",
              "column": "user_id",
              "foreign_table": "users",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "valid_win_rate",
              "type": "CHECK",
              "column": null,
              "foreign_table": "players",
              "foreign_column": "win_rate",
              "check_definition": "CHECK (((win_rate >= (0)::numeric) AND (win_rate <= (100)::numeric)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127223_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127223_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "players_friendly_name_test_unique",
              "definition": "CREATE UNIQUE INDEX players_friendly_name_test_unique ON public.players USING btree (friendly_name, is_test_user)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "100 0",
              "opclass": "3126 10003",
              "storage_parameters": null
            },
            {
              "name": "players_pkey",
              "definition": "CREATE UNIQUE INDEX players_pkey ON public.players USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "players_friendly_name_idx",
              "definition": "CREATE INDEX players_friendly_name_idx ON public.players USING btree (friendly_name)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "100",
              "opclass": "3126",
              "storage_parameters": null
            },
            {
              "name": "players_user_id_idx",
              "definition": "CREATE INDEX players_user_id_idx ON public.players USING btree (user_id)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Allow trigger function to update player ratings",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "true",
              "with_check": "true"
            },
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable registration",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "true"
            },
            {
              "name": "Enable update for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.role() = 'authenticated'::text)",
              "with_check": "(auth.role() = 'authenticated'::text)"
            },
            {
              "name": "Super admins can delete players",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "DELETE",
              "definition": "(EXISTS ( SELECT 1\n   FROM players p\n  WHERE ((p.user_id = auth.uid()) AND (p.is_super_admin = true))))",
              "with_check": null
            },
            {
              "name": "Super admins can update any player",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(EXISTS ( SELECT 1\n   FROM players players_1\n  WHERE ((players_1.id = auth.uid()) AND (players_1.is_super_admin = true))))",
              "with_check": null
            },
            {
              "name": "Users can create their own player profile",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.uid() = user_id)"
            },
            {
              "name": "Users can update their own profile",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() = id)",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "slot_offers",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "72 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "status",
              "type": "USER-DEFINED",
              "nullable": "NO",
              "default": "'pending'::slot_offer_status",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "offered_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "responded_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "expires_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "available_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "rank",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "accepted_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "declined_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "slot_offers_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "slot_offers",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "slot_offers",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "slot_offers",
              "foreign_column": "status",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "slot_offers",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "slot_offers",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "slot_offers",
              "foreign_column": "status",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "status",
              "foreign_table": "slot_offers",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "status",
              "foreign_table": "slot_offers",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "status",
              "foreign_table": "slot_offers",
              "foreign_column": "status",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "slot_offers",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "2200_127245_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_5_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_7_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_8_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "slot_offer_response_trigger",
              "timing": "BEFORE",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION handle_slot_offer_response()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "definition": "CREATE UNIQUE INDEX slot_offers_game_id_player_id_status_key ON public.slot_offers USING btree (game_id, player_id, status)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0 0",
              "opclass": "10065 10065 10069",
              "storage_parameters": null
            },
            {
              "name": "slot_offers_pkey",
              "definition": "CREATE UNIQUE INDEX slot_offers_pkey ON public.slot_offers USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "idx_slot_offers_game_player",
              "definition": "CREATE INDEX idx_slot_offers_game_player ON public.slot_offers USING btree (game_id, player_id)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0",
              "opclass": "10065 10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can manage slot offers",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "ALL",
              "definition": "(EXISTS ( SELECT 1\n   FROM ((admin_permissions ap\n     JOIN admin_roles ar ON ((ap.admin_role_id = ar.id)))\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text))))",
              "with_check": "(EXISTS ( SELECT 1\n   FROM ((admin_permissions ap\n     JOIN admin_roles ar ON ((ap.admin_role_id = ar.id)))\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text))))"
            },
            {
              "name": "Players can update their own slot offers",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "(player_id IN ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid())))",
              "with_check": "(player_id IN ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid())))"
            },
            {
              "name": "Players can view their own slot offers",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "(player_id IN ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid())))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "venue_presets",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "32 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "venue_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "name",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "day_of_week",
              "type": "USER-DEFINED",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "start_time",
              "type": "time without time zone",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "registration_hours_before",
              "type": "integer",
              "nullable": "NO",
              "default": "48",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "registration_hours_until",
              "type": "integer",
              "nullable": "NO",
              "default": "1",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "pitch_cost",
              "type": "numeric",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 10,
              "numeric_scale": 2,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "team_announcement_hours",
              "type": "integer",
              "nullable": "NO",
              "default": "4",
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "venue_presets_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "venue_presets",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "venue_presets_venue_id_fkey",
              "type": "FOREIGN KEY",
              "column": "venue_id",
              "foreign_table": "venues",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "2200_127254_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_5_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_6_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_7_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_11_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "venue_presets_pkey",
              "definition": "CREATE UNIQUE INDEX venue_presets_pkey ON public.venue_presets USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Allow admin write access",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "ALL",
              "definition": "(EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.user_id = auth.uid()) AND (players.is_admin = true))))",
              "with_check": null
            },
            {
              "name": "Allow public read access",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "venues",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "32 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "name",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "address",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "is_default",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "google_maps_url",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "venues_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "venues",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127266_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127266_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127266_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "venues_pkey",
              "definition": "CREATE UNIQUE INDEX venues_pkey ON public.venues USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": null
        },
        {
          "table_name": "xp_comparison",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "current_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "game_sequences",
              "type": "ARRAY",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "database_xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "frontend_caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "frontend_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "frontend_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "frontend_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        }
      ],
      "enums": [
        {
          "name": "admin_permission",
          "values": [
            "manage_games",
            "manage_players",
            "manage_teams",
            "manage_payments",
            "manage_admins",
            "manage_history"
          ],
          "description": null
        },
        {
          "name": "day_of_week",
          "values": [
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday"
          ],
          "description": null
        },
        {
          "name": "game_status",
          "values": [
            "open",
            "upcoming",
            "players_announced",
            "teams_announced",
            "completed"
          ],
          "description": null
        },
        {
          "name": "notification_type",
          "values": [
            "slot_offer",
            "admin_slot_offer",
            "game_update",
            "system_message",
            "payment_request",
            "game_reminder",
            "team_selection"
          ],
          "description": "Types of notifications that can be sent to users"
        },
        {
          "name": "slot_offer_status",
          "values": [
            "pending",
            "accepted",
            "declined",
            "expired",
            "voided"
          ],
          "description": null
        }
      ],
      "sequences": [
        {
          "name": "debug_logs_id_seq",
          "type": "bigint",
          "start": "1",
          "min": "1",
          "max": "9223372036854775807",
          "increment": "1",
          "cycle": "NO"
        }
      ],
      "functions": [
        {
          "name": "update_all_player_xp",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_all_player_xp()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_player record;\r\nBEGIN\r\n    FOR v_player IN SELECT id FROM players LOOP\r\n        PERFORM calculate_player_xp(v_player.id);\r\n    END LOOP;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_game_registration_xp",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_game_registration_xp()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN\r\n        PERFORM calculate_player_xp(NEW.player_id);\r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_xp",
          "arguments": "p_player_id uuid, p_latest_sequence integer DEFAULT NULL::integer",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_xp(p_player_id uuid, p_latest_sequence integer DEFAULT NULL::integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_caps integer;\r\n    v_active_bonuses integer;\r\n    v_active_penalties integer;\r\n    v_current_streak integer;\r\n    v_base_xp integer := 0;\r\n    v_latest_game_sequence integer;\r\n    v_game_sequences integer[];\r\n    v_final_xp integer;\r\n    v_streak_multiplier numeric;\r\nBEGIN\r\n    -- Get player stats\r\n    SELECT \r\n        COALESCE(p.caps, 0),\r\n        COALESCE(p.active_bonuses, 0),\r\n        COALESCE(p.active_penalties, 0),\r\n        COALESCE(p.current_streak, 0)\r\n    INTO \r\n        v_caps,\r\n        v_active_bonuses,\r\n        v_active_penalties,\r\n        v_current_streak\r\n    FROM players p\r\n    WHERE p.id = p_player_id;\r\n\r\n    -- Get latest game sequence if not provided\r\n    IF p_latest_sequence IS NULL THEN\r\n        SELECT MAX(sequence_number)\r\n        INTO v_latest_game_sequence\r\n        FROM games\r\n        WHERE completed = true;\r\n    ELSE\r\n        v_latest_game_sequence := p_latest_sequence;\r\n    END IF;\r\n\r\n    -- Get player's game sequences\r\n    WITH player_games AS (\r\n        SELECT g.sequence_number\r\n        FROM games g\r\n        JOIN game_registrations gr ON g.id = gr.game_id\r\n        WHERE gr.player_id = p_player_id\r\n        AND g.completed = true\r\n        AND g.sequence_number <= v_latest_game_sequence\r\n        ORDER BY g.sequence_number DESC\r\n    )\r\n    SELECT array_agg(sequence_number ORDER BY sequence_number DESC)\r\n    INTO v_game_sequences\r\n    FROM player_games;\r\n\r\n    -- Calculate weighted base XP\r\n    WITH RECURSIVE game_categories AS (\r\n        SELECT \r\n            SUM(CASE \r\n                WHEN sequence_number = v_latest_game_sequence THEN 20  -- Current game (0 games ago)\r\n                WHEN v_latest_game_sequence - sequence_number <= 2 THEN 18  -- Games 2-3 ago\r\n                WHEN v_latest_game_sequence - sequence_number <= 4 THEN 16  -- Games 4-5 ago\r\n                WHEN v_latest_game_sequence - sequence_number <= 9 THEN 14  -- Games 6-10 ago\r\n                WHEN v_latest_game_sequence - sequence_number <= 19 THEN 12 -- Games 11-20 ago\r\n                ELSE 10  -- Games 20+ ago\r\n            END) as category_xp\r\n        FROM unnest(v_game_sequences) AS sequence_number\r\n    )\r\n    SELECT COALESCE(category_xp, 0)\r\n    INTO v_base_xp\r\n    FROM game_categories;\r\n\r\n    -- Calculate streak multiplier (10% bonus per streak level)\r\n    v_streak_multiplier := GREATEST(1, 1 + (v_current_streak * 0.1));\r\n\r\n    -- Calculate final XP with streak multiplier\r\n    v_final_xp := GREATEST(0, round(v_base_xp * v_streak_multiplier));\r\n\r\n    -- Update the player_xp table\r\n    INSERT INTO player_xp (player_id, xp, last_calculated)\r\n    VALUES (p_player_id, v_final_xp, now())\r\n    ON CONFLICT (player_id) \r\n    DO UPDATE SET \r\n        xp = EXCLUDED.xp,\r\n        last_calculated = EXCLUDED.last_calculated;\r\n\r\n    RETURN v_final_xp;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_acceptance",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_acceptance()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    IF NEW.status = 'accepted' AND OLD.status != 'accepted' THEN\r\n        -- Update the game registration status\r\n        UPDATE game_registrations\r\n        SET \r\n            status = 'selected',\r\n            selection_method = 'slot_offer'  -- Using the correct allowed value\r\n        WHERE game_id = NEW.game_id\r\n        AND player_id = NEW.player_id;\r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "maintenance_cleanup_debug_logs",
          "arguments": "p_hours_to_retain integer DEFAULT 24",
          "return_type": "jsonb",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.maintenance_cleanup_debug_logs(p_hours_to_retain integer DEFAULT 24)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_deleted_count integer;\r\n    v_result jsonb;\r\nBEGIN\r\n    -- Delete logs older than specified hours and get count of deleted rows\r\n    WITH deleted AS (\r\n        DELETE FROM debug_logs \r\n        WHERE timestamp < NOW() - (p_hours_to_retain || ' hours')::interval\r\n        RETURNING *\r\n    )\r\n    SELECT COUNT(*) INTO v_deleted_count FROM deleted;\r\n\r\n    -- Create result object\r\n    v_result := jsonb_build_object(\r\n        'deleted_count', v_deleted_count,\r\n        'cleanup_time', NOW()::text,\r\n        'retention_hours', p_hours_to_retain,\r\n        'remaining_logs', (SELECT COUNT(*) FROM debug_logs)\r\n    );\r\n\r\n    -- Log the cleanup operation itself\r\n    INSERT INTO debug_logs (\r\n        event_type,\r\n        message,\r\n        details\r\n    ) VALUES (\r\n        'maintenance',\r\n        'Cleaned up old debug logs',\r\n        v_result\r\n    );\r\n\r\n    RETURN v_result;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_game_registration_status",
          "arguments": "p_registration_id uuid, p_old_status text, p_new_status text",
          "return_type": "boolean",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_game_registration_status(p_registration_id uuid, p_old_status text, p_new_status text)\n RETURNS boolean\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  v_updated boolean;\r\nBEGIN\r\n  -- Update the registration status only if it matches the old status\r\n  UPDATE game_registrations\r\n  SET status = p_new_status,\r\n      updated_at = NOW()\r\n  WHERE id = p_registration_id\r\n    AND status = p_old_status;\r\n\r\n  -- Check if a row was updated\r\n  GET DIAGNOSTICS v_updated = ROW_COUNT;\r\n  \r\n  -- Return true if a row was updated, false otherwise\r\n  RETURN v_updated > 0;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response",
          "arguments": "p_offer_id uuid, p_status slot_offer_status",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response(p_offer_id uuid, p_status slot_offer_status)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_game_id UUID;\r\n  v_player_id UUID;\r\n  v_game_date TIMESTAMP WITH TIME ZONE;\r\n  v_game_number INTEGER;\r\n  v_hours_until_game NUMERIC;\r\n  v_next_players UUID[];\r\n  v_current_selected_players JSONB;\r\nBEGIN\r\n  -- Get the offer details\r\n  SELECT \r\n    game_id,\r\n    player_id,\r\n    g.date,\r\n    COUNT(g2.*) + 1,\r\n    EXTRACT(EPOCH FROM (g.date - NOW())) / 3600 \r\n    INTO v_game_id, v_player_id, v_game_date, v_game_number, v_hours_until_game\r\n  FROM slot_offers so\r\n  JOIN games g ON g.id = so.game_id\r\n  LEFT JOIN games g2 ON g2.date < g.date OR (g2.date = g.date AND g2.id < g.id)\r\n  WHERE so.id = p_offer_id\r\n  GROUP BY so.game_id, so.player_id, g.date;\r\n\r\n  IF p_status = 'accepted' THEN\r\n    -- Get current selected players from game_selections\r\n    SELECT COALESCE(selected_players, '[]'::jsonb)\r\n    INTO v_current_selected_players\r\n    FROM game_selections\r\n    WHERE game_id = v_game_id;\r\n\r\n    -- If no game_selections entry exists, create one\r\n    IF NOT FOUND THEN\r\n      INSERT INTO game_selections (game_id, selected_players)\r\n      VALUES (v_game_id, '[]'::jsonb)\r\n      RETURNING selected_players INTO v_current_selected_players;\r\n    END IF;\r\n\r\n    -- Add the new player to selected_players if not already present\r\n    IF NOT v_current_selected_players ? v_player_id::text THEN\r\n      UPDATE game_selections\r\n      SET selected_players = (\r\n        SELECT jsonb_agg(value)\r\n        FROM (\r\n          SELECT * FROM jsonb_array_elements(v_current_selected_players)\r\n          UNION ALL\r\n          SELECT to_jsonb(v_player_id::text)\r\n        ) t\r\n      )\r\n      WHERE game_id = v_game_id;\r\n    END IF;\r\n\r\n    -- Update game registration status\r\n    UPDATE game_registrations\r\n    SET status = 'selected'\r\n    WHERE game_id = v_game_id AND player_id = v_player_id;\r\n\r\n    -- Update other pending offers to voided\r\n    UPDATE slot_offers\r\n    SET \r\n      status = 'voided',\r\n      responded_at = NOW()\r\n    WHERE \r\n      game_id = v_game_id \r\n      AND id != p_offer_id \r\n      AND status = 'pending';\r\n\r\n  ELSIF p_status = 'declined' THEN\r\n    -- Get next eligible players\r\n    SELECT ARRAY(\r\n      SELECT player_id \r\n      FROM get_next_slot_offer_players(v_game_id, v_hours_until_game)\r\n      LIMIT 1\r\n    ) INTO v_next_players;\r\n\r\n    -- Create new offers for next eligible players\r\n    IF array_length(v_next_players, 1) > 0 THEN\r\n      INSERT INTO slot_offers (\r\n        game_id,\r\n        player_id,\r\n        status,\r\n        offered_at,\r\n        expires_at,\r\n        available_at\r\n      )\r\n      SELECT \r\n        v_game_id,\r\n        player_id,\r\n        'pending'::slot_offer_status,\r\n        NOW(),\r\n        NOW() + INTERVAL '1 hour',\r\n        NOW()\r\n      FROM unnest(v_next_players) AS player_id;\r\n    END IF;\r\n  END IF;\r\n\r\n  -- Update the slot offer status\r\n  UPDATE slot_offers\r\n  SET \r\n    status = p_status,\r\n    responded_at = NOW(),\r\n    accepted_at = CASE WHEN p_status = 'accepted' THEN NOW() ELSE NULL END,\r\n    declined_at = CASE WHEN p_status = 'declined' THEN NOW() ELSE NULL END\r\n  WHERE id = p_offer_id;\r\n\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_slot_offers_for_game",
          "arguments": "p_game_id uuid, p_admin_id uuid, p_dropped_out_player_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_slot_offers_for_game(p_game_id uuid, p_admin_id uuid, p_dropped_out_player_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_highest_xp_player record;\r\n    v_slot_offer_id UUID;\r\n    v_game_date timestamp with time zone;\r\n    v_total_time interval;\r\n    v_player_count integer;\r\n    v_interval interval;\r\n    v_existing_offer record;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT * INTO v_game FROM games WHERE id = p_game_id;\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Game not found';\r\n    END IF;\r\n\r\n    -- Check if there's already a pending offer\r\n    SELECT * INTO v_existing_offer \r\n    FROM slot_offers \r\n    WHERE game_id = p_game_id \r\n    AND status = 'pending';\r\n    \r\n    IF FOUND THEN\r\n        RAISE LOG 'There is already a pending offer for game %', p_game_id;\r\n        RETURN;\r\n    END IF;\r\n\r\n    -- Get highest XP reserve player who hasn't declined an offer\r\n    WITH PlayerXP AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            p.friendly_name,\r\n            ps.xp as player_xp,\r\n            ROW_NUMBER() OVER (ORDER BY ps.xp DESC) as rank\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN player_stats ps ON ps.id = p.id\r\n        LEFT JOIN slot_offers so ON so.player_id = p.id \r\n            AND so.game_id = p_game_id \r\n            AND so.status = 'declined'\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n        AND so.id IS NULL\r\n    )\r\n    SELECT * INTO v_highest_xp_player\r\n    FROM PlayerXP\r\n    WHERE rank = 1;\r\n\r\n    IF v_highest_xp_player IS NULL THEN\r\n        RAISE LOG 'No eligible reserve players found for game %', p_game_id;\r\n        RETURN;\r\n    END IF;\r\n\r\n    -- Calculate time intervals for offer expiration\r\n    SELECT COUNT(*) INTO v_player_count\r\n    FROM game_registrations\r\n    WHERE game_id = p_game_id\r\n    AND status = 'reserve';\r\n\r\n    v_game_date := date_trunc('day', v_game.date) + interval '1 minute';\r\n    v_total_time := v_game_date - CURRENT_TIMESTAMP;\r\n    v_interval := v_total_time / (v_player_count + 1);\r\n\r\n    -- Create slot offer\r\n    INSERT INTO slot_offers (\r\n        game_id,\r\n        player_id,\r\n        status,\r\n        rank,\r\n        available_at,\r\n        expires_at\r\n    ) VALUES (\r\n        p_game_id,\r\n        v_highest_xp_player.player_id,\r\n        'pending',\r\n        1,\r\n        CURRENT_TIMESTAMP,\r\n        CURRENT_TIMESTAMP + v_interval\r\n    ) RETURNING id INTO v_slot_offer_id;\r\n\r\n    -- Create notification for the eligible player\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    ) VALUES (\r\n        v_highest_xp_player.player_id,\r\n        'slot_offer',\r\n        format('A spot has opened up in a game on %s. You have exclusive access until %s!',\r\n               to_char(v_game.date, 'DD/MM/YYYY'),\r\n               to_char(CURRENT_TIMESTAMP + v_interval, 'HH24:MI')),\r\n        jsonb_build_object(\r\n            'game_id', p_game_id,\r\n            'slot_offer_id', v_slot_offer_id,\r\n            'exclusive_until', CURRENT_TIMESTAMP + v_interval\r\n        ),\r\n        'Exclusive Game Slot Available!',\r\n        2\r\n    );\r\n\r\n    -- Create admin notification\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    )\r\n    SELECT \r\n        p.id,\r\n        'system_announcement',\r\n        format('Created slot offer for %s (highest XP reserve player) for game on %s',\r\n               v_highest_xp_player.friendly_name,\r\n               to_char(v_game.date, 'DD/MM/YYYY')),\r\n        jsonb_build_object(\r\n            'game_id', p_game_id,\r\n            'action', 'slot_offers_created'\r\n        ),\r\n        'Slot Offer Created',\r\n        1\r\n    FROM players p\r\n    WHERE p.is_admin = true;\r\n\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_selected_count integer;\r\n    v_dropped_count integer;\r\n    v_active_selected integer;\r\nBEGIN\r\n    -- Only handle status changes\r\n    IF NEW.status = OLD.status THEN\r\n        RETURN NEW;\r\n    END IF;\r\n\r\n    -- Log the start of processing\r\n    INSERT INTO debug_logs (event_type, message, details)\r\n    VALUES (\r\n        'slot_offer_response',\r\n        'Processing slot offer response',\r\n        jsonb_build_object(\r\n            'old_status', OLD.status,\r\n            'new_status', NEW.status,\r\n            'game_id', NEW.game_id,\r\n            'player_id', NEW.player_id\r\n        )\r\n    );\r\n\r\n    -- Get current counts and game date\r\n    SELECT \r\n        g.*,\r\n        COUNT(*) FILTER (WHERE gr.status = 'selected') as selected_count,\r\n        COUNT(*) FILTER (WHERE gr.status = 'dropped_out') as dropped_count\r\n    INTO v_game\r\n    FROM games g\r\n    LEFT JOIN game_registrations gr ON gr.game_id = g.id\r\n    WHERE g.id = NEW.game_id\r\n    GROUP BY g.id;\r\n\r\n    -- Calculate active selected players\r\n    v_active_selected := v_game.selected_count - v_game.dropped_count;\r\n\r\n    -- Log game stats\r\n    INSERT INTO debug_logs (event_type, message, details)\r\n    VALUES (\r\n        'game_stats',\r\n        'Game statistics',\r\n        jsonb_build_object(\r\n            'game_id', NEW.game_id,\r\n            'max_players', v_game.max_players,\r\n            'selected_count', v_game.selected_count,\r\n            'dropped_count', v_game.dropped_count,\r\n            'active_selected', v_active_selected\r\n        )\r\n    );\r\n\r\n    -- Update timestamps based on status\r\n    IF NEW.status = 'accepted' THEN\r\n        NEW.responded_at := NOW();\r\n        NEW.accepted_at := NOW();\r\n    ELSIF NEW.status IN ('declined', 'expired', 'voided') THEN\r\n        NEW.responded_at := NOW();\r\n        NEW.declined_at := CASE WHEN NEW.status = 'declined' THEN NOW() ELSE NULL END;\r\n    END IF;\r\n\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_game_sequences",
          "arguments": "",
          "return_type": "TABLE(player_id uuid, game_sequences bigint[])",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_game_sequences()\n RETURNS TABLE(player_id uuid, game_sequences bigint[])\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  WITH game_numbers AS (\r\n    SELECT \r\n      gr.player_id,\r\n      g.id as game_id,\r\n      ROW_NUMBER() OVER (PARTITION BY gr.player_id ORDER BY g.date DESC) as game_sequence\r\n    FROM game_registrations gr\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE gr.status = 'selected'\r\n  )\r\n  SELECT \r\n    gn.player_id,\r\n    ARRAY_AGG(gn.game_sequence ORDER BY gn.game_sequence) as game_sequences\r\n  FROM game_numbers gn\r\n  GROUP BY gn.player_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "balance_teams",
          "arguments": "game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.balance_teams(game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    total_players INTEGER;\r\n    team_size INTEGER;\r\n    player_record RECORD;\r\n    best_difference DECIMAL := 999999;\r\n    current_attempt INTEGER := 0;\r\n    max_attempts INTEGER := 1000;\r\n    best_team_assignments JSONB;\r\n    current_blue_team UUID[];\r\n    current_orange_team UUID[];\r\n    difference DECIMAL;\r\nBEGIN\r\n    -- Get the total number of selected players for this game\r\n    SELECT COUNT(*) INTO total_players\r\n    FROM game_selections\r\n    WHERE game_id = $1 AND status = 'selected';\r\n\r\n    -- Calculate team size (rounded down for even teams)\r\n    team_size := total_players / 2;\r\n\r\n    -- Create temporary table for player ratings\r\n    CREATE TEMP TABLE temp_player_ratings AS\r\n    SELECT \r\n        gs.player_id,\r\n        COALESCE(AVG(pr.attack_rating), 5) as avg_attack,\r\n        COALESCE(AVG(pr.defense_rating), 5) as avg_defense,\r\n        COALESCE(\r\n            (SELECT CAST(COUNT(CASE WHEN g.outcome = 'Blue Win' AND gs2.team = 'Blue' \r\n                                  OR g.outcome = 'Orange Win' AND gs2.team = 'Orange' \r\n                             THEN 1 END) AS DECIMAL) / \r\n                    NULLIF(COUNT(*), 0)\r\n             FROM game_selections gs2\r\n             JOIN games g ON g.id = gs2.game_id\r\n             WHERE gs2.player_id = gs.player_id\r\n               AND g.outcome IS NOT NULL\r\n            ), 0.5\r\n        ) as win_rate\r\n    FROM game_selections gs\r\n    LEFT JOIN player_ratings pr ON pr.rated_player_id = gs.player_id\r\n    WHERE gs.game_id = $1 AND gs.status = 'selected'\r\n    GROUP BY gs.player_id;\r\n\r\n    -- Try different combinations\r\n    WHILE current_attempt < max_attempts LOOP\r\n        -- Get random team assignments\r\n        WITH shuffled_players AS (\r\n            SELECT \r\n                player_id,\r\n                avg_attack,\r\n                avg_defense,\r\n                win_rate,\r\n                ROW_NUMBER() OVER (ORDER BY random()) as rn\r\n            FROM temp_player_ratings\r\n        )\r\n        SELECT \r\n            array_agg(CASE WHEN rn <= team_size THEN player_id END) FILTER (WHERE rn <= team_size),\r\n            array_agg(CASE WHEN rn > team_size THEN player_id END) FILTER (WHERE rn > team_size)\r\n        INTO current_blue_team, current_orange_team\r\n        FROM shuffled_players;\r\n\r\n        -- Calculate team stats\r\n        WITH team_stats AS (\r\n            SELECT \r\n                'Blue' as team,\r\n                AVG(avg_attack) as team_attack,\r\n                AVG(avg_defense) as team_defense,\r\n                AVG(win_rate) as team_win_rate\r\n            FROM temp_player_ratings\r\n            WHERE player_id = ANY(current_blue_team)\r\n            UNION ALL\r\n            SELECT \r\n                'Orange' as team,\r\n                AVG(avg_attack) as team_attack,\r\n                AVG(avg_defense) as team_defense,\r\n                AVG(win_rate) as team_win_rate\r\n            FROM temp_player_ratings\r\n            WHERE player_id = ANY(current_orange_team)\r\n        )\r\n        SELECT \r\n            ABS(MAX(CASE WHEN team = 'Blue' THEN team_attack END) - \r\n                MAX(CASE WHEN team = 'Orange' THEN team_attack END)) +\r\n            ABS(MAX(CASE WHEN team = 'Blue' THEN team_defense END) - \r\n                MAX(CASE WHEN team = 'Orange' THEN team_defense END)) +\r\n            ABS(MAX(CASE WHEN team = 'Blue' THEN team_win_rate END) - \r\n                MAX(CASE WHEN team = 'Orange' THEN team_win_rate END))\r\n        INTO difference\r\n        FROM team_stats;\r\n\r\n        -- Update best teams if current difference is lower\r\n        IF difference < best_difference THEN\r\n            best_difference := difference;\r\n            best_team_assignments := jsonb_build_object(\r\n                'blue', current_blue_team,\r\n                'orange', current_orange_team,\r\n                'difference', difference\r\n            );\r\n        END IF;\r\n\r\n        current_attempt := current_attempt + 1;\r\n    END LOOP;\r\n\r\n    -- Update game_selections with the best team assignments\r\n    UPDATE game_selections\r\n    SET team = 'Blue'\r\n    WHERE game_id = $1 \r\n    AND player_id = ANY((best_team_assignments->>'blue')::uuid[]);\r\n\r\n    UPDATE game_selections\r\n    SET team = 'Orange'\r\n    WHERE game_id = $1 \r\n    AND player_id = ANY((best_team_assignments->>'orange')::uuid[]);\r\n\r\n    -- Clean up\r\n    DROP TABLE temp_player_ratings;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "add_admin_role",
          "arguments": "p_player_id uuid, p_permissions text[]",
          "return_type": "uuid",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.add_admin_role(p_player_id uuid, p_permissions text[])\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_role_id UUID;\r\nBEGIN\r\n    -- Insert or get admin role\r\n    INSERT INTO admin_roles (player_id)\r\n    VALUES (p_player_id)\r\n    ON CONFLICT (player_id) DO UPDATE\r\n    SET updated_at = NOW()\r\n    RETURNING id INTO v_role_id;\r\n\r\n    -- Add permissions\r\n    INSERT INTO admin_permissions (admin_role_id, permission)\r\n    SELECT v_role_id, unnest(p_permissions)\r\n    ON CONFLICT (admin_role_id, permission) DO NOTHING;\r\n\r\n    RETURN v_role_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_xp",
          "arguments": "p_caps integer, p_active_bonuses integer, p_active_penalties integer, p_current_streak integer",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_xp(p_caps integer, p_active_bonuses integer, p_active_penalties integer, p_current_streak integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_bonus_modifier integer;\r\n    v_penalty_modifier integer;\r\n    v_streak_modifier integer;\r\n    v_base_modifier integer;\r\nBEGIN\r\n    -- Match the TypeScript calculation\r\n    v_bonus_modifier := p_active_bonuses * 1;\r\n    v_penalty_modifier := p_active_penalties * 1;\r\n    v_streak_modifier := p_current_streak * 1;\r\n    v_base_modifier := 10 + v_bonus_modifier - v_penalty_modifier + v_streak_modifier;\r\n    \r\n    -- Return calculated XP (rounded to nearest integer)\r\n    RETURN round(p_caps * GREATEST(v_base_modifier, 1));\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_streaks",
          "arguments": "player_id uuid",
          "return_type": "TABLE(current_streak integer, max_streak integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_streaks(player_id uuid)\n RETURNS TABLE(current_streak integer, max_streak integer)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  WITH consecutive_games AS (\r\n    SELECT \r\n      g.date::date,\r\n      g.is_historical,\r\n      gr.status,\r\n      g.sequence_number,\r\n      CASE \r\n        WHEN gr.status = 'selected' THEN 0\r\n        ELSE 1\r\n      END as streak_break,\r\n      SUM(CASE \r\n        WHEN gr.status = 'selected' THEN 0\r\n        ELSE 1\r\n      END) OVER (ORDER BY g.sequence_number) as streak_group\r\n    FROM games g\r\n    LEFT JOIN game_registrations gr \r\n      ON gr.game_id = g.id \r\n      AND gr.player_id = calculate_player_streaks.player_id\r\n    WHERE g.status = 'completed'\r\n    ORDER BY g.sequence_number DESC\r\n  ),\r\n  streak_lengths AS (\r\n    SELECT \r\n      streak_group,\r\n      (COUNT(*)::integer - SUM(streak_break)::integer)::integer as streak_length,\r\n      ROW_NUMBER() OVER (ORDER BY MIN(sequence_number) DESC) as group_order\r\n    FROM consecutive_games\r\n    GROUP BY streak_group\r\n    HAVING (COUNT(*)::integer - SUM(streak_break)::integer) > 0\r\n  )\r\n  SELECT \r\n    COALESCE((\r\n      SELECT streak_length::integer \r\n      FROM streak_lengths \r\n      WHERE group_order = 1\r\n    ), 0)::integer as current_streak,\r\n    COALESCE((\r\n      SELECT MAX(streak_length)::integer \r\n      FROM streak_lengths\r\n    ), 0)::integer as max_streak;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_caps",
          "arguments": "player_id uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_caps(player_id uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    caps_count INTEGER;\r\nBEGIN\r\n    SELECT COUNT(DISTINCT gr.game_id)\r\n    INTO caps_count\r\n    FROM game_registrations gr\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE gr.player_id = calculate_player_caps.player_id\r\n    AND gr.team IS NOT NULL; -- Only count actual players, not reserves\r\n\r\n    RETURN caps_count;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "check_rating_eligibility",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.check_rating_eligibility()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    IF check_games_played_together(NEW.rater_id, NEW.rated_player_id) < 5 THEN\r\n        RAISE EXCEPTION 'Players must have played at least 5 games together before rating';\r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_game_years",
          "arguments": "",
          "return_type": "TABLE(year integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_game_years()\n RETURNS TABLE(year integer)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\n#variable_conflict use_column\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT DISTINCT \r\n    date_part('year', created_at)::integer as year\r\n  FROM games\r\n  WHERE created_at IS NOT NULL\r\n  ORDER BY year DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "check_games_played_together",
          "arguments": "player1_id uuid, player2_id uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.check_games_played_together(player1_id uuid, player2_id uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    games_count INTEGER;\r\nBEGIN\r\n    SELECT COUNT(*) INTO games_count\r\n    FROM game_selections gs1\r\n    JOIN game_selections gs2 ON gs1.game_id = gs2.game_id\r\n    WHERE gs1.player_id = player1_id \r\n    AND gs2.player_id = player2_id\r\n    AND gs1.game_id IN (\r\n        SELECT id FROM games WHERE completed = true\r\n    );\r\n    RETURN games_count;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "check_game_completion_status",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.check_game_completion_status()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- Check if game is more than 1 hour past kickoff and still in teams_announced status\r\n  IF NEW.status = 'teams_announced' AND \r\n     NEW.date < (NOW() - INTERVAL '1 hour') THEN\r\n    NEW.status := 'pending_completion';\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "check_game_registration_permissions",
          "arguments": "p_game_id uuid, p_player_id uuid",
          "return_type": "boolean",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.check_game_registration_permissions(p_game_id uuid, p_player_id uuid)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_is_admin boolean;\r\n    v_is_owner boolean;\r\nBEGIN\r\n    -- Check if the current user is an admin\r\n    SELECT is_admin INTO v_is_admin\r\n    FROM players\r\n    WHERE id = auth.uid();\r\n\r\n    -- Check if the current user owns this registration\r\n    SELECT (auth.uid() = p_player_id) INTO v_is_owner;\r\n\r\n    -- Return true if user is admin or owns the registration\r\n    RETURN v_is_admin OR v_is_owner;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_new_game",
          "arguments": "p_date timestamp with time zone, p_registration_window_start timestamp with time zone, p_registration_window_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2",
          "return_type": "uuid",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_new_game(p_date timestamp with time zone, p_registration_window_start timestamp with time zone, p_registration_window_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2)\n RETURNS uuid\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game_id uuid;\r\nBEGIN\r\n    -- Validate dates\r\n    IF p_registration_window_start >= p_registration_window_end THEN\r\n        RAISE EXCEPTION 'Registration start must be before registration end';\r\n    END IF;\r\n    \r\n    IF p_registration_window_end > p_date THEN\r\n        RAISE EXCEPTION 'Registration must end before game starts';\r\n    END IF;\r\n\r\n    -- Insert the game with initial status\r\n    INSERT INTO games (\r\n        date,\r\n        registration_window_start,\r\n        registration_window_end,\r\n        status,\r\n        needs_completion,\r\n        is_historical,\r\n        teams_announced,\r\n        completed,\r\n        random_slots,\r\n        max_players\r\n    ) VALUES (\r\n        p_date,\r\n        p_registration_window_start,\r\n        p_registration_window_end,\r\n        'created',\r\n        false,\r\n        false,\r\n        false,\r\n        false,\r\n        p_random_slots,\r\n        p_max_players\r\n    )\r\n    RETURNING id INTO v_game_id;\r\n\r\n    RETURN v_game_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_next_slot_offer_players",
          "arguments": "p_game_id uuid, p_hours_until_game numeric",
          "return_type": "TABLE(player_id uuid)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_next_slot_offer_players(p_game_id uuid, p_hours_until_game numeric)\n RETURNS TABLE(player_id uuid)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_selected_player uuid;\r\n    v_selected_name text;\r\n    v_selected_xp integer;\r\nBEGIN\r\n    -- First get the next eligible player and store their details\r\n    WITH eligible_players AS (\r\n        SELECT \r\n            p.id as eligible_player_id,  -- Changed alias\r\n            p.friendly_name,\r\n            gr.created_at,\r\n            ps.xp\r\n        FROM game_registrations gr\r\n        INNER JOIN players p ON p.id = gr.player_id\r\n        INNER JOIN player_stats ps ON ps.id = p.id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n        AND NOT EXISTS (\r\n            SELECT 1 \r\n            FROM slot_offers so \r\n            WHERE so.game_id = p_game_id \r\n            AND so.player_id = p.id \r\n            AND so.status IN ('pending', 'declined')\r\n        )\r\n    )\r\n    SELECT \r\n        eligible_player_id,  -- Use new alias\r\n        friendly_name,\r\n        xp\r\n    INTO \r\n        v_selected_player,\r\n        v_selected_name,\r\n        v_selected_xp\r\n    FROM eligible_players\r\n    ORDER BY xp DESC, created_at ASC\r\n    LIMIT 1;\r\n\r\n    -- Log the selection process\r\n    IF v_selected_player IS NOT NULL THEN\r\n        INSERT INTO debug_logs (event_type, message, details)\r\n        VALUES (\r\n            'player_selection',\r\n            'Selected next player based on player_stats XP',\r\n            jsonb_build_object(\r\n                'game_id', p_game_id,\r\n                'selected_player', v_selected_player,\r\n                'player_name', v_selected_name,\r\n                'xp', v_selected_xp\r\n            )\r\n        );\r\n    ELSE\r\n        INSERT INTO debug_logs (event_type, message, details)\r\n        VALUES (\r\n            'player_selection',\r\n            'No eligible players found',\r\n            jsonb_build_object(\r\n                'game_id', p_game_id\r\n            )\r\n        );\r\n    END IF;\r\n\r\n    -- Return the selected player\r\n    RETURN QUERY\r\n    SELECT v_selected_player AS player_id  -- Explicit column alias in return\r\n    WHERE v_selected_player IS NOT NULL;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "delete_game_cascade",
          "arguments": "game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.delete_game_cascade(game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nbegin\r\n  -- Delete game selections first\r\n  delete from game_selections where game_id = $1;\r\n  \r\n  -- Delete game registrations\r\n  delete from game_registrations where game_id = $1;\r\n  \r\n  -- Finally delete the game\r\n  delete from games where id = $1;\r\nend;\r\n$function$\n"
        },
        {
          "name": "expire_slot_offers",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.expire_slot_offers()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    UPDATE slot_offers\r\n    SET status = 'expired',\r\n        updated_at = NOW()\r\n    WHERE status = 'pending'\r\n    AND expires_at < NOW();\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_caps",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, total_games integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_caps(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, total_games integer)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    SELECT \r\n        p.id,\r\n        p.friendly_name,\r\n        COUNT(gr.id)::integer as total_games\r\n    FROM players p\r\n    JOIN game_registrations gr ON gr.player_id = p.id\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE gr.status = 'selected'\r\n    AND (target_year IS NULL OR EXTRACT(YEAR FROM g.date) = target_year)\r\n    GROUP BY p.id, p.friendly_name\r\n    HAVING COUNT(gr.id) >= 10\r\n    ORDER BY COUNT(gr.id) DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "reject_slot_offer",
          "arguments": "p_slot_offer_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.reject_slot_offer(p_slot_offer_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_offer record;\r\nBEGIN\r\n    -- Get offer details\r\n    SELECT * INTO v_offer\r\n    FROM slot_offers\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Slot offer not found';\r\n    END IF;\r\n\r\n    -- Mark this offer as rejected\r\n    UPDATE slot_offers\r\n    SET status = 'rejected'\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    -- Create next slot offer\r\n    PERFORM create_next_slot_offer(v_offer.game_id, v_offer.rank);\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_game_needs_completion",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_game_needs_completion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- Only set needs_completion for games created from today onwards\r\n  IF NEW.created_at > '2024-11-28'::timestamp AND\r\n     (NEW.score_blue IS NULL OR NEW.score_orange IS NULL OR NEW.outcome IS NULL) THEN\r\n    NEW.needs_completion := true;\r\n  ELSE\r\n    NEW.needs_completion := false;\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_game_sequence_numbers",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_game_sequence_numbers()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Update sequence numbers for all games\r\n    -- Orders by date ascending (oldest first), then by created_at for games with same date\r\n    WITH numbered_games AS (\r\n        SELECT id,\r\n               ROW_NUMBER() OVER (ORDER BY date ASC, created_at ASC) as new_seq\r\n        FROM games\r\n    )\r\n    UPDATE games g\r\n    SET sequence_number = ng.new_seq\r\n    FROM numbered_games ng\r\n    WHERE g.id = ng.id;\r\n    \r\n    RETURN NULL;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_players_with_game_count",
          "arguments": "current_player_id uuid",
          "return_type": "TABLE(id uuid, friendly_name text, games_played bigint)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_players_with_game_count(current_player_id uuid)\n RETURNS TABLE(id uuid, friendly_name text, games_played bigint)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    SELECT \r\n        p.id,\r\n        p.friendly_name,\r\n        COUNT(DISTINCT gr1.game_id)::BIGINT as games_played\r\n    FROM players p\r\n    LEFT JOIN (\r\n        SELECT gr1.player_id, gr1.game_id\r\n        FROM game_registrations gr1\r\n        INNER JOIN game_registrations gr2 ON gr1.game_id = gr2.game_id\r\n            AND gr2.player_id = current_player_id\r\n            AND gr2.status IN ('selected', 'confirmed')\r\n        INNER JOIN games g ON gr1.game_id = g.id\r\n            AND g.completed = true\r\n        WHERE gr1.status IN ('selected', 'confirmed')\r\n    ) gr1 ON gr1.player_id = p.id\r\n    WHERE p.id != current_player_id\r\n    GROUP BY p.id, p.friendly_name\r\n    ORDER BY p.friendly_name;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_game_registration_status",
          "arguments": "p_game_id uuid, p_player_id uuid, p_status text",
          "return_type": "SETOF game_registrations",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_game_registration_status(p_game_id uuid, p_player_id uuid, p_status text)\n RETURNS SETOF game_registrations\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    -- Update the registration\r\n    RETURN QUERY\r\n    UPDATE game_registrations\r\n    SET status = p_status\r\n    WHERE game_id = p_game_id\r\n    AND player_id = p_player_id\r\n    RETURNING *;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "reset_game_selection",
          "arguments": "game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.reset_game_selection(game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nbegin\r\n  -- Reset game status to open\r\n  update games\r\n  set status = 'open'\r\n  where id = game_id;\r\n\r\n  -- Reset all registrations\r\n  update game_registrations\r\n  set status = 'registered',\r\n      randomly_selected = false\r\n  where game_id = game_id;\r\nend;\r\n$function$\n"
        },
        {
          "name": "handle_game_deletion",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_game_deletion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_slot_offer_ids UUID[];\r\nBEGIN\r\n    -- Get all slot offer IDs for this game\r\n    SELECT array_agg(id) INTO v_slot_offer_ids\r\n    FROM slot_offers\r\n    WHERE game_id = OLD.id;\r\n\r\n    -- Delete notifications related to slot offers for this game\r\n    DELETE FROM notifications\r\n    WHERE (metadata->>'game_id')::UUID = OLD.id\r\n    AND type IN ('slot_offer', 'system_announcement')\r\n    AND (metadata->>'action' = 'slot_offers_created' \r\n         OR (metadata->>'slot_offer_id')::UUID = ANY(v_slot_offer_ids));\r\n\r\n    -- Delete slot offers for this game\r\n    DELETE FROM slot_offers\r\n    WHERE game_id = OLD.id;\r\n\r\n    -- Return OLD to allow the deletion to proceed\r\n    RETURN OLD;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response",
          "arguments": "p_offer_id uuid, p_status text",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response(p_offer_id uuid, p_status text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_game_id UUID;\r\n  v_player_id UUID;\r\nBEGIN\r\n  -- Get the offer details\r\n  SELECT game_id, player_id INTO v_game_id, v_player_id\r\n  FROM slot_offers\r\n  WHERE id = p_offer_id;\r\n\r\n  IF NOT FOUND THEN\r\n    RAISE EXCEPTION 'Slot offer not found';\r\n  END IF;\r\n\r\n  -- If accepting the offer\r\n  IF p_status = 'accepted' THEN\r\n    -- Update game registration to selected\r\n    UPDATE game_registrations\r\n    SET status = 'selected'\r\n    WHERE game_id = v_game_id\r\n    AND player_id = v_player_id;\r\n\r\n    -- Mark all other offers for this game as void\r\n    UPDATE slot_offers\r\n    SET status = 'void'\r\n    WHERE game_id = v_game_id\r\n    AND id != p_offer_id;\r\n\r\n    -- Create notifications for other players\r\n    INSERT INTO notifications (\r\n      player_id,\r\n      type,\r\n      message,\r\n      metadata,\r\n      created_at\r\n    )\r\n    SELECT \r\n      so.player_id,\r\n      'system_message',\r\n      'The slot you were offered has been filled by another player.',\r\n      jsonb_build_object(\r\n        'game_id', v_game_id,\r\n        'action', 'slot_filled'\r\n      ),\r\n      NOW()\r\n    FROM slot_offers so\r\n    WHERE so.game_id = v_game_id\r\n    AND so.id != p_offer_id\r\n    AND so.status = 'pending';\r\n  END IF;\r\n\r\n  -- Update the offer status\r\n  UPDATE slot_offers\r\n  SET \r\n    status = p_status,\r\n    responded_at = NOW()\r\n  WHERE id = p_offer_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "promote_to_super_admin",
          "arguments": "target_user_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.promote_to_super_admin(target_user_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  IF EXISTS (\r\n    SELECT 1 FROM players \r\n    WHERE user_id = auth.uid() \r\n    AND is_super_admin = true\r\n  ) THEN\r\n    UPDATE players \r\n    SET is_super_admin = true \r\n    WHERE user_id = target_user_id;\r\n  ELSE\r\n    RAISE EXCEPTION 'Only super admins can promote other users to super admin';\r\n  END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "has_permission",
          "arguments": "permission_type admin_permission",
          "return_type": "boolean",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.has_permission(permission_type admin_permission)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RETURN EXISTS (\r\n    SELECT 1 \r\n    FROM admin_roles ar\r\n    LEFT JOIN admin_permissions ap ON ar.id = ap.admin_role_id\r\n    WHERE ar.player_id = (\r\n      SELECT id FROM players WHERE user_id = auth.uid()\r\n    )\r\n    AND (\r\n      ar.is_super_admin = true \r\n      OR ap.permission = permission_type\r\n    )\r\n  );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response_text",
          "arguments": "p_offer_id uuid, p_status text",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response_text(p_offer_id uuid, p_status text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RAISE NOTICE 'Text version called with status: %', p_status;\r\n  -- Call the main function with the converted enum\r\n  PERFORM handle_slot_offer_response(p_offer_id, p_status::slot_offer_status);\r\nEND;\r\n$function$\n"
        },
        {
          "name": "log_debug",
          "arguments": "message text",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.log_debug(message text)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RAISE NOTICE '%', message;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "process_team_announcements",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.process_team_announcements()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    game_record RECORD;\r\nBEGIN\r\n    FOR game_record IN\r\n        SELECT id\r\n        FROM games\r\n        WHERE team_announcement_time <= NOW()\r\n        AND team_announcement_time > NOW() - INTERVAL '5 minutes'\r\n        AND teams_announced = FALSE\r\n    LOOP\r\n        -- Balance teams for this game\r\n        PERFORM balance_teams(game_record.id);\r\n        \r\n        -- Mark the game as having teams announced\r\n        UPDATE games\r\n        SET teams_announced = TRUE\r\n        WHERE id = game_record.id;\r\n    END LOOP;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_streaks",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_streaks()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Your existing streak update logic here\r\n    -- But make sure to return the correct type\r\n    \r\n    IF TG_OP = 'INSERT' THEN\r\n        RETURN NEW;\r\n    ELSIF TG_OP = 'DELETE' THEN\r\n        RETURN OLD;\r\n    ELSIF TG_OP = 'UPDATE' THEN\r\n        RETURN NEW;\r\n    END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_caps_on_game_completion",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_caps_on_game_completion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Only process when a game becomes historical\r\n    IF NEW.is_historical = true AND (OLD.is_historical = false OR OLD.is_historical IS NULL) THEN\r\n        -- Update caps for all players who participated in this game\r\n        UPDATE players p\r\n        SET caps = calculate_player_caps(p.id)\r\n        FROM game_registrations gr\r\n        WHERE gr.game_id = NEW.id \r\n        AND gr.player_id = p.id\r\n        AND gr.team IS NOT NULL  -- Only count actual players, not reserves\r\n        AND (p.manual_caps_override IS NULL OR p.manual_caps_override = false);\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_updated_at",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    NEW.updated_at = CURRENT_TIMESTAMP;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_updated_at_column",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    NEW.updated_at = CURRENT_TIMESTAMP;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_admin_slot_offer_action",
          "arguments": "p_slot_offer_id uuid, p_action text, p_admin_id uuid DEFAULT NULL::uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_admin_slot_offer_action(p_slot_offer_id uuid, p_action text, p_admin_id uuid DEFAULT NULL::uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    -- Validate the action\r\n    IF p_action NOT IN ('accept', 'decline') THEN\r\n        RAISE EXCEPTION 'Invalid action: must be either accept or decline';\r\n    END IF;\r\n\r\n    -- Call the existing handle_slot_offer_response function\r\n    PERFORM handle_slot_offer_response(\r\n        p_slot_offer_id,\r\n        CASE \r\n            WHEN p_action = 'accept' THEN 'accepted'::slot_offer_status\r\n            WHEN p_action = 'decline' THEN 'declined'::slot_offer_status\r\n        END\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response",
          "arguments": "p_slot_offer_id uuid, p_action text, p_admin_id uuid DEFAULT NULL::uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response(p_slot_offer_id uuid, p_action text, p_admin_id uuid DEFAULT NULL::uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_slot_offer record;\r\n    v_game record;\r\n    v_current_players jsonb;\r\n    v_next_players UUID[];\r\n    v_hours_until_game NUMERIC;\r\nBEGIN\r\n    -- Get slot offer details\r\n    SELECT * INTO v_slot_offer\r\n    FROM slot_offers\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Slot offer not found';\r\n    END IF;\r\n\r\n    -- Get game details including current selected players\r\n    SELECT g.*, gs.selected_players, \r\n           EXTRACT(EPOCH FROM (g.date - NOW())) / 3600 as hours_until_game\r\n    INTO v_game\r\n    FROM games g\r\n    LEFT JOIN game_selections gs ON gs.game_id = g.id\r\n    WHERE g.id = v_slot_offer.game_id;\r\n\r\n    IF p_action = 'accept' THEN\r\n        -- Update game_selections with the new player\r\n        v_current_players := COALESCE(v_game.selected_players, '[]'::jsonb);\r\n        \r\n        -- Add the new player's ID as JSONB\r\n        UPDATE game_selections\r\n        SET selected_players = v_current_players || jsonb_build_array(v_slot_offer.player_id::text)\r\n        WHERE game_id = v_slot_offer.game_id;\r\n\r\n        -- Update game registration status\r\n        UPDATE game_registrations\r\n        SET status = 'selected'\r\n        WHERE game_id = v_slot_offer.game_id\r\n        AND player_id = v_slot_offer.player_id;\r\n\r\n        -- Update slot offer status\r\n        UPDATE slot_offers\r\n        SET \r\n            status = 'accepted',\r\n            responded_at = CURRENT_TIMESTAMP,\r\n            accepted_at = CURRENT_TIMESTAMP\r\n        WHERE id = p_slot_offer_id;\r\n\r\n    ELSIF p_action = 'decline' THEN\r\n        -- Update slot offer status\r\n        UPDATE slot_offers\r\n        SET \r\n            status = 'declined',\r\n            responded_at = CURRENT_TIMESTAMP,\r\n            declined_at = CURRENT_TIMESTAMP\r\n        WHERE id = p_slot_offer_id;\r\n\r\n        -- Get next eligible players based on XP\r\n        SELECT ARRAY(\r\n            SELECT player_id \r\n            FROM get_next_slot_offer_players(v_slot_offer.game_id, v_game.hours_until_game)\r\n            LIMIT 1\r\n        ) INTO v_next_players;\r\n\r\n        -- Create new offers for next eligible players\r\n        IF array_length(v_next_players, 1) > 0 THEN\r\n            -- Create new slot offers\r\n            INSERT INTO slot_offers (\r\n                game_id,\r\n                player_id,\r\n                status,\r\n                offered_at,\r\n                expires_at,\r\n                available_at,\r\n                rank\r\n            )\r\n            SELECT \r\n                v_slot_offer.game_id,\r\n                player_id,\r\n                'pending'::slot_offer_status,\r\n                NOW(),\r\n                NOW() + INTERVAL '1 hour',\r\n                NOW(),\r\n                COALESCE(v_slot_offer.rank, 1) + ROW_NUMBER() OVER ()\r\n            FROM unnest(v_next_players) AS player_id;\r\n\r\n            -- Create notifications\r\n            INSERT INTO notifications (\r\n                player_id,\r\n                type,\r\n                message,\r\n                metadata\r\n            )\r\n            SELECT \r\n                player_id,\r\n                'slot_offer',\r\n                'A spot has opened up in WNF #' || (\r\n                    SELECT COUNT(*) + 1 \r\n                    FROM games g2 \r\n                    WHERE g2.date < v_game.date \r\n                    OR (g2.date = v_game.date AND g2.id < v_slot_offer.game_id)\r\n                ) || '. Would you like to play?',\r\n                jsonb_build_object(\r\n                    'game_id', v_slot_offer.game_id,\r\n                    'action', 'new_slot_offer'\r\n                )\r\n            FROM unnest(v_next_players) AS player_id;\r\n        END IF;\r\n    END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "accept_slot_offer",
          "arguments": "p_slot_offer_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.accept_slot_offer(p_slot_offer_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_offer record;\r\nBEGIN\r\n    -- Get offer details\r\n    SELECT * INTO v_offer\r\n    FROM slot_offers\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Slot offer not found';\r\n    END IF;\r\n\r\n    -- Update the player's registration to selected\r\n    UPDATE game_registrations\r\n    SET status = 'selected'\r\n    WHERE game_id = v_offer.game_id\r\n    AND player_id = v_offer.player_id;\r\n\r\n    -- Mark this offer as accepted\r\n    UPDATE slot_offers\r\n    SET status = 'accepted'\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    -- Void all other pending offers for this game\r\n    UPDATE slot_offers\r\n    SET status = 'voided'\r\n    WHERE game_id = v_offer.game_id\r\n    AND id != p_slot_offer_id\r\n    AND status = 'pending';\r\n\r\n    -- Notify other players that their offers were voided\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    )\r\n    SELECT \r\n        so.player_id,\r\n        'slot_offer_update',\r\n        'The slot has been filled by another player.',\r\n        jsonb_build_object(\r\n            'game_id', so.game_id,\r\n            'slot_offer_id', so.id,\r\n            'status', 'voided'\r\n        ),\r\n        'Slot Offer Voided',\r\n        1\r\n    FROM slot_offers so\r\n    WHERE so.game_id = v_offer.game_id\r\n    AND so.id != p_slot_offer_id\r\n    AND so.status = 'voided';\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_balanced_teams",
          "arguments": "input_game_id uuid",
          "return_type": "TABLE(team text, player_id uuid, friendly_name text, attack_rating numeric, defense_rating numeric, experience_factor numeric)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_balanced_teams(input_game_id uuid)\n RETURNS TABLE(team text, player_id uuid, friendly_name text, attack_rating numeric, defense_rating numeric, experience_factor numeric)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    total_players integer;\r\n    players_per_team integer;\r\nBEGIN\r\n    -- Get total number of confirmed players\r\n    SELECT COUNT(*) INTO total_players\r\n    FROM public.game_registrations gp\r\n    WHERE gp.game_id = input_game_id AND gp.status = 'confirmed';\r\n\r\n    -- Calculate players per team\r\n    players_per_team := total_players / 2;\r\n\r\n    RETURN QUERY\r\n    WITH player_stats AS (\r\n        SELECT \r\n            gp.player_id,\r\n            p.friendly_name,\r\n            COALESCE(ps.attack_rating, 0) as attack_rating,\r\n            COALESCE(ps.defense_rating, 0) as defense_rating,\r\n            -- Calculate experience factor based on caps and streaks\r\n            (COALESCE(ps.caps, 0) * 0.1 + COALESCE(ps.current_streak, 0) * 0.05) as experience_factor,\r\n            -- Calculate weighted total rating\r\n            (COALESCE(ps.attack_rating, 0) + COALESCE(ps.defense_rating, 0)) * \r\n            (1 + (COALESCE(ps.active_bonuses, 0) * 0.1) - (COALESCE(ps.active_penalties, 0) * 0.1)) as weighted_rating\r\n        FROM public.game_registrations gp\r\n        JOIN public.players p ON p.id = gp.player_id\r\n        LEFT JOIN public.player_stats ps ON ps.id = gp.player_id\r\n        WHERE gp.game_id = input_game_id AND gp.status = 'confirmed'\r\n    ),\r\n    ranked_players AS (\r\n        SELECT \r\n            *,\r\n            ROW_NUMBER() OVER (\r\n                ORDER BY weighted_rating DESC\r\n            ) as rank\r\n        FROM player_stats\r\n    ),\r\n    team_assignments AS (\r\n        SELECT \r\n            CASE \r\n                -- Zigzag pattern for more balanced distribution\r\n                WHEN rank % 4 IN (1, 4) THEN 'blue'\r\n                ELSE 'orange'\r\n            END as team,\r\n            player_id,\r\n            friendly_name,\r\n            attack_rating,\r\n            defense_rating,\r\n            experience_factor\r\n        FROM ranked_players\r\n    )\r\n    SELECT \r\n        ta.team,\r\n        ta.player_id,\r\n        ta.friendly_name,\r\n        ta.attack_rating,\r\n        ta.defense_rating,\r\n        ta.experience_factor\r\n    FROM team_assignments ta\r\n    ORDER BY ta.team, (ta.attack_rating + ta.defense_rating) DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_slot_offer_times",
          "arguments": "p_game_id uuid, p_num_players integer",
          "return_type": "TABLE(player_rank integer, available_time timestamp with time zone, expire_time timestamp with time zone)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_slot_offer_times(p_game_id uuid, p_num_players integer)\n RETURNS TABLE(player_rank integer, available_time timestamp with time zone, expire_time timestamp with time zone)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game_date timestamp with time zone;\r\n    v_total_time_until_game interval;\r\n    v_interval_per_player interval;\r\nBEGIN\r\n    -- Get game date and set it to 00:01 of that day\r\n    SELECT date_trunc('day', date) + interval '1 minute' \r\n    INTO v_game_date \r\n    FROM games \r\n    WHERE id = p_game_id;\r\n\r\n    -- Calculate total time until game (from now until 00:01 on game day)\r\n    v_total_time_until_game := v_game_date - CURRENT_TIMESTAMP;\r\n    \r\n    -- Calculate interval between each offer\r\n    -- Add 1 minute buffer to ensure last player gets some time\r\n    v_interval_per_player := v_total_time_until_game / (p_num_players + 1);\r\n\r\n    -- Return time slots for each rank\r\n    RETURN QUERY\r\n    SELECT \r\n        generate_series as player_rank,\r\n        CURRENT_TIMESTAMP + (generate_series - 1) * v_interval_per_player as available_time,\r\n        CASE \r\n            WHEN generate_series = p_num_players THEN v_game_date -- Last player's offer expires at game time\r\n            ELSE CURRENT_TIMESTAMP + generate_series * v_interval_per_player -- Others expire when next offer becomes available\r\n        END as expire_time\r\n    FROM generate_series(1, p_num_players);\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_game",
          "arguments": "p_date timestamp with time zone, p_reg_start timestamp with time zone, p_reg_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2",
          "return_type": "uuid",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_game(p_date timestamp with time zone, p_reg_start timestamp with time zone, p_reg_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2)\n RETURNS uuid\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game_id uuid;\r\nBEGIN\r\n    -- Validate dates\r\n    IF p_reg_start >= p_reg_end THEN\r\n        RAISE EXCEPTION 'Registration start must be before registration end';\r\n    END IF;\r\n    \r\n    IF p_reg_end > p_date THEN\r\n        RAISE EXCEPTION 'Registration must end before game starts';\r\n    END IF;\r\n\r\n    -- Insert the game with explicit enum casting\r\n    INSERT INTO games (\r\n        date,\r\n        registration_window_start,\r\n        registration_window_end,\r\n        status,\r\n        needs_completion,\r\n        is_historical,\r\n        teams_announced,\r\n        completed,\r\n        random_slots,\r\n        max_players,\r\n        score_blue,\r\n        score_orange,\r\n        outcome\r\n    ) VALUES (\r\n        p_date,\r\n        p_reg_start,\r\n        p_reg_end,\r\n        'created'::game_status,\r\n        true,\r\n        false,\r\n        false,\r\n        false,\r\n        p_random_slots,\r\n        p_max_players,\r\n        NULL,\r\n        NULL,\r\n        NULL\r\n    )\r\n    RETURNING id INTO v_game_id;\r\n\r\n    RETURN v_game_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_game_with_status",
          "arguments": "p_date timestamp with time zone, p_reg_start timestamp with time zone, p_reg_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2",
          "return_type": "uuid",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_game_with_status(p_date timestamp with time zone, p_reg_start timestamp with time zone, p_reg_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2)\n RETURNS uuid\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game_id uuid;\r\n    v_status text := 'created';\r\nBEGIN\r\n    -- Validate dates\r\n    IF p_reg_start >= p_reg_end THEN\r\n        RAISE EXCEPTION 'Registration start must be before registration end';\r\n    END IF;\r\n    \r\n    IF p_reg_end > p_date THEN\r\n        RAISE EXCEPTION 'Registration must end before game starts';\r\n    END IF;\r\n\r\n    -- Validate status is in allowed values\r\n    IF NOT (v_status = ANY(ARRAY['created', 'registration_open', 'teams_announced', 'pending_completion', 'completed']::text[])) THEN\r\n        RAISE EXCEPTION 'Invalid status value: %', v_status;\r\n    END IF;\r\n\r\n    -- Insert the game with explicit casting of status\r\n    EXECUTE 'INSERT INTO games (\r\n        date,\r\n        registration_window_start,\r\n        registration_window_end,\r\n        status,\r\n        needs_completion,\r\n        is_historical,\r\n        teams_announced,\r\n        completed,\r\n        random_slots,\r\n        max_players,\r\n        score_blue,\r\n        score_orange,\r\n        outcome\r\n    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) RETURNING id'\r\n    INTO v_game_id\r\n    USING \r\n        p_date,\r\n        p_reg_start,\r\n        p_reg_end,\r\n        v_status,\r\n        true,\r\n        false,\r\n        false,\r\n        false,\r\n        p_random_slots,\r\n        p_max_players,\r\n        NULL,\r\n        NULL,\r\n        NULL;\r\n\r\n    IF v_game_id IS NULL THEN\r\n        RAISE EXCEPTION 'Failed to create game';\r\n    END IF;\r\n\r\n    RETURN v_game_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_initial_slot_offer",
          "arguments": "p_game_id uuid, p_admin_id uuid, p_dropped_out_player_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_initial_slot_offer(p_game_id uuid, p_admin_id uuid, p_dropped_out_player_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_eligible_players record;\r\n    v_slot_offer_id UUID;\r\n    v_player_count integer;\r\n    v_time_slots record;\r\n    v_current_rank integer := 1;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT * INTO v_game FROM games WHERE id = p_game_id;\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Game not found';\r\n    END IF;\r\n\r\n    -- Get count of eligible players\r\n    SELECT COUNT(*) INTO v_player_count\r\n    FROM players p\r\n    JOIN game_registrations gr ON gr.player_id = p.id\r\n    WHERE gr.game_id = p_game_id\r\n    AND gr.status = 'reserve';\r\n\r\n    -- Get highest XP reserve player\r\n    WITH RankedPlayers AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            p.friendly_name,\r\n            ps.xp,\r\n            ROW_NUMBER() OVER (ORDER BY ps.xp DESC) as rank\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN player_stats ps ON ps.player_id = p.id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n    )\r\n    SELECT * INTO v_eligible_players\r\n    FROM RankedPlayers\r\n    WHERE rank = 1;\r\n\r\n    -- Calculate time slots\r\n    SELECT * INTO v_time_slots\r\n    FROM calculate_slot_offer_times(p_game_id, v_player_count)\r\n    WHERE player_rank = 1;\r\n\r\n    -- Create slot offer for highest XP player\r\n    INSERT INTO slot_offers (\r\n        game_id,\r\n        player_id,\r\n        status,\r\n        rank,\r\n        available_at,\r\n        expires_at\r\n    ) VALUES (\r\n        p_game_id,\r\n        v_eligible_players.player_id,\r\n        'pending',\r\n        1,\r\n        v_time_slots.available_time,\r\n        v_time_slots.expire_time\r\n    ) RETURNING id INTO v_slot_offer_id;\r\n\r\n    -- Create notification for the eligible player\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    ) VALUES (\r\n        v_eligible_players.player_id,\r\n        'slot_offer',\r\n        format('A spot has opened up in a game on %s. You have exclusive access until %s!',\r\n               to_char(v_game.date, 'DD/MM/YYYY'),\r\n               to_char(v_time_slots.expire_time, 'HH24:MI')),\r\n        jsonb_build_object(\r\n            'game_id', p_game_id,\r\n            'slot_offer_id', v_slot_offer_id,\r\n            'exclusive_until', v_time_slots.expire_time\r\n        ),\r\n        'Exclusive Game Slot Available!',\r\n        2\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_next_slot_offer",
          "arguments": "p_game_id uuid, p_previous_rank integer",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_next_slot_offer(p_game_id uuid, p_previous_rank integer)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_next_player record;\r\n    v_slot_offer_id UUID;\r\n    v_player_count integer;\r\n    v_time_slots record;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT * INTO v_game FROM games WHERE id = p_game_id;\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Game not found';\r\n    END IF;\r\n\r\n    -- Get count of remaining eligible players\r\n    SELECT COUNT(*) INTO v_player_count\r\n    FROM players p\r\n    JOIN game_registrations gr ON gr.player_id = p.id\r\n    WHERE gr.game_id = p_game_id\r\n    AND gr.status = 'reserve'\r\n    AND NOT EXISTS (\r\n        SELECT 1 FROM slot_offers so\r\n        WHERE so.game_id = p_game_id\r\n        AND so.player_id = p.id\r\n        AND so.status = 'rejected'\r\n    );\r\n\r\n    -- Recalculate time slots with remaining players\r\n    SELECT * INTO v_time_slots\r\n    FROM calculate_slot_offer_times(p_game_id, v_player_count)\r\n    WHERE player_rank = 1;\r\n\r\n    -- Get next eligible player by XP\r\n    WITH RankedPlayers AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            p.friendly_name,\r\n            ps.xp,\r\n            ROW_NUMBER() OVER (ORDER BY ps.xp DESC) as rank\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN player_stats ps ON ps.player_id = p.id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n        AND NOT EXISTS (\r\n            SELECT 1 FROM slot_offers so\r\n            WHERE so.game_id = p_game_id\r\n            AND so.player_id = p.id\r\n            AND so.status = 'rejected'\r\n        )\r\n    )\r\n    SELECT * INTO v_next_player\r\n    FROM RankedPlayers\r\n    WHERE rank = 1;\r\n\r\n    -- Create slot offer for next player\r\n    INSERT INTO slot_offers (\r\n        game_id,\r\n        player_id,\r\n        status,\r\n        rank,\r\n        available_at,\r\n        expires_at\r\n    ) VALUES (\r\n        p_game_id,\r\n        v_next_player.player_id,\r\n        'pending',\r\n        p_previous_rank + 1,\r\n        v_time_slots.available_time,\r\n        v_time_slots.expire_time\r\n    ) RETURNING id INTO v_slot_offer_id;\r\n\r\n    -- Create notification for the next player\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    ) VALUES (\r\n        v_next_player.player_id,\r\n        'slot_offer',\r\n        format('A spot has opened up in a game on %s. You have exclusive access until %s!',\r\n               to_char(v_game.date, 'DD/MM/YYYY'),\r\n               to_char(v_time_slots.expire_time, 'HH24:MI')),\r\n        jsonb_build_object(\r\n            'game_id', p_game_id,\r\n            'slot_offer_id', v_slot_offer_id,\r\n            'exclusive_until', v_time_slots.expire_time\r\n        ),\r\n        'Exclusive Game Slot Available!',\r\n        2\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_slot_offers",
          "arguments": "p_game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_slot_offers(p_game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_total_players INTEGER;\r\n  v_available_slots INTEGER;\r\n  v_pending_offers INTEGER;\r\n  v_first_dropout_time TIMESTAMP WITH TIME ZONE;\r\n  v_game_date TIMESTAMP WITH TIME ZONE;\r\n  v_total_hours NUMERIC;\r\n  v_hours_per_player NUMERIC;\r\n  v_hours_elapsed NUMERIC;\r\n  v_players_to_offer INTEGER;\r\nBEGIN\r\n  -- Get total number of reserve players\r\n  SELECT COUNT(*)\r\n  INTO v_total_players\r\n  FROM game_registrations gr\r\n  WHERE gr.game_id = p_game_id\r\n  AND gr.status = 'reserve'\r\n  AND NOT gr.has_declined; -- Exclude players who have declined\r\n\r\n  -- Get number of available slots (dropouts)\r\n  SELECT COUNT(*)\r\n  INTO v_available_slots\r\n  FROM game_registrations gr\r\n  WHERE gr.game_id = p_game_id\r\n  AND gr.status = 'dropped_out';\r\n\r\n  -- Get number of pending offers\r\n  SELECT COUNT(*)\r\n  INTO v_pending_offers\r\n  FROM slot_offers so\r\n  WHERE so.game_id = p_game_id\r\n  AND so.status = 'pending';\r\n\r\n  -- If no slots available or already have enough pending offers, exit\r\n  IF v_available_slots = 0 OR v_pending_offers >= v_available_slots THEN\r\n    RETURN;\r\n  END IF;\r\n\r\n  -- Get the time of the first dropout for this game\r\n  SELECT MIN(created_at) INTO v_first_dropout_time\r\n  FROM game_registrations\r\n  WHERE game_id = p_game_id AND status = 'dropped_out';\r\n\r\n  -- Get the game date and set to midnight\r\n  SELECT DATE_TRUNC('day', date) INTO v_game_date\r\n  FROM games \r\n  WHERE id = p_game_id;\r\n\r\n  -- Calculate total hours from first dropout to game day\r\n  IF v_first_dropout_time IS NOT NULL THEN\r\n    -- Calculate total time window in hours\r\n    v_total_hours := EXTRACT(EPOCH FROM (v_game_date - v_first_dropout_time)) / 3600;\r\n    \r\n    -- Calculate hours per player\r\n    v_hours_per_player := v_total_hours / GREATEST(v_total_players, 1);\r\n\r\n    -- Calculate hours elapsed since first dropout\r\n    v_hours_elapsed := EXTRACT(EPOCH FROM (NOW() - v_first_dropout_time)) / 3600;\r\n\r\n    -- Calculate how many players should have offers based on elapsed time\r\n    v_players_to_offer := LEAST(\r\n      FLOOR(v_hours_elapsed / v_hours_per_player) + 1, -- Add 1 to ensure at least one offer\r\n      v_total_players\r\n    );\r\n  ELSE\r\n    -- If no dropouts yet, don't create any offers\r\n    RETURN;\r\n  END IF;\r\n\r\n  -- Create offers for eligible players\r\n  WITH ranked_players AS (\r\n    SELECT \r\n      gr.player_id,\r\n      ROW_NUMBER() OVER (ORDER BY gr.created_at ASC) as rank\r\n    FROM game_registrations gr\r\n    LEFT JOIN slot_offers so ON \r\n      so.game_id = gr.game_id \r\n      AND so.player_id = gr.player_id\r\n      AND so.status = 'pending' -- Only check for pending offers\r\n    WHERE gr.game_id = p_game_id\r\n    AND gr.status = 'reserve'\r\n    AND NOT gr.has_declined -- Exclude players who have declined\r\n    AND so.id IS NULL -- Only players without pending offers\r\n  )\r\n  INSERT INTO slot_offers (game_id, player_id, status, offered_at)\r\n  SELECT \r\n    p_game_id,\r\n    rp.player_id,\r\n    'pending',\r\n    NOW()\r\n  FROM ranked_players rp\r\n  WHERE rp.rank <= LEAST(\r\n    v_players_to_offer,\r\n    v_available_slots - v_pending_offers -- Only create offers up to available slots\r\n  )\r\n  AND NOT EXISTS ( -- Double check no existing pending offers\r\n    SELECT 1 FROM slot_offers so2\r\n    WHERE so2.game_id = p_game_id\r\n    AND so2.player_id = rp.player_id\r\n    AND so2.status = 'pending'\r\n  );\r\n\r\n  -- Create notifications for new offers\r\n  INSERT INTO notifications (\r\n    player_id,\r\n    type,\r\n    message,\r\n    metadata\r\n  )\r\n  SELECT \r\n    so.player_id,\r\n    'slot_offer',\r\n    'A spot has opened up in the game. Would you like to play?',\r\n    jsonb_build_object(\r\n      'game_id', p_game_id,\r\n      'action', 'new_slot_offer'\r\n    )\r\n  FROM slot_offers so\r\n  WHERE so.game_id = p_game_id\r\n  AND so.status = 'pending'\r\n  AND so.offered_at >= NOW() - INTERVAL '1 minute'; -- Only notify for newly created offers\r\nEND;\r\n$function$\n"
        },
        {
          "name": "debug_game_state",
          "arguments": "p_game_id uuid",
          "return_type": "TABLE(message text, details jsonb)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.debug_game_state(p_game_id uuid)\n RETURNS TABLE(message text, details jsonb)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_selected_count integer;\r\n    v_selected_players text;\r\n    v_debug_info jsonb;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT \r\n        g.*,\r\n        COUNT(CASE WHEN gr.status = 'selected' THEN 1 END) as selected_count,\r\n        string_agg(\r\n            CASE WHEN gr.status = 'selected' THEN \r\n                format('%s (ID: %s)', p.friendly_name, p.id)\r\n            END, \r\n            ', '\r\n        ) as selected_players\r\n    INTO v_game\r\n    FROM games g\r\n    LEFT JOIN game_registrations gr ON gr.game_id = g.id\r\n    LEFT JOIN players p ON p.id = gr.player_id\r\n    WHERE g.id = p_game_id\r\n    GROUP BY g.id;\r\n\r\n    IF NOT FOUND THEN\r\n        RETURN QUERY SELECT 'Game not found'::text, jsonb_build_object('game_id', p_game_id);\r\n        RETURN;\r\n    END IF;\r\n\r\n    -- Return basic game info\r\n    message := 'Game Info';\r\n    details := jsonb_build_object(\r\n        'game_id', v_game.id,\r\n        'max_players', v_game.max_players,\r\n        'selected_count', v_game.selected_count,\r\n        'selected_players', v_game.selected_players\r\n    );\r\n    RETURN NEXT;\r\n\r\n    -- Check for any inconsistencies\r\n    WITH Inconsistencies AS (\r\n        SELECT \r\n            gr.player_id,\r\n            p.friendly_name,\r\n            gr.status as registration_status,\r\n            so.status as offer_status,\r\n            so.accepted_at,\r\n            so.declined_at\r\n        FROM game_registrations gr\r\n        JOIN players p ON p.id = gr.player_id\r\n        LEFT JOIN slot_offers so ON so.game_id = gr.game_id AND so.player_id = gr.player_id\r\n        WHERE gr.game_id = p_game_id\r\n        AND (\r\n            -- Selected but no accepted offer\r\n            (gr.status = 'selected' AND (so.status IS NULL OR so.status != 'accepted'))\r\n            OR\r\n            -- Accepted offer but not selected\r\n            (so.status = 'accepted' AND gr.status != 'selected')\r\n            OR\r\n            -- Accepted timestamp but not accepted status\r\n            (so.accepted_at IS NOT NULL AND so.status != 'accepted')\r\n            OR\r\n            -- Accepted status but no timestamp\r\n            (so.status = 'accepted' AND so.accepted_at IS NULL)\r\n        )\r\n    )\r\n    SELECT \r\n        'Inconsistencies Found',\r\n        jsonb_agg(\r\n            jsonb_build_object(\r\n                'player_id', player_id,\r\n                'player_name', friendly_name,\r\n                'registration_status', registration_status,\r\n                'offer_status', offer_status,\r\n                'accepted_at', accepted_at,\r\n                'declined_at', declined_at\r\n            )\r\n        )\r\n    INTO message, v_debug_info\r\n    FROM Inconsistencies;\r\n\r\n    IF v_debug_info IS NOT NULL THEN\r\n        details := v_debug_info;\r\n        RETURN NEXT;\r\n    END IF;\r\n\r\n    -- Check for pending offers\r\n    WITH PendingOffers AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            p.friendly_name,\r\n            so.status as offer_status,\r\n            so.created_at,\r\n            so.expires_at,\r\n            gr.status as registration_status\r\n        FROM slot_offers so\r\n        JOIN players p ON p.id = so.player_id\r\n        JOIN game_registrations gr ON gr.game_id = so.game_id AND gr.player_id = so.player_id\r\n        WHERE so.game_id = p_game_id\r\n        AND so.status = 'pending'\r\n    )\r\n    SELECT \r\n        'Pending Offers',\r\n        jsonb_agg(\r\n            jsonb_build_object(\r\n                'player_id', player_id,\r\n                'player_name', friendly_name,\r\n                'offer_status', offer_status,\r\n                'created_at', created_at,\r\n                'expires_at', expires_at,\r\n                'registration_status', registration_status\r\n            )\r\n        )\r\n    INTO message, v_debug_info\r\n    FROM PendingOffers;\r\n\r\n    IF v_debug_info IS NOT NULL THEN\r\n        details := v_debug_info;\r\n        RETURN NEXT;\r\n    END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_balanced_teams",
          "arguments": "game_id uuid",
          "return_type": "jsonb",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_balanced_teams(game_id uuid)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    cached_results JSONB;\r\n    calculated_teams JSONB;\r\nBEGIN\r\n    -- Check cache first\r\n    SELECT team_assignments INTO cached_results\r\n    FROM public.balanced_team_assignments bta\r\n    WHERE bta.game_id = get_balanced_teams.game_id \r\n    AND bta.created_at > NOW() - INTERVAL '1 hour';\r\n\r\n    IF FOUND THEN\r\n        RETURN cached_results;\r\n    END IF;\r\n\r\n    -- Calculate teams if not in cache\r\n    WITH calculated_assignments AS (\r\n        SELECT \r\n            jsonb_agg(\r\n                jsonb_build_object(\r\n                    'team', t.team,\r\n                    'player_id', t.player_id,\r\n                    'friendly_name', t.friendly_name,\r\n                    'attack_rating', t.attack_rating,\r\n                    'defense_rating', t.defense_rating,\r\n                    'experience_factor', t.experience_factor\r\n                )\r\n                ORDER BY t.team, (t.attack_rating + t.defense_rating) DESC\r\n            ) as teams,\r\n            SUM(CASE WHEN t.team = 'blue' THEN t.attack_rating ELSE 0 END) as blue_attack,\r\n            SUM(CASE WHEN t.team = 'orange' THEN t.attack_rating ELSE 0 END) as orange_attack,\r\n            SUM(CASE WHEN t.team = 'blue' THEN t.defense_rating ELSE 0 END) as blue_defense,\r\n            SUM(CASE WHEN t.team = 'orange' THEN t.defense_rating ELSE 0 END) as orange_defense,\r\n            SUM(CASE WHEN t.team = 'blue' THEN t.experience_factor ELSE 0 END) as blue_experience,\r\n            SUM(CASE WHEN t.team = 'orange' THEN t.experience_factor ELSE 0 END) as orange_experience\r\n        FROM public.calculate_balanced_teams(get_balanced_teams.game_id) t\r\n    )\r\n    SELECT \r\n        jsonb_build_object(\r\n            'teams', teams,\r\n            'stats', jsonb_build_object(\r\n                'attack_differential', ABS(blue_attack - orange_attack),\r\n                'defense_differential', ABS(blue_defense - orange_defense),\r\n                'experience_differential', ABS(blue_experience - orange_experience),\r\n                'total_differential', ABS(blue_attack + blue_defense - orange_attack - orange_defense),\r\n                'blue_stats', jsonb_build_object(\r\n                    'attack', blue_attack,\r\n                    'defense', blue_defense,\r\n                    'experience', blue_experience\r\n                ),\r\n                'orange_stats', jsonb_build_object(\r\n                    'attack', orange_attack,\r\n                    'defense', orange_defense,\r\n                    'experience', orange_experience\r\n                )\r\n            )\r\n        ) INTO calculated_teams\r\n    FROM calculated_assignments;\r\n\r\n    -- Cache the results\r\n    INSERT INTO public.balanced_team_assignments (\r\n        game_id, \r\n        team_assignments,\r\n        attack_differential,\r\n        defense_differential,\r\n        total_differential,\r\n        experience_differential\r\n    )\r\n    SELECT \r\n        get_balanced_teams.game_id,\r\n        calculated_teams,\r\n        (calculated_teams->'stats'->>'attack_differential')::numeric,\r\n        (calculated_teams->'stats'->>'defense_differential')::numeric,\r\n        (calculated_teams->'stats'->>'total_differential')::numeric,\r\n        (calculated_teams->'stats'->>'experience_differential')::numeric;\r\n\r\n    RETURN calculated_teams;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_best_buddies",
          "arguments": "",
          "return_type": "TABLE(id uuid, friendly_name text, buddy_id uuid, buddy_friendly_name text, games_together bigint)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_best_buddies()\n RETURNS TABLE(id uuid, friendly_name text, buddy_id uuid, buddy_friendly_name text, games_together bigint)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    WITH team_pairs AS (\r\n        SELECT \r\n            gr1.player_id as player1_id,\r\n            gr2.player_id as player2_id,\r\n            COUNT(*) as games_together\r\n        FROM game_registrations gr1\r\n        JOIN game_registrations gr2 \r\n            ON gr1.game_id = gr2.game_id \r\n            AND gr1.team = gr2.team\r\n            AND gr1.player_id < gr2.player_id\r\n        WHERE gr1.status = 'selected' \r\n        AND gr2.status = 'selected'\r\n        GROUP BY gr1.player_id, gr2.player_id\r\n    )\r\n    SELECT \r\n        p1.id,\r\n        p1.friendly_name,\r\n        p2.id as buddy_id,\r\n        p2.friendly_name as buddy_friendly_name,\r\n        tp.games_together\r\n    FROM team_pairs tp\r\n    JOIN players p1 ON p1.id = tp.player1_id\r\n    JOIN players p2 ON p2.id = tp.player2_id\r\n    ORDER BY tp.games_together DESC\r\n    LIMIT 3;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_stats",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, caps integer, win_rate numeric, current_streak integer, max_streak integer, recent_games integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_stats(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, caps integer, win_rate numeric, current_streak integer, max_streak integer, recent_games integer)\n LANGUAGE sql\nAS $function$\r\n  WITH player_base AS (\r\n    SELECT \r\n      p.id::uuid as player_id,\r\n      p.friendly_name::text,\r\n      COUNT(DISTINCT g.id)::integer as total_games,\r\n      SUM(CASE \r\n        WHEN (gr.team = 'blue' AND g.score_blue > g.score_orange) OR \r\n             (gr.team = 'orange' AND g.score_orange > g.score_blue) \r\n        THEN 1 \r\n        ELSE 0\r\n      END)::integer as wins,\r\n      COUNT(CASE WHEN g.score_blue != g.score_orange THEN 1 END)::integer as non_draws\r\n    FROM players p\r\n    LEFT JOIN game_registrations gr ON gr.player_id = p.id\r\n    LEFT JOIN games g ON g.id = gr.game_id \r\n      AND gr.status = 'selected'\r\n      AND g.status = 'completed'\r\n      AND (target_year IS NULL OR EXTRACT(YEAR FROM g.created_at)::integer = target_year)\r\n    GROUP BY p.id, p.friendly_name\r\n    HAVING COUNT(DISTINCT g.id) >= 10\r\n  ),\r\n  player_streaks AS (\r\n    SELECT \r\n      pb.player_id,\r\n      s.current_streak,\r\n      s.max_streak\r\n    FROM player_base pb\r\n    CROSS JOIN LATERAL calculate_player_streaks(pb.player_id) s\r\n  ),\r\n  recent_games AS (\r\n    SELECT \r\n      pb.player_id,\r\n      COUNT(*)::integer as recent_count\r\n    FROM player_base pb\r\n    JOIN game_registrations gr ON gr.player_id = pb.player_id\r\n    JOIN games g ON g.id = gr.game_id\r\n    WHERE gr.status = 'selected'\r\n    AND g.status = 'completed'\r\n    AND g.created_at >= (\r\n      SELECT g2.created_at \r\n      FROM games g2\r\n      JOIN game_registrations gr2 ON gr2.game_id = g2.id\r\n      WHERE gr2.player_id = pb.player_id\r\n      AND gr2.status = 'selected'\r\n      AND g2.status = 'completed'\r\n      ORDER BY g2.created_at DESC\r\n      OFFSET 9 LIMIT 1\r\n    )\r\n    GROUP BY pb.player_id\r\n  )\r\n  SELECT \r\n    pb.player_id::uuid as id,\r\n    pb.friendly_name::text,\r\n    pb.total_games::integer as caps,\r\n    ROUND((pb.wins::numeric / NULLIF(pb.non_draws, 0)::numeric), 3) as win_rate,\r\n    COALESCE(ps.current_streak, 0)::integer as current_streak,\r\n    COALESCE(ps.max_streak, 0)::integer as max_streak,\r\n    COALESCE(rg.recent_count, 0)::integer as recent_games\r\n  FROM player_base pb\r\n  LEFT JOIN player_streaks ps ON ps.player_id = pb.player_id\r\n  LEFT JOIN recent_games rg ON rg.player_id = pb.player_id\r\n  ORDER BY \r\n    CASE WHEN target_year IS NULL THEN ps.max_streak ELSE ps.current_streak END DESC NULLS LAST,\r\n    pb.total_games DESC;\r\n$function$\n"
        },
        {
          "name": "get_player_team_colors",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, team text, team_frequency numeric, caps integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_team_colors(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, team text, team_frequency numeric, caps integer)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  WITH player_games AS (\r\n    -- Get total games for each player\r\n    SELECT \r\n      p.id as player_id,\r\n      p.friendly_name as player_name,\r\n      COUNT(*)::integer as total_games\r\n    FROM players p\r\n    JOIN game_registrations gr ON p.id = gr.player_id\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE gr.status = 'selected'\r\n    AND (target_year IS NULL OR EXTRACT(YEAR FROM g.created_at) = target_year)\r\n    GROUP BY p.id, p.friendly_name\r\n    HAVING COUNT(*) >= 10\r\n  ),\r\n  team_frequencies AS (\r\n    -- Calculate frequency for each team\r\n    SELECT \r\n      p.id as player_id,\r\n      p.friendly_name as player_name,\r\n      gr.team as player_team,\r\n      COUNT(*)::numeric as team_games,\r\n      pg.total_games,\r\n      ROUND(COUNT(*)::numeric / pg.total_games, 3) as frequency\r\n    FROM players p\r\n    JOIN game_registrations gr ON p.id = gr.player_id\r\n    JOIN games g ON gr.game_id = g.id\r\n    JOIN player_games pg ON p.id = pg.player_id\r\n    WHERE gr.status = 'selected'\r\n    AND gr.team IN ('blue', 'orange')\r\n    AND (target_year IS NULL OR EXTRACT(YEAR FROM g.created_at) = target_year)\r\n    GROUP BY p.id, p.friendly_name, gr.team, pg.total_games\r\n  )\r\n  SELECT\r\n    tf1.player_id as id,\r\n    tf1.player_name as friendly_name,\r\n    tf1.player_team as team,\r\n    tf1.frequency as team_frequency,\r\n    tf1.total_games as caps\r\n  FROM team_frequencies tf1\r\n  WHERE tf1.frequency >= 0.5  -- Only show players who play on a team more than 50% of the time\r\n  AND NOT EXISTS (\r\n    -- Exclude if they play more on the other team\r\n    SELECT 1 FROM team_frequencies tf2\r\n    WHERE tf1.player_id = tf2.player_id\r\n    AND tf2.frequency > tf1.frequency\r\n  )\r\n  ORDER BY tf1.frequency DESC, tf1.total_games DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_win_rates",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, total_games integer, wins integer, draws integer, losses integer, win_rate numeric)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_win_rates(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, total_games integer, wins integer, draws integer, losses integer, win_rate numeric)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    WITH player_games AS (\r\n        SELECT \r\n            p.id,\r\n            p.friendly_name,\r\n            g.outcome,\r\n            gr.team,\r\n            (SELECT COUNT(*) FILTER (WHERE team = 'blue' AND status = 'selected') \r\n             FROM game_registrations gr2 \r\n             WHERE gr2.game_id = g.id) as blue_count,\r\n            (SELECT COUNT(*) FILTER (WHERE team = 'orange' AND status = 'selected') \r\n             FROM game_registrations gr2 \r\n             WHERE gr2.game_id = g.id) as orange_count,\r\n            CASE \r\n                WHEN g.outcome = 'draw' THEN 'draw'\r\n                WHEN (gr.team = 'blue' AND g.outcome = 'blue_win') OR \r\n                     (gr.team = 'orange' AND g.outcome = 'orange_win') THEN 'win'\r\n                WHEN (gr.team = 'blue' AND g.outcome = 'orange_win') OR \r\n                     (gr.team = 'orange' AND g.outcome = 'blue_win') THEN 'loss'\r\n            END as player_result\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN games g ON g.id = gr.game_id\r\n        WHERE gr.status = 'selected'\r\n        AND g.outcome IS NOT NULL\r\n        AND (target_year IS NULL OR EXTRACT(YEAR FROM g.date) = target_year)\r\n    )\r\n    SELECT \r\n        p.id,\r\n        p.friendly_name,\r\n        COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count)::integer as total_games,\r\n        COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count AND pg.player_result = 'win')::integer as wins,\r\n        COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count AND pg.player_result = 'draw')::integer as draws,\r\n        COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count AND pg.player_result = 'loss')::integer as losses,\r\n        ROUND(\r\n            COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count AND pg.player_result = 'win')::numeric / \r\n            NULLIF(COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count), 0) * 100,\r\n            1\r\n        ) as win_rate\r\n    FROM players p\r\n    LEFT JOIN player_games pg ON pg.id = p.id\r\n    GROUP BY p.id, p.friendly_name\r\n    HAVING COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count) >= 10\r\n    ORDER BY win_rate DESC NULLS LAST;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_reserve_players_by_xp",
          "arguments": "p_game_id uuid",
          "return_type": "TABLE(player_id uuid, xp numeric, rank integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_reserve_players_by_xp(p_game_id uuid)\n RETURNS TABLE(player_id uuid, xp numeric, rank integer)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    WITH player_xp AS (\r\n        SELECT \r\n            p.id,\r\n            (p.caps * \r\n                GREATEST(\r\n                    (10 + \r\n                     COALESCE(p.active_bonuses, 0) - \r\n                     COALESCE(p.active_penalties, 0) + \r\n                     COALESCE(p.current_streak, 0)\r\n                    ), \r\n                    1\r\n                )\r\n            ) as calculated_xp\r\n        FROM game_registrations gr\r\n        INNER JOIN players p ON p.id = gr.player_id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n    )\r\n    SELECT \r\n        px.id,\r\n        px.calculated_xp,\r\n        RANK() OVER (ORDER BY px.calculated_xp DESC)::INTEGER\r\n    FROM player_xp px;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_team_color_stats",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(winning_color text, win_rate numeric)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_team_color_stats(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(winning_color text, win_rate numeric)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  WITH game_results AS (\r\n    SELECT\r\n      gr.team,\r\n      g.outcome,\r\n      COUNT(*) as total_games,\r\n      SUM(CASE \r\n        WHEN (gr.team = 'blue' AND g.outcome = 'blue_win') OR \r\n             (gr.team = 'orange' AND g.outcome = 'orange_win') \r\n        THEN 1 \r\n        ELSE 0 \r\n      END) as wins\r\n    FROM game_registrations gr\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE g.outcome IS NOT NULL\r\n    AND gr.status = 'selected'\r\n    AND (target_year IS NULL OR EXTRACT(YEAR FROM g.created_at) = target_year)\r\n    GROUP BY gr.team, g.outcome\r\n  )\r\n  SELECT\r\n    team as winning_color,\r\n    ROUND(CAST(SUM(wins) AS numeric) / NULLIF(SUM(total_games), 0), 3) as win_rate\r\n  FROM game_results\r\n  GROUP BY team\r\n  ORDER BY win_rate DESC\r\n  LIMIT 1;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "grant_admin_role",
          "arguments": "target_player_id uuid, make_super_admin boolean DEFAULT false, permissions admin_permission[] DEFAULT NULL::admin_permission[]",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.grant_admin_role(target_player_id uuid, make_super_admin boolean DEFAULT false, permissions admin_permission[] DEFAULT NULL::admin_permission[])\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  new_role_id UUID;\r\n  permission admin_permission;\r\nBEGIN\r\n  -- Check if executor is super admin\r\n  IF NOT EXISTS (\r\n    SELECT 1 FROM admin_roles \r\n    WHERE player_id = (SELECT id FROM players WHERE user_id = auth.uid())\r\n    AND is_super_admin = true\r\n  ) THEN\r\n    RAISE EXCEPTION 'Only super admins can grant admin roles';\r\n  END IF;\r\n\r\n  -- Create new admin role\r\n  INSERT INTO admin_roles (player_id, is_super_admin)\r\n  VALUES (target_player_id, make_super_admin)\r\n  RETURNING id INTO new_role_id;\r\n\r\n  -- Grant permissions if provided\r\n  IF permissions IS NOT NULL THEN\r\n    FOREACH permission IN ARRAY permissions\r\n    LOOP\r\n      INSERT INTO admin_permissions (admin_role_id, permission)\r\n      VALUES (new_role_id, permission);\r\n    END LOOP;\r\n  END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_registration_close",
          "arguments": "input_game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_registration_close(input_game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    total_slots INTEGER;\r\n    random_slots INTEGER;\r\n    xp_slots INTEGER;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT max_players, random_slots INTO total_slots, random_slots\r\n    FROM games\r\n    WHERE id = input_game_id;\r\n    \r\n    -- Calculate XP-based slots\r\n    xp_slots := total_slots - random_slots;\r\n    \r\n    -- Update game status\r\n    UPDATE games \r\n    SET status = 'registration_closed'\r\n    WHERE id = input_game_id;\r\n    \r\n    -- Select players by XP (for xp_slots)\r\n    WITH xp_selections AS (\r\n        SELECT gr.id\r\n        FROM game_registrations gr\r\n        JOIN players p ON gr.player_id = p.id\r\n        WHERE gr.game_id = input_game_id\r\n        ORDER BY p.xp DESC\r\n        LIMIT xp_slots\r\n    ),\r\n    -- Select remaining players randomly (for random_slots)\r\n    random_selections AS (\r\n        SELECT gr.id\r\n        FROM game_registrations gr\r\n        WHERE gr.game_id = input_game_id\r\n        AND gr.id NOT IN (SELECT id FROM xp_selections)\r\n        ORDER BY random()\r\n        LIMIT random_slots\r\n    )\r\n    -- Update selected players' status\r\n    UPDATE game_registrations\r\n    SET status = \r\n        CASE \r\n            WHEN id IN (SELECT id FROM xp_selections) OR \r\n                 id IN (SELECT id FROM random_selections)\r\n            THEN 'selected'\r\n            ELSE 'reserve'\r\n        END\r\n    WHERE game_id = input_game_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_attendance_streaks",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, current_streak integer, max_streak integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_attendance_streaks(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, current_streak integer, max_streak integer)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  latest_game_number integer;\r\nBEGIN\r\n  -- Get the latest game sequence number\r\n  SELECT MAX(sequence_number) INTO latest_game_number\r\n  FROM games\r\n  WHERE completed = true;\r\n\r\n  RETURN QUERY\r\n  WITH player_games AS (\r\n    -- Get all games for each player with their status and sequence number\r\n    SELECT \r\n      p.id as player_id,\r\n      p.friendly_name as player_friendly_name,\r\n      g.date,\r\n      g.sequence_number,\r\n      gr.status,\r\n      CASE \r\n        WHEN target_year IS NOT NULL THEN \r\n          EXTRACT(YEAR FROM g.date) = target_year\r\n        ELSE TRUE\r\n      END as in_target_year,\r\n      -- Calculate the gap between consecutive games for each player\r\n      sequence_number - ROW_NUMBER() OVER (\r\n        PARTITION BY p.id, \r\n        CASE WHEN gr.status = 'selected' AND \r\n          (target_year IS NULL OR EXTRACT(YEAR FROM g.date) = target_year)\r\n        THEN 1 ELSE 0 END \r\n        ORDER BY g.sequence_number\r\n      ) as streak_group\r\n    FROM players p\r\n    LEFT JOIN game_registrations gr ON gr.player_id = p.id\r\n    LEFT JOIN games g ON g.id = gr.game_id\r\n    WHERE g.completed = true\r\n    ORDER BY g.sequence_number\r\n  ),\r\n  streak_lengths AS (\r\n    -- Calculate streak lengths by counting consecutive games in each streak group\r\n    SELECT \r\n      player_id,\r\n      player_friendly_name,\r\n      streak_group,\r\n      CAST(COUNT(*) AS integer) as streak_length,\r\n      MAX(date) as last_game_date,\r\n      MAX(sequence_number) as last_streak_game\r\n    FROM player_games\r\n    WHERE status = 'selected' AND in_target_year\r\n    GROUP BY player_id, player_friendly_name, streak_group\r\n    HAVING COUNT(*) > 0\r\n  ),\r\n  max_streaks AS (\r\n    -- Get the maximum streak for each player\r\n    SELECT \r\n      player_id,\r\n      player_friendly_name,\r\n      CAST(MAX(streak_length) AS integer) as max_streak\r\n    FROM streak_lengths\r\n    GROUP BY player_id, player_friendly_name\r\n  ),\r\n  current_streaks AS (\r\n    -- Get the current streak by finding the most recent streak\r\n    SELECT DISTINCT ON (player_id)\r\n      player_id,\r\n      player_friendly_name,\r\n      CAST(CASE \r\n        WHEN last_streak_game = latest_game_number THEN streak_length \r\n        ELSE 0 \r\n      END AS integer) as current_streak\r\n    FROM streak_lengths\r\n    ORDER BY player_id, last_streak_game DESC\r\n  )\r\n  -- Combine max and current streaks\r\n  SELECT \r\n    ms.player_id as id,\r\n    ms.player_friendly_name as friendly_name,\r\n    COALESCE(cs.current_streak, 0) as current_streak,\r\n    COALESCE(ms.max_streak, 0) as max_streak\r\n  FROM max_streaks ms\r\n  LEFT JOIN current_streaks cs ON cs.player_id = ms.player_id\r\n  WHERE COALESCE(ms.max_streak, 0) > 0 OR COALESCE(cs.current_streak, 0) > 0\r\n  ORDER BY COALESCE(cs.current_streak, 0) DESC, COALESCE(ms.max_streak, 0) DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response_text",
          "arguments": "p_game_id uuid, p_player_id uuid, p_response text",
          "return_type": "text",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response_text(p_game_id uuid, p_player_id uuid, p_response text)\n RETURNS text\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_current_offer_id UUID;\r\n  v_current_offer_status TEXT;\r\n  v_message TEXT;\r\nBEGIN\r\n  -- Get the current offer status\r\n  SELECT id, status INTO v_current_offer_id, v_current_offer_status\r\n  FROM slot_offers\r\n  WHERE game_id = p_game_id \r\n  AND player_id = p_player_id \r\n  AND status = 'pending'\r\n  ORDER BY created_at DESC\r\n  LIMIT 1;\r\n\r\n  -- If no pending offer exists, return error\r\n  IF v_current_offer_id IS NULL THEN\r\n    RETURN 'No pending offer found';\r\n  END IF;\r\n\r\n  -- Update the current offer based on response\r\n  UPDATE slot_offers\r\n  SET \r\n    status = CASE \r\n      WHEN p_response = 'accept' THEN 'accepted'\r\n      WHEN p_response = 'decline' THEN 'declined'\r\n      ELSE status\r\n    END,\r\n    responded_at = NOW()\r\n  WHERE id = v_current_offer_id;\r\n\r\n  -- If offer was declined, create offers for next eligible players\r\n  IF p_response = 'decline' THEN\r\n    -- Update game registration to mark as declined\r\n    UPDATE game_registrations\r\n    SET has_declined = true\r\n    WHERE game_id = p_game_id AND player_id = p_player_id;\r\n\r\n    -- Call create_slot_offers to generate new offers\r\n    PERFORM create_slot_offers(p_game_id);\r\n    \r\n    v_message := 'Offer declined. New offers will be created for eligible players.';\r\n  ELSIF p_response = 'accept' THEN\r\n    -- Update game registration status\r\n    UPDATE game_registrations \r\n    SET status = 'confirmed'\r\n    WHERE game_id = p_game_id AND player_id = p_player_id;\r\n\r\n    -- Update any other pending offers to expired\r\n    UPDATE slot_offers\r\n    SET status = 'expired'\r\n    WHERE game_id = p_game_id \r\n    AND status = 'pending'\r\n    AND player_id != p_player_id;\r\n\r\n    v_message := 'Offer accepted. Your spot has been confirmed.';\r\n  END IF;\r\n\r\n  -- Send notification to admins about the response\r\n  INSERT INTO notifications (\r\n    player_id,\r\n    type,\r\n    message,\r\n    metadata\r\n  )\r\n  SELECT DISTINCT\r\n    ar.player_id,\r\n    'system_message',\r\n    CASE \r\n      WHEN p_response = 'accept' THEN \r\n        (SELECT username FROM players WHERE id = p_player_id) || ' has accepted a slot offer for WNF #' || \r\n        (SELECT COUNT(*) + 1 \r\n         FROM games g2 \r\n         WHERE g2.date < (SELECT date FROM games WHERE id = p_game_id) \r\n         OR (g2.date = (SELECT date FROM games WHERE id = p_game_id) AND g2.id < p_game_id))\r\n      WHEN p_response = 'decline' THEN \r\n        (SELECT username FROM players WHERE id = p_player_id) || ' has declined a slot offer for WNF #' ||\r\n        (SELECT COUNT(*) + 1 \r\n         FROM games g2 \r\n         WHERE g2.date < (SELECT date FROM games WHERE id = p_game_id) \r\n         OR (g2.date = (SELECT date FROM games WHERE id = p_game_id) AND g2.id < p_game_id))\r\n    END,\r\n    jsonb_build_object(\r\n      'game_id', p_game_id,\r\n      'action', CASE \r\n        WHEN p_response = 'accept' THEN 'slot_offer_accepted'\r\n        WHEN p_response = 'decline' THEN 'slot_offer_declined'\r\n      END,\r\n      'player_id', p_player_id,\r\n      'game_number', (\r\n        SELECT COUNT(*) + 1 \r\n        FROM games g2 \r\n        WHERE g2.date < (SELECT date FROM games WHERE id = p_game_id) \r\n        OR (g2.date = (SELECT date FROM games WHERE id = p_game_id) AND g2.id < p_game_id)\r\n      )\r\n    )\r\n  FROM admin_roles ar\r\n  JOIN admin_permissions ap ON ap.admin_role_id = ar.id\r\n  WHERE ap.permission = 'manage_games';\r\n\r\n  -- Also notify admins about new offers being created if this was a decline\r\n  IF p_response = 'decline' THEN\r\n    INSERT INTO notifications (\r\n      player_id,\r\n      type,\r\n      message,\r\n      metadata\r\n    )\r\n    SELECT DISTINCT\r\n      ar.player_id,\r\n      'system_message',\r\n      'Creating new slot offers after ' || (SELECT username FROM players WHERE id = p_player_id) || ' declined',\r\n      jsonb_build_object(\r\n        'game_id', p_game_id,\r\n        'action', 'creating_new_offers',\r\n        'declined_player_id', p_player_id\r\n      )\r\n    FROM admin_roles ar\r\n    JOIN admin_permissions ap ON ap.admin_role_id = ar.id\r\n    WHERE ap.permission = 'manage_games';\r\n  END IF;\r\n\r\n  RETURN v_message;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_average_ratings",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_average_ratings()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nBEGIN\r\n    -- For INSERT or UPDATE\r\n    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN\r\n        -- Update the rated player's averages\r\n        UPDATE players\r\n        SET \r\n            attack_rating = (\r\n                SELECT COALESCE(AVG(attack_rating), 0)\r\n                FROM player_ratings\r\n                WHERE rated_player_id = NEW.rated_player_id\r\n            ),\r\n            defense_rating = (\r\n                SELECT COALESCE(AVG(defense_rating), 0)\r\n                FROM player_ratings\r\n                WHERE rated_player_id = NEW.rated_player_id\r\n            )\r\n        WHERE id = NEW.rated_player_id;\r\n        \r\n        RETURN NEW;\r\n    -- For DELETE\r\n    ELSIF (TG_OP = 'DELETE') THEN\r\n        -- Update the rated player's averages\r\n        UPDATE players\r\n        SET \r\n            attack_rating = (\r\n                SELECT COALESCE(AVG(attack_rating), 0)\r\n                FROM player_ratings\r\n                WHERE rated_player_id = OLD.rated_player_id\r\n            ),\r\n            defense_rating = (\r\n                SELECT COALESCE(AVG(defense_rating), 0)\r\n                FROM player_ratings\r\n                WHERE rated_player_id = OLD.rated_player_id\r\n            )\r\n        WHERE id = OLD.rated_player_id;\r\n        \r\n        RETURN OLD;\r\n    END IF;\r\n    \r\n    RETURN NULL;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "void_other_slot_offers",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.void_other_slot_offers()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_selected_count INTEGER;\r\n    v_max_players INTEGER;\r\nBEGIN\r\n    -- If a slot offer is being accepted\r\n    IF NEW.status = 'accepted' AND (OLD.status IS NULL OR OLD.status != 'accepted') THEN\r\n        -- Get the current selected player count and add 1 for the current acceptance\r\n        SELECT COUNT(*) + 1 INTO v_selected_count\r\n        FROM game_registrations\r\n        WHERE game_id = NEW.game_id\r\n        AND status = 'selected';\r\n\r\n        -- Get max players for the game\r\n        SELECT max_players INTO v_max_players\r\n        FROM games\r\n        WHERE id = NEW.game_id;\r\n\r\n        -- Check if accepting would exceed max players\r\n        IF v_selected_count > v_max_players THEN\r\n            RAISE EXCEPTION 'Cannot accept offer: maximum players reached';\r\n        END IF;\r\n\r\n        -- Void all other pending offers for this game\r\n        UPDATE slot_offers\r\n        SET status = 'voided',\r\n            updated_at = NOW()\r\n        WHERE game_id = NEW.game_id\r\n        AND id != NEW.id\r\n        AND status = 'pending';\r\n\r\n        -- Update the player's registration status to selected\r\n        UPDATE game_registrations\r\n        SET status = 'selected'\r\n        WHERE game_id = NEW.game_id\r\n        AND player_id = NEW.player_id;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        }
      ]
    }
  }
]