[
  {
    "database_structure": {
      "metadata": {
        "database_name": "postgres",
        "database_size": "19 MB",
        "version": "PostgreSQL 15.6 on aarch64-unknown-linux-gnu, compiled by gcc (GCC) 13.2.0, 64-bit",
        "current_schemas": [
          "public",
          "extensions"
        ]
      },
      "tables": [
        {
          "table_name": "admin_permissions",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "48 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "admin_role_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "permission",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "admin_permissions_admin_role_id_fkey",
              "type": "FOREIGN KEY",
              "column": "admin_role_id",
              "foreign_table": "admin_roles",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "admin_permissions_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "admin_permissions",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_role_permission",
              "type": "UNIQUE",
              "column": "admin_role_id",
              "foreign_table": "admin_permissions",
              "foreign_column": "admin_role_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_role_permission",
              "type": "UNIQUE",
              "column": "admin_role_id",
              "foreign_table": "admin_permissions",
              "foreign_column": "permission",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_role_permission",
              "type": "UNIQUE",
              "column": "permission",
              "foreign_table": "admin_permissions",
              "foreign_column": "admin_role_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_role_permission",
              "type": "UNIQUE",
              "column": "permission",
              "foreign_table": "admin_permissions",
              "foreign_column": "permission",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127141_5_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "admin_permissions_pkey",
              "definition": "CREATE UNIQUE INDEX admin_permissions_pkey ON public.admin_permissions USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "unique_role_permission",
              "definition": "CREATE UNIQUE INDEX unique_role_permission ON public.admin_permissions USING btree (admin_role_id, permission)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 100",
              "opclass": "10065 3126",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "admin_roles",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "40 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "admin_roles_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "admin_roles",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "admin_roles_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "unique_player_role",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "admin_roles",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127149_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127149_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127149_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127149_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "admin_roles_pkey",
              "definition": "CREATE UNIQUE INDEX admin_roles_pkey ON public.admin_roles USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "unique_player_role",
              "definition": "CREATE UNIQUE INDEX unique_player_role ON public.admin_roles USING btree (player_id)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "balanced_team_assignments",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "136 kB",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "team_assignments",
              "type": "jsonb",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "attack_differential",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "defense_differential",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "total_differential",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "experience_differential",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "balanced_team_assignments_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "balanced_team_assignments_pkey",
              "type": "PRIMARY KEY",
              "column": "game_id",
              "foreign_table": "balanced_team_assignments",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127155_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127155_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127155_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "balanced_team_assignments_pkey",
              "definition": "CREATE UNIQUE INDEX balanced_team_assignments_pkey ON public.balanced_team_assignments USING btree (game_id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable delete access for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "DELETE",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable insert access for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "true"
            },
            {
              "name": "Enable read access for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable update access for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "true",
              "with_check": "true"
            }
          ]
        },
        {
          "table_name": "debug_logs",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "80 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "bigint",
              "nullable": "NO",
              "default": "nextval('debug_logs_id_seq'::regclass)",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 64,
              "numeric_scale": 0,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{345,346,347,348,349,350}",
              "correlation": "1"
            },
            {
              "name": "timestamp",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.5,
              "most_common_values": "{\"2025-01-10 10:25:59.843131+00\",\"2025-01-10 10:26:00.820885+00\"}",
              "most_common_frequencies": "{0.5,0.333333}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "event_type",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.666667,
              "most_common_values": "{game_stats,slot_offer_response}",
              "most_common_frequencies": "{0.333333,0.333333}",
              "histogram_bounds": "{maintenance,player_selection}",
              "correlation": "-0.257143"
            },
            {
              "name": "message",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.666667,
              "most_common_values": "{\"Game statistics\",\"Processing slot offer response\"}",
              "most_common_frequencies": "{0.333333,0.333333}",
              "histogram_bounds": "{\"Cleaned up old debug logs\",\"Selected next player based on WhatsApp status and XP\"}",
              "correlation": "-0.714286"
            },
            {
              "name": "details",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"{\\\"cleanup_time\\\": \\\"2025-01-11 00:00:00.142407+00\\\", \\\"deleted_count\\\": 36, \\\"remaining_logs\\\": 5, \\\"retention_hours\\\": 24}\",\"{\\\"game_id\\\": \\\"3f775ff3-4ef3-4352-9b09-7b0c19d16549\\\", \\\"player_id\\\": \\\"18ebd05e-2357-44c6-a49d-d280ceed7784\\\", \\\"new_status\\\": \\\"declined\\\", \\\"old_status\\\": \\\"pending\\\"}\",\"{\\\"game_id\\\": \\\"3f775ff3-4ef3-4352-9b09-7b0c19d16549\\\", \\\"player_id\\\": \\\"bca1e452-a4c1-4ecc-bc95-8c17c3974e8d\\\", \\\"new_status\\\": \\\"accepted\\\", \\\"old_status\\\": \\\"pending\\\"}\",\"{\\\"game_id\\\": \\\"3f775ff3-4ef3-4352-9b09-7b0c19d16549\\\", \\\"max_players\\\": 18, \\\"dropped_count\\\": 1, \\\"selected_count\\\": 17, \\\"active_selected\\\": 16}\",\"{\\\"game_id\\\": \\\"3f775ff3-4ef3-4352-9b09-7b0c19d16549\\\", \\\"max_players\\\": 18, \\\"dropped_count\\\": 1, \\\"selected_count\\\": 18, \\\"active_selected\\\": 17}\",\"{\\\"xp\\\": 68, \\\"game_id\\\": \\\"3f775ff3-4ef3-4352-9b09-7b0c19d16549\\\", \\\"player_name\\\": \\\"Joe\\\", \\\"selected_player\\\": \\\"bca1e452-a4c1-4ecc-bc95-8c17c3974e8d\\\", \\\"whatsapp_status\\\": null, \\\"selection_criteria\\\": \\\"WhatsApp members first, then by XP\\\"}\"}",
              "correlation": "-0.485714"
            }
          ],
          "constraints": [
            {
              "name": "debug_logs_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "debug_logs",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_137859_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "debug_logs_pkey",
              "definition": "CREATE UNIQUE INDEX debug_logs_pkey ON public.debug_logs USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "3124",
              "storage_parameters": null
            }
          ],
          "rls_policies": null
        },
        {
          "table_name": "extended_player_stats",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendlyName",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "activeBonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "activePenalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "winRate",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 5,
              "numeric_scale": 2,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "currentStreak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "maxStreak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatarSvg",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "gameSequences",
              "type": "ARRAY",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        },
        {
          "table_name": "game_registrations",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "288 kB",
          "estimated_rows": 497,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "gen_random_uuid()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{0042f36b-c3ba-4f90-a15f-1f541d0a0712,015d4b4d-48f1-4de1-b776-64b4747db012,03c9d259-85df-4550-acef-c2746ef37c7f,05962d7c-b2a4-40b9-8b26-f9f71060bb8d,07c1be2a-e5ce-4c36-bcac-c599d3b2449d,0c7d92e0-308d-4797-9127-9d74abab0f94,0e1fc460-62d7-4eaf-b60f-725d9b733bcf,0f5bd942-5e42-43e1-8cc6-39a5d60ff807,101a35a6-c176-42f5-ae5e-157cbbc16403,133fffa7-9fe8-4022-8fe3-f9ba4002eaa7,150f30e9-8ade-4563-b68d-39388b077728,1946c738-46ca-42c5-932d-f3cb8c27a654,1d989e4e-f87b-4651-959f-02b29f280a1b,200d2ddd-aab4-4e65-9a0c-c7b2ddbd87e9,241ad41a-7656-44dd-bd56-089a47cd991d,27ee9ae2-9f91-4815-b216-4134fd907c0f,2ac6d3c5-08f9-4685-a537-0ecd991ca79a,2ceff111-d3ae-46e1-a592-e45ccaac15d9,2e2ff0ac-5a06-4814-9c19-e6855c04dc1e,2fc8c438-e253-4c57-b20c-b294568c37af,32420f6d-6fa7-423f-ab64-d02830d99718,362c1051-70dd-4d7a-98bf-8c3e4510111b,39a2bd2f-b54a-41cc-bd53-7ee273ebf8cc,3b1b2cf3-31b1-4cee-9931-6c5d306b92fe,3cc671b0-e99e-4f93-8ba7-a20ed62e95d7,3e9e4749-ddb2-4eb2-862b-5b139f3b7f39,40fb4012-2135-421c-be1e-57a4bdfaf81a,45178ce0-9969-42b8-aaaf-023683621422,493c10e0-2b80-429d-96e2-0dc9a734e16a,4a11e64b-3ccb-46c6-a031-4eebeeefea3b,4d0ab613-cf27-4205-b162-af0e15f0a791,5069cef3-a898-4cdc-a2e9-18038887a5b3,532fcb15-f8d5-49da-b5e0-51e67548828f,56e11c9d-0fdf-4610-927a-75c52fcbbd8a,5b8048bb-1f0f-433e-8a79-945bdc99aac2,5e55e833-69b1-44c1-87eb-1d026e671f13,609a9f75-f399-4bda-83bc-469f2088f6c9,63d28813-e427-4945-99f3-966cbfded94e,65e4cddc-4a48-4859-9a68-4b217fe57299,6853ecc0-9112-4dff-ad29-a85ecd9c97d1,6a80e21c-02a6-4fef-92e5-a2792e9f523b,6ceafaf5-e38d-4c8d-8107-9b815040973f,71934db0-1b03-4497-b118-77a01fa84d86,72d49315-8645-4397-b448-f9e8c66e2803,7569c05c-11f0-4a8f-b082-9cff53b856c7,76d72064-1591-48ac-949b-1cc1a1cc370d,7933790e-8444-4c8f-a0c7-86e81b34021a,7a0607c4-c4f6-487b-a92f-4fcfc1ae9162,7e23a7f9-c163-4470-bfc5-bf5e4b708f29,814e239a-1509-48c9-b3b3-611fd560f364,82c86742-3826-4200-8092-ff192f955f1f,85a16e44-1a85-4337-842b-3674cbf3ac81,88b6d76b-6b81-4c4b-b147-74f79f295cbd,8e16da2c-53ca-4c40-8970-a538ea08243c,8fe21603-629f-47f6-ad80-edea9cfc9b67,9156be3a-f794-4f7d-9dc3-bacc1fec7ebd,9536911f-e5f3-4c72-a5f6-3bded9325e1f,995e8c3e-9b36-4266-b366-01b7855e1a5d,9ad9f6d0-f8be-4b94-8041-02f1fe65a183,9d46a448-28fa-4739-9583-79d0f4acb3c8,a04c047f-e7fc-4ae4-ae96-99fd6e90266d,a3e0aa52-9399-4f72-891e-3443afc31a51,a465e8bc-10d0-4157-89de-ea8c0eaf47f5,a6f7fb8f-e178-4273-94af-e22f70fe85db,a94db093-ba6d-4992-9de1-edaff63f021f,aac5ef5a-716e-43e7-8f1a-8c12d7340567,addf7286-e556-4229-8222-353e7195026b,b040182e-603b-426a-9d4b-064bc8f9799f,b3aa1a9c-794e-49f0-a3a7-b6d3c4020b36,b70dda01-9914-44f5-abba-ad246c16b2c2,b939e34e-937f-49c1-adb1-9ccebef04a1d,ba2fb15a-6f0d-487f-bfea-d48dcc0b9ffc,bc24f660-ae46-4939-9839-fadd3dec93bc,bea2fea6-e4e7-4276-a359-7b4d3e7fe7db,c0ce95c4-3c77-4ff5-9c7c-6400d7eca7b3,c21d4322-8825-4566-9117-2fddc082b200,c4526bf8-27cb-46da-8a37-839c838eda74,c6d1484e-ba5a-4992-9616-1775332281f9,c975d91b-2bab-4b3e-af5a-ace60b218065,cbb9fe78-d615-4f9c-801b-379e24abb8a1,cde4ee50-360b-49ed-af56-b5803392bdaf,d1c7c0f9-aa16-4dec-bfca-3cf44126cad7,d4198049-6957-4ea6-b051-972ba6423582,d8d76ad7-4774-4e06-afda-523f97c564d5,dcfdea23-8de0-44fe-b8c2-2b383acb461b,deb2416d-9b40-43c3-8f73-4582d2f0e161,e11e49cf-8dd0-4df1-b00a-8c0e81dc57c3,e5284100-1cb5-459e-af45-4bf5979150ad,e7d9fbf1-25f0-45ba-9ee6-3d4dfec3d797,e9594811-7a16-474e-a96e-1905d960a9bc,eac13abe-f95d-46d0-8234-331f1490093a,ed2b5eaf-fb76-47ce-a0cc-a080568a33cf,ee79e5f5-6308-4033-9aa7-457359b5d2ae,ef9eeb39-dbb6-45c4-a0f1-a4ccda4a1683,f23b92ba-637b-4d82-84f2-65f6b1598a3e,f4ad211f-edda-4c52-8bf0-af4c04df58a6,f87cd331-4260-4019-b50e-bbf8f6696a38,f9c8e5a1-974a-47ab-bf55-f392ffbbb938,fd0b36d3-1615-4f07-9296-c6b75f2a31ef,fe4c2257-bb20-4842-9b00-321dccc828f1,ffcbd257-7be5-4773-b631-994a0f4057ee}",
              "correlation": "-0.0695668"
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 28,
              "most_common_values": "{9030ab33-efb9-4763-9fd3-e30c87b6b20d,08a33fb7-7677-41c2-8baa-0375c1f4d9c2,1afd7965-a642-40ad-9d23-57e607c8f835,2ca68eac-a8b1-45d7-9c10-f0803800e1f7,3332c2d8-8600-4ba6-9029-26fa6190be96,34078038-5c66-4cba-a6e1-a41d732dcebe,3808f43c-6b2e-4c6c-bb1f-71702e119cff,3b1d39cf-3201-4053-80ab-c2bf95b7613a,3d03f1f9-5b12-41dd-a72e-214cf73f4fb6,42417771-801c-46ec-8d6e-ebefbcd0fb04,43cef2a8-9c8c-48f7-9124-8ab6b17de301,54bc6b11-ea09-42d0-9f56-dd38809c669e,5aa66610-9141-478c-804f-97191da0198f,95fc8176-f956-4f3b-bf01-9488e17ebbaa,ae6c1dfa-39c3-465c-890f-3fe6ab5f4bc9,e3c77ca3-1210-4a14-bc74-f99f5ec554b9,eb444d7d-e9d4-4207-bc88-fec8109ebdf2,f360829a-1586-4ffa-ad25-28789c28d903,4cc10211-be50-4611-bc85-d59d16399a6b,11cbf31e-b275-4fee-a5f6-d9468caf3d10,4e4c4605-22ef-4138-b088-3cd9d5b65d2d,5125c991-ade2-454e-86ea-27d116e0abf5,57fea9a1-765e-406c-b182-883d2720d99c,68e251b3-a23a-4a31-886a-07f171067de0,b52a8b13-f411-46a9-b9ba-3c858f74e2d5,83ca5ef5-7a7c-406d-8d25-7ccb9500db05,ea863f1a-b7da-4169-aae6-04c33f3dbce4,37725ca3-8857-411d-8e38-4135d9317bad}",
              "most_common_frequencies": "{0.0463158,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0378947,0.0357895,0.0336842,0.0336842,0.0336842,0.0336842,0.0336842,0.0336842,0.0252632,0.0252632,0.0210526}",
              "histogram_bounds": null,
              "correlation": "-0.238534"
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.115789,
              "most_common_values": "{2711aec5-829a-4569-a85f-ecf8c89f123d,876113b5-d7c3-41bc-ab69-4b6859f864a5,904a7c17-c8cc-4aff-958d-7788dea001dc,f3e8c7b3-8394-4da6-a68e-60ee4d7ba48e,40a27806-c64d-4786-8886-fb535b529b83,8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd,489fd3c5-73e4-4be9-9058-3fcb04dcad5d,81c9ec8f-7b81-4263-879e-b2088aefaca8,fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5,5c0e1219-9355-4078-b76d-a63ec320969c,8af191dc-5e8f-4fe9-a5f0-97fe316b0004,3a712b45-cd7e-4e66-a6dd-133255be5895,84c631df-a046-41e9-a10c-4a77561e6c08,8ad90589-7135-461f-b61d-272cbf3f6d04,be32d4f4-d8a2-4ac4-8fb2-21879753581c,b2466431-ede1-4eaa-a86e-ad0c7128b125,8b59cc3a-1df3-401e-ad46-b8681223c995,a950fdd0-847e-4f4d-96f5-9064719c8953,dd6651f8-9203-4efb-92ca-e2b6f8230f97,05bb40f8-d63f-4469-9a35-e466d1f2f1da,32f8ab9b-1259-4764-b463-aa2e70ca8c74,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca,18ebd05e-2357-44c6-a49d-d280ceed7784,be3517a2-68e2-4884-85f9-18eb16eebdd0,c465ed34-a5df-42ef-9332-3273a72f4c4d,0c2096c3-6eca-4582-b2a1-2166d2c8d61e,78ba8339-270a-4d10-b7f6-f10999568948,9082191f-69ff-469f-baa6-46cc918346ae,d31a40f9-1972-43e9-9864-277110c9e958,5200018e-14e6-46a0-8dff-2aa113ea6b8e,52128184-ee7e-44c6-8c65-31acee1b6843,56b37bdf-5f8b-4110-91b2-e55f6e83eb30,75e00430-067e-44af-b498-84b28edd51be,8481aae6-f7e9-41b1-9a93-77a9fd8e800f,ba4d8e2a-5559-4cfe-a7a1-92e6d03efe65,c83d54c5-3468-4fde-b2b6-220034bb7480,d3920bbc-a281-4b97-bc88-96315e38d3ba}",
              "most_common_frequencies": "{0.0526316,0.0505263,0.0505263,0.0505263,0.0484211,0.0484211,0.0463158,0.0442105,0.0442105,0.0421053,0.0421053,0.04,0.0357895,0.0336842,0.0336842,0.0315789,0.0294737,0.0273684,0.0273684,0.0252632,0.0252632,0.0252632,0.0126316,0.0126316,0.0105263,0.00842105,0.00842105,0.00631579,0.00631579,0.00631579,0.00631579,0.00421053,0.00421053,0.00421053,0.00421053,0.00421053,0.00421053,0.00421053,0.00421053}",
              "histogram_bounds": "{0bfd9afb-285d-474b-86cc-c91ab64c5622,22e64ff0-c283-47a4-a445-91f7f7194373,2806705a-9b9f-4437-b9bb-ca6489404484,2d7bd29f-85c0-4593-bdcf-eb2102445cfc,33443732-814b-4407-bbf0-8b30b57ef390,5e23dccd-8454-4c69-96a8-ec5b1d0ec54c,667be1e9-a840-4368-a40a-ed9e89dcf055,6e34ce3e-bbcd-4ba7-812e-32b0c39192fb,767cc150-1746-4d71-a8db-b9771f2f7770,813eac3e-b880-4988-823f-a345c5d6ed87,a0a34603-1309-4c2c-9064-02e62cda7d41,a298edef-70b4-4805-95eb-f921c50c2838,d909f3d1-18e3-4637-9ab4-bd05e81f87af,e790c8d4-4068-4f9e-b34f-633e392c562e,eadb10e4-8d85-4f1e-9705-86dadb80afe2,ee7ff6aa-3a38-47e7-92b5-060342521a61}",
              "correlation": "0.180763"
            },
            {
              "name": "status",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{selected}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "team",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{orange,blue}",
              "most_common_frequencies": "{0.501053,0.498947}",
              "histogram_bounds": null,
              "correlation": "0.595254"
            },
            {
              "name": "paid",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{t}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "timezone('utc'::text, now())",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.117895,
              "most_common_values": "{\"2024-11-15 15:32:28.417896+00\",\"2024-11-15 15:32:28.534694+00\",\"2024-11-11 17:26:09.811064+00\",\"2024-11-11 17:26:09.87908+00\",\"2024-11-11 17:29:00.404629+00\",\"2024-11-11 17:29:00.459064+00\",\"2024-11-15 10:49:59.018562+00\",\"2024-11-15 10:49:59.08566+00\",\"2024-11-15 15:25:20.731293+00\",\"2024-11-15 15:25:20.808342+00\",\"2024-11-15 15:36:14.785982+00\",\"2024-11-15 15:36:14.850174+00\",\"2024-11-15 15:41:05.987294+00\",\"2024-11-15 15:41:06.072672+00\",\"2024-11-15 15:45:17.925549+00\",\"2024-11-15 15:45:18.031348+00\",\"2024-11-15 15:48:49.304042+00\",\"2024-11-15 15:48:49.38855+00\",\"2024-11-15 15:51:48.368044+00\",\"2024-11-15 15:51:48.4376+00\",\"2024-11-15 16:04:25.477469+00\",\"2024-11-15 16:04:25.53922+00\",\"2024-11-15 23:40:49.259957+00\",\"2024-11-15 23:40:49.328407+00\",\"2024-11-16 00:17:38.660113+00\",\"2024-11-16 00:17:38.724796+00\",\"2024-11-16 00:19:23.127238+00\",\"2024-11-16 00:19:23.174666+00\",\"2024-11-28 09:22:39.830321+00\",\"2024-11-28 09:22:39.89501+00\",\"2024-12-16 09:51:53.718502+00\",\"2024-12-19 13:43:26.197049+00\",\"2024-12-19 13:43:26.287209+00\",\"2024-12-19 15:03:42.562721+00\",\"2024-12-19 15:03:42.638915+00\",\"2025-01-15 14:44:08.111674+00\",\"2025-01-15 14:44:08.317474+00\",\"2024-11-11 17:23:18.874391+00\",\"2024-11-11 17:23:18.9478+00\",\"2024-11-15 11:09:28.958801+00\",\"2024-11-15 11:09:29.03145+00\",\"2024-11-15 15:26:50.716691+00\",\"2024-11-15 15:26:50.783285+00\",\"2024-11-15 16:06:28.923613+00\",\"2024-11-15 16:06:28.989375+00\",\"2024-11-20 23:47:31.706078+00\",\"2024-11-20 23:47:31.788576+00\",\"2024-12-05 15:13:54.754434+00\",\"2024-12-05 15:13:54.85387+00\",\"2024-12-16 09:51:53.602842+00\",\"2024-11-11 17:07:30.569145+00\",\"2024-11-11 17:07:30.662434+00\",\"2024-11-11 17:18:03.786984+00\",\"2024-11-11 17:18:03.847411+00\",\"2024-11-11 17:02:27.557002+00\",\"2024-11-11 17:02:27.617386+00\"}",
              "most_common_frequencies": "{}",
              "histogram_bounds": null,
              "correlation": "0.197264"
            },
            {
              "name": "paid_by_player_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "payment_recipient_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{904a7c17-c8cc-4aff-958d-7788dea001dc}",
              "most_common_frequencies": "{0.0378947}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "payment_received_date",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{\"2024-12-29 00:03:01.41468+00\",\"2025-01-15 14:50:46.831+00\"}",
              "most_common_frequencies": "{0.962105,0.0378947}",
              "histogram_bounds": null,
              "correlation": "0.920008"
            },
            {
              "name": "selection_method",
              "type": "text",
              "nullable": "NO",
              "default": "'none'::text",
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{merit,none}",
              "most_common_frequencies": "{0.886316,0.113684}",
              "histogram_bounds": null,
              "correlation": "0.770271"
            },
            {
              "name": "payment_status",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{admin_verified}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "payment_verified_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{\"2024-12-29 00:03:01.41468+00\",\"2025-01-15 14:50:46.831+00\"}",
              "most_common_frequencies": "{0.962105,0.0378947}",
              "histogram_bounds": null,
              "correlation": "0.920008"
            },
            {
              "name": "payment_verified_by",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{904a7c17-c8cc-4aff-958d-7788dea001dc}",
              "most_common_frequencies": "{0.0378947}",
              "histogram_bounds": null,
              "correlation": "1"
            }
          ],
          "constraints": [
            {
              "name": "game_registrations_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "game_registrations_paid_by_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "paid_by_player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "game_registrations_payment_recipient_id_fkey",
              "type": "FOREIGN KEY",
              "column": "payment_recipient_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "game_registrations_payment_status_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "game_registrations",
              "foreign_column": "payment_status",
              "check_definition": "CHECK ((payment_status = ANY (ARRAY['unpaid'::text, 'marked_paid'::text, 'admin_verified'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "game_registrations_payment_verified_by_fkey",
              "type": "FOREIGN KEY",
              "column": "payment_verified_by",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "game_registrations_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "game_registrations",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "game_registrations_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "game_registrations_selection_method_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "game_registrations",
              "foreign_column": "selection_method",
              "check_definition": "CHECK ((selection_method = ANY (ARRAY['merit'::text, 'random'::text, 'none'::text, 'slot_offer'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "game_registrations_status_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "game_registrations",
              "foreign_column": "status",
              "check_definition": "CHECK ((status = ANY (ARRAY['registered'::text, 'selected'::text, 'reserve'::text, 'dropped_out'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "game_registrations_team_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "game_registrations",
              "foreign_column": "team",
              "check_definition": "CHECK ((team = ANY (ARRAY['blue'::text, 'orange'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_game_player",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "game_registrations",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_game_player",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "game_registrations",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_game_player",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "game_registrations",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_game_player",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "game_registrations",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_126996_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_126996_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_126996_11_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "game_registration_bench_warmer_streak_update",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_bench_warmer_streak()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_registration_bench_warmer_streak_update",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_bench_warmer_streak()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_registration_xp_update",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION handle_game_registration_xp()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_registration_xp_update",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION handle_game_registration_xp()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_streaks_on_registration",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_player_streaks()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_streaks_on_registration",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_streaks()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "game_registrations_pkey",
              "definition": "CREATE UNIQUE INDEX game_registrations_pkey ON public.game_registrations USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "unique_game_player",
              "definition": "CREATE UNIQUE INDEX unique_game_player ON public.game_registrations USING btree (game_id, player_id)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0",
              "opclass": "10065 10065",
              "storage_parameters": null
            },
            {
              "name": "idx_game_registrations_game_status",
              "definition": "CREATE INDEX idx_game_registrations_game_status ON public.game_registrations USING btree (game_id, status)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 100",
              "opclass": "10065 3126",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can register any player",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(EXISTS ( SELECT 1\n   FROM players p\n  WHERE ((p.user_id = auth.uid()) AND ((p.is_admin = true) OR (p.is_super_admin = true)))))"
            },
            {
              "name": "Enable insert for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "((EXISTS ( SELECT 1\n   FROM players p\n  WHERE ((p.user_id = auth.uid()) AND (p.is_admin = true)))) OR (EXISTS ( SELECT 1\n   FROM players p\n  WHERE ((p.user_id = auth.uid()) AND (p.id = game_registrations.player_id)))))"
            },
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable update for admins",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "((EXISTS ( SELECT 1\n   FROM ((players p\n     JOIN admin_roles ar ON ((ar.player_id = p.id)))\n     JOIN admin_permissions ap ON ((ap.admin_role_id = ar.id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text)))) OR (player_id = ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid()))))",
              "with_check": null
            },
            {
              "name": "Everyone can view game registrations",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Players can delete their own registration",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "DELETE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = game_registrations.player_id)))",
              "with_check": null
            },
            {
              "name": "Players can register themselves",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = game_registrations.player_id)))"
            },
            {
              "name": "Players can update their own registration",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = game_registrations.player_id)))",
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = game_registrations.player_id)))"
            }
          ]
        },
        {
          "table_name": "game_selections",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "136 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "selected_players",
              "type": "jsonb",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "reserve_players",
              "type": "jsonb",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "selection_metadata",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "timezone('utc'::text, now())",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "game_selections_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "game_selections_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "game_selections",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127161_6_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "game_selections_pkey",
              "definition": "CREATE UNIQUE INDEX game_selections_pkey ON public.game_selections USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable insert for authenticated users only",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.role() = 'authenticated'::text)"
            },
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable update for authenticated users only",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.role() = 'authenticated'::text)",
              "with_check": "(auth.role() = 'authenticated'::text)"
            }
          ]
        },
        {
          "table_name": "games",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "80 kB",
          "estimated_rows": 29,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "gen_random_uuid()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{08a33fb7-7677-41c2-8baa-0375c1f4d9c2,11cbf31e-b275-4fee-a5f6-d9468caf3d10,1afd7965-a642-40ad-9d23-57e607c8f835,2ca68eac-a8b1-45d7-9c10-f0803800e1f7,3332c2d8-8600-4ba6-9029-26fa6190be96,34078038-5c66-4cba-a6e1-a41d732dcebe,37725ca3-8857-411d-8e38-4135d9317bad,3808f43c-6b2e-4c6c-bb1f-71702e119cff,3b1d39cf-3201-4053-80ab-c2bf95b7613a,3d03f1f9-5b12-41dd-a72e-214cf73f4fb6,42417771-801c-46ec-8d6e-ebefbcd0fb04,43cef2a8-9c8c-48f7-9124-8ab6b17de301,4cc10211-be50-4611-bc85-d59d16399a6b,4e4c4605-22ef-4138-b088-3cd9d5b65d2d,5125c991-ade2-454e-86ea-27d116e0abf5,54bc6b11-ea09-42d0-9f56-dd38809c669e,57fea9a1-765e-406c-b182-883d2720d99c,5aa66610-9141-478c-804f-97191da0198f,68e251b3-a23a-4a31-886a-07f171067de0,83ca5ef5-7a7c-406d-8d25-7ccb9500db05,9030ab33-efb9-4763-9fd3-e30c87b6b20d,95fc8176-f956-4f3b-bf01-9488e17ebbaa,ae6c1dfa-39c3-465c-890f-3fe6ab5f4bc9,b52a8b13-f411-46a9-b9ba-3c858f74e2d5,e3c77ca3-1210-4a14-bc74-f99f5ec554b9,ea863f1a-b7da-4169-aae6-04c33f3dbce4,eb444d7d-e9d4-4207-bc88-fec8109ebdf2,f360829a-1586-4ffa-ad25-28789c28d903}",
              "correlation": "0.00328407"
            },
            {
              "name": "date",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-05-15 23:59:59.999+00\",\"2024-06-19 23:59:59.999+00\",\"2024-06-26 20:00:00+00\",\"2024-07-03 20:00:00+00\",\"2024-07-11 20:00:00+00\",\"2024-07-17 20:00:00+00\",\"2024-07-24 23:59:59.999+00\",\"2024-07-31 20:00:00+00\",\"2024-08-07 23:59:59.999+00\",\"2024-08-14 23:59:59.999+00\",\"2024-08-21 23:59:59.999+00\",\"2024-08-28 20:00:00+00\",\"2024-09-04 20:00:00+00\",\"2024-09-11 20:00:00+00\",\"2024-09-18 23:59:59.999+00\",\"2024-09-25 20:00:00+00\",\"2024-10-02 20:00:00+00\",\"2024-10-09 20:00:00+00\",\"2024-10-16 20:00:00+00\",\"2024-10-23 23:59:59.999+00\",\"2024-10-30 20:00:00+00\",\"2024-11-06 20:00:00+00\",\"2024-11-13 20:00:00+00\",\"2024-11-20 20:00:00+00\",\"2024-11-27 20:00:00+00\",\"2024-12-04 20:00:00+00\",\"2024-12-11 20:00:00+00\",\"2024-12-18 20:00:00+00\"}",
              "correlation": "0.679803"
            },
            {
              "name": "registration_window_start",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-05-15 00:00:00+00\",\"2024-06-19 00:00:00+00\",\"2024-06-26 00:00:00+00\",\"2024-07-03 00:00:00+00\",\"2024-07-11 00:00:00+00\",\"2024-07-17 00:00:00+00\",\"2024-07-24 00:00:00+00\",\"2024-07-31 00:00:00+00\",\"2024-08-07 00:00:00+00\",\"2024-08-14 00:00:00+00\",\"2024-08-21 00:00:00+00\",\"2024-08-28 00:00:00+00\",\"2024-09-04 00:00:00+00\",\"2024-09-11 00:00:00+00\",\"2024-09-18 00:00:00+00\",\"2024-09-25 00:00:00+00\",\"2024-10-02 00:00:00+00\",\"2024-10-09 00:00:00+00\",\"2024-10-16 00:00:00+00\",\"2024-10-23 00:00:00+00\",\"2024-10-30 00:00:00+00\",\"2024-11-06 00:00:00+00\",\"2024-11-13 00:00:00+00\",\"2024-11-20 00:00:00+00\",\"2024-11-27 00:00:00+00\",\"2024-12-04 00:00:00+00\",\"2024-12-11 00:00:00+00\",\"2024-12-18 00:00:00+00\"}",
              "correlation": "0.679803"
            },
            {
              "name": "registration_window_end",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-05-15 23:59:58.999+00\",\"2024-06-19 23:59:59.998+00\",\"2024-06-26 20:00:00+00\",\"2024-07-03 20:00:00+00\",\"2024-07-11 20:00:00+00\",\"2024-07-17 20:00:00+00\",\"2024-07-24 23:59:58.999+00\",\"2024-07-31 20:00:00+00\",\"2024-08-07 23:59:58.999+00\",\"2024-08-14 23:59:58.999+00\",\"2024-08-21 23:59:58.999+00\",\"2024-08-28 20:00:00+00\",\"2024-09-04 20:00:00+00\",\"2024-09-11 20:00:00+00\",\"2024-09-18 23:59:58.999+00\",\"2024-09-25 20:00:00+00\",\"2024-10-02 20:00:00+00\",\"2024-10-09 20:00:00+00\",\"2024-10-16 20:00:00+00\",\"2024-10-23 23:59:58.999+00\",\"2024-10-30 20:00:00+00\",\"2024-11-06 20:00:00+00\",\"2024-11-13 20:00:00+00\",\"2024-11-20 20:00:00+00\",\"2024-11-27 20:00:00+00\",\"2024-12-04 20:00:00+00\",\"2024-12-11 20:00:00+00\",\"2024-12-18 20:00:00+00\"}",
              "correlation": "0.679803"
            },
            {
              "name": "score_blue",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.178571,
              "most_common_values": "{5,4,3}",
              "most_common_frequencies": "{0.178571,0.142857,0.0714286}",
              "histogram_bounds": "{7,8}",
              "correlation": "-0.357143"
            },
            {
              "name": "score_orange",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.214286,
              "most_common_values": "{5,3}",
              "most_common_frequencies": "{0.178571,0.142857}",
              "histogram_bounds": "{2,4,6,10}",
              "correlation": "-0.0934066"
            },
            {
              "name": "outcome",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.107143,
              "most_common_values": "{blue_win,orange_win,draw}",
              "most_common_frequencies": "{0.357143,0.25,0.0714286}",
              "histogram_bounds": null,
              "correlation": "0.389474"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "timezone('utc'::text, now())",
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-11-11 16:53:47.616288+00\",\"2024-11-11 17:07:30.469444+00\",\"2024-11-11 17:18:03.706994+00\",\"2024-11-11 17:23:18.801122+00\",\"2024-11-11 17:26:09.716193+00\",\"2024-11-11 17:29:00.311676+00\",\"2024-11-11 17:32:33.308869+00\",\"2024-11-15 10:49:58.900155+00\",\"2024-11-15 11:09:28.864134+00\",\"2024-11-15 15:00:38.640031+00\",\"2024-11-15 15:17:51.610432+00\",\"2024-11-15 15:21:30.654751+00\",\"2024-11-15 15:26:50.629529+00\",\"2024-11-15 15:32:28.341681+00\",\"2024-11-15 15:36:14.706985+00\",\"2024-11-15 15:38:46.514516+00\",\"2024-11-15 15:41:05.888517+00\",\"2024-11-15 15:45:17.834528+00\",\"2024-11-15 15:48:49.234186+00\",\"2024-11-15 15:51:48.290128+00\",\"2024-11-15 15:57:50.931802+00\",\"2024-11-15 16:06:28.837439+00\",\"2024-11-15 23:40:49.13482+00\",\"2024-11-20 23:47:31.604513+00\",\"2024-11-28 09:22:39.728864+00\",\"2024-12-05 15:13:54.593481+00\",\"2024-12-16 09:51:53.452089+00\",\"2024-12-19 13:43:26.083004+00\"}",
              "correlation": "0.605364"
            },
            {
              "name": "venue_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{abe7111c-c99b-47f6-9508-75234c70cd9f}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "max_players",
              "type": "integer",
              "nullable": "YES",
              "default": "18",
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.214286,
              "most_common_values": "{18,16,12}",
              "most_common_frequencies": "{0.607143,0.214286,0.0714286}",
              "histogram_bounds": "{10,17,22}",
              "correlation": "0.685276"
            },
            {
              "name": "random_slots",
              "type": "integer",
              "nullable": "NO",
              "default": "2",
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 1,
              "most_common_values": "{0}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "is_historical",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{t}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "sequence_number",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28}",
              "correlation": "0.679803"
            },
            {
              "name": "pitch_cost",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 10,
              "numeric_scale": 2,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "payment_link",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 15,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0714286,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{https://monzo.me/davidleiyungchoo/2.95?h=wTE85F&d=Wednesday%20night%20football%20%E2%9A%BD%EF%B8%8F%20,https://monzo.me/davidleiyungchoo/3.00?h=wTE85F&d=Festive%20football%20%E2%9A%BD%EF%B8%8F%20}",
              "correlation": "1"
            },
            {
              "name": "needs_completion",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 16,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{f}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "completed",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 17,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{t}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "teams_announced",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 18,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{f}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "team_announcement_time",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 19,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.892857,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-05-15 19:59:59.999+00\",\"2024-06-19 19:59:59.999+00\",\"2024-06-26 16:00:00+00\",\"2024-07-03 16:00:00+00\",\"2024-07-11 16:00:00+00\",\"2024-07-17 16:00:00+00\",\"2024-07-24 16:00:00+00\",\"2024-07-31 16:00:00+00\",\"2024-08-07 19:59:59.999+00\",\"2024-08-14 19:59:59.999+00\",\"2024-08-21 19:59:59.999+00\",\"2024-08-28 16:00:00+00\",\"2024-09-04 16:00:00+00\",\"2024-09-11 16:00:00+00\",\"2024-09-18 19:59:59.999+00\",\"2024-09-25 16:00:00+00\",\"2024-10-02 16:00:00+00\",\"2024-10-09 16:00:00+00\",\"2024-10-16 16:00:00+00\",\"2024-10-23 19:59:59.999+00\",\"2024-10-30 16:00:00+00\",\"2024-11-06 16:00:00+00\",\"2024-11-13 16:00:00+00\",\"2024-11-20 16:00:00+00\",\"2024-11-27 16:00:00+00\"}",
              "correlation": "0.825385"
            },
            {
              "name": "status",
              "type": "USER-DEFINED",
              "nullable": "NO",
              "default": "'open'::game_status",
              "description": null,
              "position": 20,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{open}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            }
          ],
          "constraints": [
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "created_at",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "needs_completion",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "outcome",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "score_blue",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "check_needs_completion",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "score_orange",
              "check_definition": "CHECK ((((needs_completion = true) AND (created_at > '2024-11-28 00:00:00+00'::timestamp with time zone) AND ((score_blue IS NULL) OR (score_orange IS NULL) OR (outcome IS NULL))) OR (needs_completion = false)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "games_outcome_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "outcome",
              "check_definition": "CHECK ((outcome = ANY (ARRAY['blue_win'::text, 'orange_win'::text, 'draw'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "games_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "games_venue_id_fkey",
              "type": "FOREIGN KEY",
              "column": "venue_id",
              "foreign_table": "venues",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "valid_dates",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "date",
              "check_definition": "CHECK (((registration_window_start < registration_window_end) AND (registration_window_end <= date)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_dates",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "registration_window_end",
              "check_definition": "CHECK (((registration_window_start < registration_window_end) AND (registration_window_end <= date)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_dates",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "registration_window_start",
              "check_definition": "CHECK (((registration_window_start < registration_window_end) AND (registration_window_end <= date)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_score",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "score_blue",
              "check_definition": "CHECK ((((score_blue IS NULL) AND (score_orange IS NULL)) OR ((score_blue IS NOT NULL) AND (score_orange IS NOT NULL))))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_score",
              "type": "CHECK",
              "column": null,
              "foreign_table": "games",
              "foreign_column": "score_orange",
              "check_definition": "CHECK ((((score_blue IS NULL) AND (score_orange IS NULL)) OR ((score_blue IS NOT NULL) AND (score_orange IS NOT NULL))))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_11_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127168_20_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "game_completion_reserve_xp_trigger",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION handle_game_completion_reserve_xp()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_completion_status_check",
              "timing": "BEFORE",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION check_game_completion_status()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_deletion_stats_update",
              "timing": "AFTER",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION handle_game_deletion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_deletion_update",
              "timing": "BEFORE",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION handle_game_deletion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_deletion_xp_update",
              "timing": "BEFORE",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION handle_game_deletion_xp()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_sequence_delete",
              "timing": "AFTER",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION update_game_sequence_numbers()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_sequence_insert",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_game_sequence_numbers()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_sequence_update",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_game_sequence_numbers()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_streaks_update",
              "timing": "AFTER",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION update_streaks_on_game_change()",
              "orientation": "STATEMENT",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "game_streaks_update",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_streaks_on_game_change()",
              "orientation": "STATEMENT",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "on_game_deletion",
              "timing": "BEFORE",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION handle_game_deletion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "set_game_needs_completion",
              "timing": "BEFORE",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_game_needs_completion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "set_game_needs_completion",
              "timing": "BEFORE",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_game_needs_completion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "trigger_game_deletion",
              "timing": "BEFORE",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION handle_game_deletion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_caps_on_game_completion",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_caps_on_game_completion()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_player_xp_on_game_completion",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_xp()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_streaks_on_game_change",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_streaks()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_win_rates_on_game_completion",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_win_rates()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "games_pkey",
              "definition": "CREATE UNIQUE INDEX games_pkey ON public.games USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Everyone can view games",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Only admins can delete games",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "DELETE",
              "definition": "(auth.uid() IN ( SELECT p.user_id\n   FROM players p\n  WHERE (p.is_admin = true)))",
              "with_check": null
            },
            {
              "name": "Only admins can insert games",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.is_admin = true)))"
            },
            {
              "name": "Only admins can update games",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.is_admin = true)))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "notifications",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "80 kB",
          "estimated_rows": 36,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{018c195e-0155-42e3-933c-75a3f0b555a2,03662e20-e363-428f-b894-dc842be83e90,14424e3b-b6d1-4430-9ac5-1a965ad456eb,2526604b-27b4-4088-b364-7d33565d40cd,2b2cf7c1-1410-48ca-bc5b-5c8722f98c81,338f49c8-227c-4507-abe3-94a7930a7848,33a17a23-a40c-4a3f-8a42-c725cfc01826,4851451b-b78d-4464-b388-0be9ce702c20,4971918f-1937-41e6-862c-c405a4c68186,4bdd1bfd-4866-4622-8262-b0b3e2b5259c,57cffdf8-3218-407b-81dd-29eee04c1a27,58cbe527-610f-4fff-aebf-9ee3165341c3,62657d08-483c-4b75-981b-955bcad1ab6f,62697b6b-b16b-445b-ba62-a1ea15bb8f83,65af74a8-ba7d-452a-91e6-981fb96acd4c,69d58961-d2ef-49b4-b99f-df3d35408e4d,6ea900b8-51a8-4502-b87d-cb40ebd5df97,73c6a0d3-0fb8-4b49-8688-384ea73a7da0,774ccc74-39ec-4e6c-b85b-b50c88ca7d53,781765d7-5246-4a1a-9a47-1deb304ff25c,93ee99c0-eb9a-4838-85a5-da86e816131e,9776228d-a4ef-4cab-8628-6fe732ec9012,9f8e639e-876a-4ef2-982e-a528a62a032c,a346e672-b38c-4677-aea2-bbe045e07535,b39992b2-9dde-42f1-84ea-7e228ea9377c,bb0ad0f2-e457-4c8b-a46b-248a5711be70,bc58a171-c3df-4424-add3-4815c6a61a92,be597ed8-9d7e-45aa-b3bc-fb083c5dc356,bfd8d553-daa5-49ce-a1a6-a40fafd21261,c90d2e3a-fb8c-449f-81f6-6089c9e0f2f8,cc8f4a1c-d25a-41b7-95c0-ef47ebc7e854,d5529ed6-5641-4ca3-8ff6-9a06d3cd4161,d6c3ae6f-ff4b-4b8b-bcd3-f223b06136cc,e600accc-3c94-48b2-bde5-bae9a13d8027,f1e95159-36e8-49e7-bca2-c4411c2317d3,f83ff522-04f5-4acb-98a5-fc3431f0cbfb}",
              "correlation": "0.190734"
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.5,
              "most_common_values": "{2711aec5-829a-4569-a85f-ecf8c89f123d,32f8ab9b-1259-4764-b463-aa2e70ca8c74,3a712b45-cd7e-4e66-a6dd-133255be5895,40a27806-c64d-4786-8886-fb535b529b83,489fd3c5-73e4-4be9-9058-3fcb04dcad5d,81c9ec8f-7b81-4263-879e-b2088aefaca8,84c631df-a046-41e9-a10c-4a77561e6c08,876113b5-d7c3-41bc-ab69-4b6859f864a5,8ad90589-7135-461f-b61d-272cbf3f6d04,8af191dc-5e8f-4fe9-a5f0-97fe316b0004,8b59cc3a-1df3-401e-ad46-b8681223c995,8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd,904a7c17-c8cc-4aff-958d-7788dea001dc,a950fdd0-847e-4f4d-96f5-9064719c8953,b2466431-ede1-4eaa-a86e-ad0c7128b125,dd6651f8-9203-4efb-92ca-e2b6f8230f97,f3e8c7b3-8394-4da6-a68e-60ee4d7ba48e,fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5}",
              "most_common_frequencies": "{0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556,0.0555556}",
              "histogram_bounds": null,
              "correlation": "0.133848"
            },
            {
              "name": "type",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{payment_request}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "message",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{\"Payment required for game #29. Click the Monzo link to pay.\"}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "action_url",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{https://monzo.me/davidleiyungchoo/2.78?h=wTE85F&d=Wednesday%20night%20footy%20%E2%9A%BD%EF%B8%8F%20}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{\"2025-01-16 12:34:34.145471+00\",\"2025-01-16 12:47:15.55616+00\"}",
              "most_common_frequencies": "{0.5,0.5}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "read_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "expires_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "metadata",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{\"{\\\"action\\\": \\\"payment_request\\\", \\\"amount\\\": 5, \\\"game_id\\\": \\\"1d155af2-3387-4255-8cc5-b19ff1d2355e\\\", \\\"payment_link\\\": \\\"https://monzo.me/davidleiyungchoo/2.78?h=wTE85F&d=Wednesday%20night%20footy%20%E2%9A%BD%EF%B8%8F%20\\\"}\",\"{\\\"action\\\": \\\"payment_request\\\", \\\"amount\\\": 5, \\\"game_id\\\": \\\"6e0e3bfa-cf09-4246-92fc-165934d40bc4\\\", \\\"payment_link\\\": \\\"https://monzo.me/davidleiyungchoo/2.78?h=wTE85F&d=Wednesday%20night%20footy%20%E2%9A%BD%EF%B8%8F%20\\\"}\"}",
              "most_common_frequencies": "{0.5,0.5}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "title",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": "Optional title for the notification",
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{\"Payment Required\"}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "icon",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": "Optional icon identifier for the notification",
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{currency-pound}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "priority",
              "type": "smallint",
              "nullable": "YES",
              "default": "0",
              "description": "Priority level for the notification (higher numbers = higher priority)",
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 16,
              "numeric_scale": 0,
              "n_distinct": 1,
              "most_common_values": "{2}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            }
          ],
          "constraints": [
            {
              "name": "notifications_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "notifications",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "notifications_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "notifications_type_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "notifications",
              "foreign_column": "type",
              "check_definition": "CHECK ((type = ANY (ARRAY['game_created'::text, 'game_cancelled'::text, 'team_announced'::text, 'game_reminder'::text, 'payment_request'::text, 'payment_confirmed'::text, 'registration_confirmed'::text, 'registration_removed'::text, 'bonus_earned'::text, 'penalty_earned'::text, 'system_announcement'::text, 'slot_offer'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127186_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127186_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127186_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127186_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "notifications_pkey",
              "definition": "CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can create all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))"
            },
            {
              "name": "Admins can create notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))"
            },
            {
              "name": "Admins can delete all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "DELETE",
              "definition": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))",
              "with_check": null
            },
            {
              "name": "Admins can update all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))",
              "with_check": "(EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid())))"
            },
            {
              "name": "Admins can view all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "(EXISTS ( SELECT 1\n   FROM ((admin_roles ar\n     JOIN admin_permissions ap ON ((ap.admin_role_id = ar.id)))\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text))))",
              "with_check": null
            },
            {
              "name": "Players can create notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "((auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id))) OR (EXISTS ( SELECT 1\n   FROM (admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE (p.user_id = auth.uid()))))"
            },
            {
              "name": "Players can create their own notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))"
            },
            {
              "name": "Players can delete their notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "DELETE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))",
              "with_check": null
            },
            {
              "name": "Players can update their notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))",
              "with_check": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))"
            },
            {
              "name": "Players can update their own notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))",
              "with_check": null
            },
            {
              "name": "Players can view their notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "((auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id))) OR (EXISTS ( SELECT 1\n   FROM ((admin_roles ar\n     JOIN admin_permissions ap ON ((ap.admin_role_id = ar.id)))\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text)))))",
              "with_check": null
            },
            {
              "name": "Players can view their own notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = notifications.player_id)))",
              "with_check": null
            },
            {
              "name": "Service role can manage all notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "service_role"
              ],
              "command": "ALL",
              "definition": "true",
              "with_check": "true"
            },
            {
              "name": "Service role can manage notifications",
              "permissive": "PERMISSIVE",
              "roles": [
                "service_role"
              ],
              "command": "ALL",
              "definition": "true",
              "with_check": "true"
            }
          ]
        },
        {
          "table_name": "payment_presets",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "16 kB",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "name",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "payment_presets_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "payment_presets",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "payment_presets_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "2200_127195_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127195_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127195_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "payment_presets_pkey",
              "definition": "CREATE UNIQUE INDEX payment_presets_pkey ON public.payment_presets USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": null
        },
        {
          "table_name": "player_penalties",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "24 kB",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "penalty_type",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "expires_after_games",
              "type": "integer",
              "nullable": "NO",
              "default": "5",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "games_remaining",
              "type": "integer",
              "nullable": "NO",
              "default": "5",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "player_penalties_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "player_penalties_penalty_type_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_penalties",
              "foreign_column": "penalty_type",
              "check_definition": "CHECK ((penalty_type = 'SAME_DAY_DROPOUT'::text))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "player_penalties",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "player_penalties",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "player_penalties",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "player_penalties",
              "foreign_column": "penalty_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "player_penalties",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "player_penalties",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "player_penalties",
              "foreign_column": "penalty_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "penalty_type",
              "foreign_table": "player_penalties",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "penalty_type",
              "foreign_table": "player_penalties",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "type": "UNIQUE",
              "column": "penalty_type",
              "foreign_table": "player_penalties",
              "foreign_column": "penalty_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_6_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127202_7_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "player_penalties_pkey",
              "definition": "CREATE UNIQUE INDEX player_penalties_pkey ON public.player_penalties USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "player_penalties_player_id_game_id_penalty_type_key",
              "definition": "CREATE UNIQUE INDEX player_penalties_player_id_game_id_penalty_type_key ON public.player_penalties USING btree (player_id, game_id, penalty_type)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0 100",
              "opclass": "10065 10065 3126",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Players can add same-day dropout penalties to themselves",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "((auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = player_penalties.player_id))) AND (penalty_type = 'SAME_DAY_DROPOUT'::text))"
            },
            {
              "name": "Players can view their own penalties",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = player_penalties.player_id)))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "player_ranks",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "rank",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        },
        {
          "table_name": "player_ratings",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "48 kB",
          "estimated_rows": 72,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{0fbbcb67-3e7c-4147-8fc3-f0912ad39856,133eb367-7d3c-423c-abe1-cf22dc9efd20,13a93bce-c4aa-442a-b07b-f7ff31466431,1915a823-c081-4db0-b955-8b2b037259b6,1973583b-bee3-40b2-b670-fd7d428d4bf7,28cbcbf6-dbfb-4a34-a1a5-e61fa169c408,321c25b7-dac5-46bd-b6ed-ee1b37be2424,3305d665-e215-49b0-9772-dbc2190b6c72,45ed7282-7ff2-47bc-9dae-966e8c3da082,464c55be-46c6-420d-b0b4-aa7ab2f2dc45,4b96c5d9-1f70-4981-873f-6f86c3a847b9,50814166-cbe2-4a52-9466-b6831d6cc324,5ebed597-b53a-4697-b5f3-4ec83e2f41c2,61231274-601c-43fc-aea0-9165424f89a2,647e7552-1acc-4a1d-ae59-a66e79ec6ead,68c81e2c-ef98-4971-aeae-c1ddbcbfa2df,6e4891b1-39fe-496b-8553-ab4f88d149aa,8939250d-2ad6-4470-93d7-e08914e5a0cb,a2f7114a-6ef3-4f4b-ad77-ff75b7d10cab,b38b4fc0-f05b-4573-88c7-59c682d201ca,b8717e70-1ff6-49e8-9564-9c8603aaacba,bfe3b986-a1ba-4ebe-bbbe-c1e3ca03d1c8,c5bff4bb-cba4-4cab-bcbb-a4355a87084c,caaf2961-52de-4597-b966-24c53f2110bb,d12ba92a-9344-43e3-9c51-223632f78b7d,e03ea21f-09f2-4fc0-a2ed-2f8092c44e23,e515c4d7-10f9-49f9-8d75-70004ef80555,e78173b7-7fc4-4bed-81ac-86db0473d8d6}",
              "correlation": "-0.251232"
            },
            {
              "name": "rater_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{904a7c17-c8cc-4aff-958d-7788dea001dc,40a27806-c64d-4786-8886-fb535b529b83}",
              "most_common_frequencies": "{0.821429,0.178571}",
              "histogram_bounds": null,
              "correlation": "0.255063"
            },
            {
              "name": "rated_player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.857143,
              "most_common_values": "{32f8ab9b-1259-4764-b463-aa2e70ca8c74,81c9ec8f-7b81-4263-879e-b2088aefaca8,8ad90589-7135-461f-b61d-272cbf3f6d04,f3e8c7b3-8394-4da6-a68e-60ee4d7ba48e}",
              "most_common_frequencies": "{0.0714286,0.0714286,0.0714286,0.0714286}",
              "histogram_bounds": "{05bb40f8-d63f-4469-9a35-e466d1f2f1da,2711aec5-829a-4569-a85f-ecf8c89f123d,3a712b45-cd7e-4e66-a6dd-133255be5895,40a27806-c64d-4786-8886-fb535b529b83,489fd3c5-73e4-4be9-9058-3fcb04dcad5d,5c0e1219-9355-4078-b76d-a63ec320969c,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,84c631df-a046-41e9-a10c-4a77561e6c08,876113b5-d7c3-41bc-ab69-4b6859f864a5,8af191dc-5e8f-4fe9-a5f0-97fe316b0004,8b59cc3a-1df3-401e-ad46-b8681223c995,8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd,904a7c17-c8cc-4aff-958d-7788dea001dc,a950fdd0-847e-4f4d-96f5-9064719c8953,b2466431-ede1-4eaa-a86e-ad0c7128b125,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,be32d4f4-d8a2-4ac4-8fb2-21879753581c,dd6651f8-9203-4efb-92ca-e2b6f8230f97,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca,fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5}",
              "correlation": "0.198139"
            },
            {
              "name": "attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.321429,
              "most_common_values": "{6,7,5,8,2,9,10}",
              "most_common_frequencies": "{0.214286,0.214286,0.178571,0.107143,0.0714286,0.0714286,0.0714286}",
              "histogram_bounds": "{1,3}",
              "correlation": "0.188287"
            },
            {
              "name": "defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.321429,
              "most_common_values": "{4,7,5,6,8,10}",
              "most_common_frequencies": "{0.214286,0.214286,0.142857,0.142857,0.107143,0.0714286}",
              "histogram_bounds": "{1,3,9}",
              "correlation": "0.147236"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2024-11-28 17:25:02.867318+00\",\"2024-11-28 17:30:40.610277+00\",\"2024-11-28 22:59:24.884843+00\",\"2024-11-28 22:59:46.44786+00\",\"2024-11-28 23:00:03.527979+00\",\"2024-11-28 23:00:55.083388+00\",\"2024-11-28 23:01:11.783359+00\",\"2024-11-28 23:01:28.228545+00\",\"2024-11-28 23:02:00.144254+00\",\"2024-11-28 23:02:33.350622+00\",\"2024-11-28 23:02:51.31983+00\",\"2024-11-28 23:03:19.846037+00\",\"2024-11-28 23:03:34.616034+00\",\"2024-11-28 23:03:49.141624+00\",\"2024-11-28 23:04:02.161111+00\",\"2024-11-28 23:04:15.836519+00\",\"2024-11-28 23:04:28.206786+00\",\"2024-11-28 23:04:56.318239+00\",\"2024-11-28 23:05:13.485663+00\",\"2024-11-28 23:05:46.032817+00\",\"2024-11-28 23:06:33.749735+00\",\"2024-11-28 23:06:52.375341+00\",\"2024-12-29 11:28:21.406141+00\",\"2024-12-29 11:29:19.127191+00\",\"2025-01-08 12:04:48.79487+00\",\"2025-01-08 13:46:58.800467+00\",\"2025-01-08 13:47:23.087076+00\",\"2025-01-08 13:47:31.922844+00\"}",
              "correlation": "0.324576"
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.964286,
              "most_common_values": "{\"2025-01-08 20:14:47.372795+00\"}",
              "most_common_frequencies": "{0.0714286}",
              "histogram_bounds": "{\"2024-11-28 23:00:03.527979+00\",\"2024-11-28 23:01:11.783359+00\",\"2024-11-28 23:01:28.228545+00\",\"2024-11-28 23:02:33.350622+00\",\"2024-11-28 23:02:51.31983+00\",\"2024-11-28 23:03:34.616034+00\",\"2024-11-28 23:03:49.141624+00\",\"2024-11-28 23:04:02.161111+00\",\"2024-11-28 23:04:15.836519+00\",\"2024-11-28 23:04:56.318239+00\",\"2024-11-28 23:05:24.135256+00\",\"2024-11-28 23:05:46.032817+00\",\"2024-11-28 23:06:52.375341+00\",\"2024-11-28 23:07:53.16491+00\",\"2024-12-05 15:34:39.746211+00\",\"2025-01-01 02:18:53.324956+00\",\"2025-01-08 12:16:27.000516+00\",\"2025-01-08 12:21:46.810161+00\",\"2025-01-08 13:41:16.861546+00\",\"2025-01-08 13:47:11.530586+00\",\"2025-01-08 13:47:31.922844+00\",\"2025-01-08 15:11:24.071691+00\",\"2025-01-11 16:00:56.324516+00\",\"2025-01-13 12:18:05.162918+00\",\"2025-01-13 12:29:45.018388+00\",\"2025-01-13 12:30:00.411135+00\"}",
              "correlation": "1"
            }
          ],
          "constraints": [
            {
              "name": "cannot_rate_self",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_ratings",
              "foreign_column": "rated_player_id",
              "check_definition": "CHECK ((rater_id <> rated_player_id))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "cannot_rate_self",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_ratings",
              "foreign_column": "rater_id",
              "check_definition": "CHECK ((rater_id <> rated_player_id))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_ratings_attack_rating_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_ratings",
              "foreign_column": "attack_rating",
              "check_definition": "CHECK (((attack_rating >= (0)::numeric) AND (attack_rating <= (10)::numeric)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_ratings_defense_rating_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_ratings",
              "foreign_column": "defense_rating",
              "check_definition": "CHECK (((defense_rating >= (0)::numeric) AND (defense_rating <= (10)::numeric)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_ratings_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "player_ratings",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_ratings_rated_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "rated_player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "player_ratings_rater_id_fkey",
              "type": "FOREIGN KEY",
              "column": "rater_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "unique_rating_pair",
              "type": "UNIQUE",
              "column": "rater_id",
              "foreign_table": "player_ratings",
              "foreign_column": "rater_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_rating_pair",
              "type": "UNIQUE",
              "column": "rater_id",
              "foreign_table": "player_ratings",
              "foreign_column": "rated_player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_rating_pair",
              "type": "UNIQUE",
              "column": "rated_player_id",
              "foreign_table": "player_ratings",
              "foreign_column": "rater_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "unique_rating_pair",
              "type": "UNIQUE",
              "column": "rated_player_id",
              "foreign_table": "player_ratings",
              "foreign_column": "rated_player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127212_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127212_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127212_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "update_player_ratings_timestamp",
              "timing": "BEFORE",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_updated_at()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_player_ratings_trigger",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_player_average_ratings()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_player_ratings_trigger",
              "timing": "AFTER",
              "event": "DELETE",
              "statement": "EXECUTE FUNCTION update_player_average_ratings()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_player_ratings_trigger",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_average_ratings()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "player_ratings_pkey",
              "definition": "CREATE UNIQUE INDEX player_ratings_pkey ON public.player_ratings USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "unique_rating_pair",
              "definition": "CREATE UNIQUE INDEX unique_rating_pair ON public.player_ratings USING btree (rater_id, rated_player_id)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0",
              "opclass": "10065 10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can see all ratings",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "ALL",
              "definition": "((EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.id = player_ratings.rater_id) AND (players.user_id = auth.uid())))) OR (EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.user_id = auth.uid()) AND (players.is_admin = true)))))",
              "with_check": null
            },
            {
              "name": "Players can rate others they've played with",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "ALL",
              "definition": "(EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.id = player_ratings.rater_id) AND (players.user_id = auth.uid()))))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "player_stats",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "user_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "win_rate",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 5,
              "numeric_scale": 2,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_svg",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_options",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "current_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "max_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        },
        {
          "table_name": "player_stats_with_xp",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "user_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "win_rate",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 5,
              "numeric_scale": 2,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_svg",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_options",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "current_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "max_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        },
        {
          "table_name": "player_xp",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "920 kB",
          "estimated_rows": 55,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{05bb40f8-d63f-4469-9a35-e466d1f2f1da,0bfd9afb-285d-474b-86cc-c91ab64c5622,0c2096c3-6eca-4582-b2a1-2166d2c8d61e,18ebd05e-2357-44c6-a49d-d280ceed7784,22e64ff0-c283-47a4-a445-91f7f7194373,2711aec5-829a-4569-a85f-ecf8c89f123d,2806705a-9b9f-4437-b9bb-ca6489404484,2d7bd29f-85c0-4593-bdcf-eb2102445cfc,32f8ab9b-1259-4764-b463-aa2e70ca8c74,33443732-814b-4407-bbf0-8b30b57ef390,3a712b45-cd7e-4e66-a6dd-133255be5895,40a27806-c64d-4786-8886-fb535b529b83,489fd3c5-73e4-4be9-9058-3fcb04dcad5d,5200018e-14e6-46a0-8dff-2aa113ea6b8e,52128184-ee7e-44c6-8c65-31acee1b6843,56b37bdf-5f8b-4110-91b2-e55f6e83eb30,5c0e1219-9355-4078-b76d-a63ec320969c,5e23dccd-8454-4c69-96a8-ec5b1d0ec54c,667be1e9-a840-4368-a40a-ed9e89dcf055,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,6e34ce3e-bbcd-4ba7-812e-32b0c39192fb,75e00430-067e-44af-b498-84b28edd51be,767cc150-1746-4d71-a8db-b9771f2f7770,78ba8339-270a-4d10-b7f6-f10999568948,813eac3e-b880-4988-823f-a345c5d6ed87,81c9ec8f-7b81-4263-879e-b2088aefaca8,8481aae6-f7e9-41b1-9a93-77a9fd8e800f,84c631df-a046-41e9-a10c-4a77561e6c08,876113b5-d7c3-41bc-ab69-4b6859f864a5,8ad90589-7135-461f-b61d-272cbf3f6d04,8af191dc-5e8f-4fe9-a5f0-97fe316b0004,8b59cc3a-1df3-401e-ad46-b8681223c995,8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd,904a7c17-c8cc-4aff-958d-7788dea001dc,9082191f-69ff-469f-baa6-46cc918346ae,a0a34603-1309-4c2c-9064-02e62cda7d41,a298edef-70b4-4805-95eb-f921c50c2838,a950fdd0-847e-4f4d-96f5-9064719c8953,b2466431-ede1-4eaa-a86e-ad0c7128b125,ba4d8e2a-5559-4cfe-a7a1-92e6d03efe65,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,be32d4f4-d8a2-4ac4-8fb2-21879753581c,be3517a2-68e2-4884-85f9-18eb16eebdd0,c465ed34-a5df-42ef-9332-3273a72f4c4d,c83d54c5-3468-4fde-b2b6-220034bb7480,d31a40f9-1972-43e9-9864-277110c9e958,d3920bbc-a281-4b97-bc88-96315e38d3ba,d909f3d1-18e3-4637-9ab4-bd05e81f87af,dd6651f8-9203-4efb-92ca-e2b6f8230f97,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca,e790c8d4-4068-4f9e-b34f-633e392c562e,eadb10e4-8d85-4f1e-9705-86dadb80afe2,ee7ff6aa-3a38-47e7-92b5-060342521a61,f3e8c7b3-8394-4da6-a68e-60ee4d7ba48e,fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5}",
              "correlation": "0.681097"
            },
            {
              "name": "xp",
              "type": "integer",
              "nullable": "NO",
              "default": "0",
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.709091,
              "most_common_values": "{10,12,14,20,24,34}",
              "most_common_frequencies": "{0.127273,0.0909091,0.0545455,0.0545455,0.0363636,0.0363636}",
              "histogram_bounds": "{16,22,26,28,38,40,51,68,70,72,91,159,161,188,207,224,235,238,244,260,277,283,315,353,372,390,406,448,459,465,500,612,773}",
              "correlation": "0.244517"
            },
            {
              "name": "last_calculated",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{\"2025-01-16 13:17:16.267094+00\"}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "rarity",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 5,
              "most_common_values": "{Amateur,\"Semi Pro\",Professional,Legendary,\"World Class\"}",
              "most_common_frequencies": "{0.6,0.2,0.127273,0.0363636,0.0363636}",
              "histogram_bounds": null,
              "correlation": "0.437446"
            },
            {
              "name": "rank",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55}",
              "correlation": "-0.220635"
            }
          ],
          "constraints": [
            {
              "name": "player_xp_pkey",
              "type": "PRIMARY KEY",
              "column": "player_id",
              "foreign_table": "player_xp",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "player_xp_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "player_xp_xp_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "player_xp",
              "foreign_column": "xp",
              "check_definition": "CHECK ((xp >= 0))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_134426_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_134426_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "player_ranks_update_trigger",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_player_ranks()",
              "orientation": "STATEMENT",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "player_ranks_update_trigger",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_player_ranks()",
              "orientation": "STATEMENT",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "player_xp_rarity_trigger",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION update_rarity_on_xp_change()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "player_xp_rarity_trigger",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_rarity_on_xp_change()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "player_xp_pkey",
              "definition": "CREATE UNIQUE INDEX player_xp_pkey ON public.player_xp USING btree (player_id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": null
        },
        {
          "table_name": "players",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "232 kB",
          "estimated_rows": 55,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "gen_random_uuid()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{05bb40f8-d63f-4469-9a35-e466d1f2f1da,0bfd9afb-285d-474b-86cc-c91ab64c5622,0c2096c3-6eca-4582-b2a1-2166d2c8d61e,18ebd05e-2357-44c6-a49d-d280ceed7784,22e64ff0-c283-47a4-a445-91f7f7194373,2711aec5-829a-4569-a85f-ecf8c89f123d,2806705a-9b9f-4437-b9bb-ca6489404484,2d7bd29f-85c0-4593-bdcf-eb2102445cfc,32f8ab9b-1259-4764-b463-aa2e70ca8c74,33443732-814b-4407-bbf0-8b30b57ef390,3a712b45-cd7e-4e66-a6dd-133255be5895,40a27806-c64d-4786-8886-fb535b529b83,489fd3c5-73e4-4be9-9058-3fcb04dcad5d,5200018e-14e6-46a0-8dff-2aa113ea6b8e,52128184-ee7e-44c6-8c65-31acee1b6843,56b37bdf-5f8b-4110-91b2-e55f6e83eb30,5c0e1219-9355-4078-b76d-a63ec320969c,5e23dccd-8454-4c69-96a8-ec5b1d0ec54c,667be1e9-a840-4368-a40a-ed9e89dcf055,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,6e34ce3e-bbcd-4ba7-812e-32b0c39192fb,75e00430-067e-44af-b498-84b28edd51be,767cc150-1746-4d71-a8db-b9771f2f7770,78ba8339-270a-4d10-b7f6-f10999568948,813eac3e-b880-4988-823f-a345c5d6ed87,81c9ec8f-7b81-4263-879e-b2088aefaca8,8481aae6-f7e9-41b1-9a93-77a9fd8e800f,84c631df-a046-41e9-a10c-4a77561e6c08,876113b5-d7c3-41bc-ab69-4b6859f864a5,8ad90589-7135-461f-b61d-272cbf3f6d04,8af191dc-5e8f-4fe9-a5f0-97fe316b0004,8b59cc3a-1df3-401e-ad46-b8681223c995,8e7c2ed7-9850-411a-a1e3-eddd3d3b74cd,904a7c17-c8cc-4aff-958d-7788dea001dc,9082191f-69ff-469f-baa6-46cc918346ae,a0a34603-1309-4c2c-9064-02e62cda7d41,a298edef-70b4-4805-95eb-f921c50c2838,a950fdd0-847e-4f4d-96f5-9064719c8953,b2466431-ede1-4eaa-a86e-ad0c7128b125,ba4d8e2a-5559-4cfe-a7a1-92e6d03efe65,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,be32d4f4-d8a2-4ac4-8fb2-21879753581c,be3517a2-68e2-4884-85f9-18eb16eebdd0,c465ed34-a5df-42ef-9332-3273a72f4c4d,c83d54c5-3468-4fde-b2b6-220034bb7480,d31a40f9-1972-43e9-9864-277110c9e958,d3920bbc-a281-4b97-bc88-96315e38d3ba,d909f3d1-18e3-4637-9ab4-bd05e81f87af,dd6651f8-9203-4efb-92ca-e2b6f8230f97,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca,e790c8d4-4068-4f9e-b34f-633e392c562e,eadb10e4-8d85-4f1e-9705-86dadb80afe2,ee7ff6aa-3a38-47e7-92b5-060342521a61,f3e8c7b3-8394-4da6-a68e-60ee4d7ba48e,fbbb2730-3fe7-4a0c-9fba-9d375c0ff2e5}",
              "correlation": "-0.104618"
            },
            {
              "name": "user_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0727273,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{6099599c-21d3-454a-953a-19fa3973b82e,a4c15f00-d500-4ae3-b9f2-b8808f7f737c,eba23ded-59ab-4d64-90f4-2ec522ff8195,fb791661-b7d6-4512-bb69-40d316cd4497}",
              "correlation": "-0.8"
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"Adrian P\",\"Alex E\",\"Anthony B\",\"Ben W\",Boyle,Callum,Calvin,Carlton,\"Chris F\",\"Chris H\",Colin,Craig,Daniel,Danion,\"Darren C\",\"Darren W\",Dave,Dilon,Dom,Ethan,Faz,\"Gaz G\",\"Jack G\",\"Jack M\",\"James H\",Joe,Johnny,Justin,\"Justin S\",Kaci,Ken,Kieran,Kyle,\"Lee M\",\"Lee S\",Lewis,Maddocks,Matty,\"Mike B\",\"Mike M\",Paul,Pete,\"Phil J\",\"Phil R\",\"Phil V\",\"Ryan J\",\"Ryan L\",Sam,\"Scott J\",Simon,Stephen,\"Tom Ip\",\"Tom K\",Twiggy,Zhao}",
              "correlation": "-0.181241"
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.363636,
              "most_common_values": "{1,2,3,25,4,6,12,14,16,20,22,24}",
              "most_common_frequencies": "{0.290909,0.145455,0.0727273,0.0545455,0.0363636,0.0363636,0.0363636,0.0363636,0.0363636,0.0363636,0.0363636,0.0363636}",
              "histogram_bounds": "{5,13,15,17,18,21,23,26}",
              "correlation": "0.267316"
            },
            {
              "name": "win_rate",
              "type": "numeric",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 5,
              "numeric_scale": 2,
              "n_distinct": -0.218182,
              "most_common_values": "{50.00,54.50,30.80}",
              "most_common_frequencies": "{0.0545455,0.0545455,0.0363636}",
              "histogram_bounds": "{0.00,25.00,29.40,31.30,40.00,45.50,46.20,52.90,53.80}",
              "correlation": "-0.110294"
            },
            {
              "name": "active_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 1,
              "most_common_values": "{0}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "active_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 1,
              "most_common_values": "{0}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "timezone('utc'::text, now())",
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.2,
              "most_common_values": "{\"2024-11-11 15:52:58.97872+00\"}",
              "most_common_frequencies": "{0.818182}",
              "histogram_bounds": "{\"2024-11-08 00:21:14.457969+00\",\"2024-11-11 15:46:24.694242+00\",\"2024-11-15 15:58:08.358688+00\",\"2024-11-15 15:59:47.248446+00\",\"2024-11-20 23:45:39.998846+00\",\"2024-12-05 15:12:14.368105+00\",\"2025-01-08 13:38:51.0936+00\",\"2025-01-08 19:00:27.895529+00\",\"2025-01-11 15:54:34.148517+00\",\"2025-01-15 14:43:31.132962+00\"}",
              "correlation": "0.678139"
            },
            {
              "name": "is_admin",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{f}",
              "most_common_frequencies": "{0.981818}",
              "histogram_bounds": null,
              "correlation": "0.995238"
            },
            {
              "name": "is_super_admin",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{f}",
              "most_common_frequencies": "{0.981818}",
              "histogram_bounds": null,
              "correlation": "0.995238"
            },
            {
              "name": "avatar_svg",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0545455,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "avatar_options",
              "type": "jsonb",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0545455,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"{\\\"seed\\\": \\\"0.06243508460959535\\\"}\",\"{\\\"seed\\\": \\\"0.746787332674649\\\"}\",\"{\\\"seed\\\": \\\"0.8893536557549855\\\"}\"}",
              "correlation": "-0.5"
            },
            {
              "name": "attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.327273,
              "most_common_values": "{0,5.6666666666666667,6,6.3333333333333333,7.0000000000000000,7.3333333333333333}",
              "most_common_frequencies": "{0.545455,0.0727273,0.0545455,0.0363636,0.0363636,0.0363636}",
              "histogram_bounds": "{2.0000000000000000,3.0000000000000000,4.0000000000000000,5.3333333333333333,5.5000000000000000,6.2500000000000000,6.5000000000000000,6.6666666666666667,7.6666666666666667,8.3333333333333333,8.6666666666666667,9.0000000000000000}",
              "correlation": "0.254473"
            },
            {
              "name": "defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.272727,
              "most_common_values": "{0,7.3333333333333333,5.3333333333333333,6,3.6666666666666667,5.0000000000000000,7.0000000000000000,7.6666666666666667}",
              "most_common_frequencies": "{0.545455,0.0727273,0.0545455,0.0545455,0.0363636,0.0363636,0.0363636,0.0363636}",
              "histogram_bounds": "{4.3333333333333333,4.6666666666666667,5.5000000000000000,6.2500000000000000,6.3333333333333333,6.5000000000000000,8.3333333333333333}",
              "correlation": "0.416739"
            },
            {
              "name": "is_test_user",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 15,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{t,f}",
              "most_common_frequencies": "{0.927273,0.0727273}",
              "histogram_bounds": null,
              "correlation": "0.789538"
            },
            {
              "name": "manual_caps_override",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 16,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{f}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "current_streak",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 17,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.163636,
              "most_common_values": "{0,1,3,5,2,4}",
              "most_common_frequencies": "{0.654545,0.0909091,0.0727273,0.0545455,0.0363636,0.0363636}",
              "histogram_bounds": "{8,9,13}",
              "correlation": "0.612626"
            },
            {
              "name": "max_streak",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 18,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": -0.272727,
              "most_common_values": "{1,2,3,4,5,6,11,8,12,13}",
              "most_common_frequencies": "{0.454545,0.0727273,0.0545455,0.0545455,0.0545455,0.0545455,0.0545455,0.0363636,0.0363636,0.0363636}",
              "histogram_bounds": "{0,7,9,10,16}",
              "correlation": "0.27518"
            },
            {
              "name": "average_attack_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 19,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 4,
              "numeric_scale": 2,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "average_defense_rating",
              "type": "numeric",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 20,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 4,
              "numeric_scale": 2,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "whatsapp_group_member",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 21,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 2,
              "most_common_values": "{Yes}",
              "most_common_frequencies": "{0.509091}",
              "histogram_bounds": null,
              "correlation": "0.852217"
            },
            {
              "name": "whatsapp_mobile_number",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 22,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0545455,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{+447400055259,+447731922939,+447734866252}",
              "correlation": "0.5"
            },
            {
              "name": "bench_warmer_streak",
              "type": "integer",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 23,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 2,
              "most_common_values": "{0,1}",
              "most_common_frequencies": "{0.927273,0.0727273}",
              "histogram_bounds": null,
              "correlation": "0.595238"
            }
          ],
          "constraints": [
            {
              "name": "players_friendly_name_test_unique",
              "type": "UNIQUE",
              "column": "friendly_name",
              "foreign_table": "players",
              "foreign_column": "friendly_name",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_friendly_name_test_unique",
              "type": "UNIQUE",
              "column": "friendly_name",
              "foreign_table": "players",
              "foreign_column": "is_test_user",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_friendly_name_test_unique",
              "type": "UNIQUE",
              "column": "is_test_user",
              "foreign_table": "players",
              "foreign_column": "friendly_name",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_friendly_name_test_unique",
              "type": "UNIQUE",
              "column": "is_test_user",
              "foreign_table": "players",
              "foreign_column": "is_test_user",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_user_id_fkey",
              "type": "FOREIGN KEY",
              "column": "user_id",
              "foreign_table": "users",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "players_whatsapp_group_member_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "players",
              "foreign_column": "whatsapp_group_member",
              "check_definition": "CHECK ((whatsapp_group_member = ANY (ARRAY['Yes'::text, 'No'::text, 'Proxy'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "players_whatsapp_mobile_number_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "players",
              "foreign_column": "whatsapp_mobile_number",
              "check_definition": "CHECK ((whatsapp_mobile_number ~ '^\\+[1-9]\\d{1,14}$'::text))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "valid_win_rate",
              "type": "CHECK",
              "column": null,
              "foreign_table": "players",
              "foreign_column": "win_rate",
              "check_definition": "CHECK (((win_rate >= (0)::numeric) AND (win_rate <= (100)::numeric)))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127223_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127223_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "player_streak_xp_update",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_xp_on_streak_change()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "update_xp_on_streak_change",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION update_xp_on_streak_change()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "players_friendly_name_test_unique",
              "definition": "CREATE UNIQUE INDEX players_friendly_name_test_unique ON public.players USING btree (friendly_name, is_test_user)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "100 0",
              "opclass": "3126 10003",
              "storage_parameters": null
            },
            {
              "name": "players_pkey",
              "definition": "CREATE UNIQUE INDEX players_pkey ON public.players USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "players_friendly_name_idx",
              "definition": "CREATE INDEX players_friendly_name_idx ON public.players USING btree (friendly_name)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "100",
              "opclass": "3126",
              "storage_parameters": null
            },
            {
              "name": "players_user_id_idx",
              "definition": "CREATE INDEX players_user_id_idx ON public.players USING btree (user_id)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Allow trigger function to update player ratings",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "true",
              "with_check": "true"
            },
            {
              "name": "Enable read access for all users",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Enable registration",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "true"
            },
            {
              "name": "Enable update for authenticated users",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.role() = 'authenticated'::text)",
              "with_check": "(auth.role() = 'authenticated'::text)"
            },
            {
              "name": "Super admins can delete players",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "DELETE",
              "definition": "(EXISTS ( SELECT 1\n   FROM players p\n  WHERE ((p.user_id = auth.uid()) AND (p.is_super_admin = true))))",
              "with_check": null
            },
            {
              "name": "Super admins can update any player",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(EXISTS ( SELECT 1\n   FROM players players_1\n  WHERE ((players_1.id = auth.uid()) AND (players_1.is_super_admin = true))))",
              "with_check": null
            },
            {
              "name": "Users can create their own player profile",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(auth.uid() = user_id)"
            },
            {
              "name": "Users can update their own profile",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "UPDATE",
              "definition": "(auth.uid() = id)",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "reserve_xp_transactions",
          "table_type": "BASE TABLE",
          "description": "Tracks XP transactions related to reserve players. Players receive +5 XP for remaining in reserves after a game, \r\n    and -10 XP for declining a slot offer (except for same-day offers).",
          "total_size": "112 kB",
          "estimated_rows": 4,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{0664344d-50d2-46bb-af12-2824e0ca1f90,0760fea2-067e-4618-b033-ef18c98ce6ff,081bb85e-f1e3-414f-8d30-996d9e3498ea,08c6d9a4-4108-44d8-ba77-e6ab7592847f,140f32ed-71b0-4ba9-a017-558d9f101d3e,262da7df-fef6-4421-b827-75dddf4b3850,2ad4ef59-bc4a-4f48-92fc-8934bfc7eac7,396c19fb-7403-4978-90da-82c182a305d9,3a865857-ac34-4e05-a016-84935f2619e6,43fe29c8-2d04-4933-b8a9-6cac00f89a96,548ad403-63e3-4987-84a5-f372081fdb38,54e97215-beb7-41cd-8aaf-14b3eb9b6230,652f4b4d-283a-4624-843a-05fd97aa9d14,6ce73529-f4c6-4cd5-a64b-60c52ec6fcb0,7463e0af-942c-40a9-b3e5-16e53d434097,75279e80-26fe-449f-9d06-65545891afff,7bc9fe32-e7de-4e36-aa42-9e8b92125f81,83e5df2c-118f-42ca-862e-279dcef47c9c,92886ef4-a452-4b74-a158-f0892ca1ae23,93eb9786-47a3-4707-83ad-1eeb24be005f,9aa2c976-f799-414c-977e-97e35e060ed2,9bc2c323-9bc1-45d9-bf5b-434e3c8a4521,9bf07096-f56c-4c15-844b-935793ea5847,9dbca2c6-1bd9-4eb1-a406-cfa680bc1d24,a3fb419b-f307-45a0-805e-1e5e0ca0044e,a66b8d83-a2b4-4206-af51-8e1bf4c32707,aad26b34-aea2-41d1-b628-5621af22472d,b8e8e2e9-6b98-4558-b0ae-cd32da07f349,b94690b8-3063-4680-b06e-20595b06e647,b9a8f52a-499e-45af-ab75-899a28b1c1e2,ca43c600-333e-41dc-a544-2c24c27a1e40,cebc08cd-d00a-4568-b6a3-12ac198c11a9,dbff1822-cc3d-45e4-bea3-e5f22c187552,e727eccd-87b3-42fb-a767-32c659a1253e,ea790725-5b28-4ce6-a450-e094fd4fc178,fd226111-d4da-4af8-b603-4dde7873ba43}",
              "correlation": "0.275161"
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{0bfd9afb-285d-474b-86cc-c91ab64c5622,0c2096c3-6eca-4582-b2a1-2166d2c8d61e,18ebd05e-2357-44c6-a49d-d280ceed7784,22e64ff0-c283-47a4-a445-91f7f7194373,2806705a-9b9f-4437-b9bb-ca6489404484,2d7bd29f-85c0-4593-bdcf-eb2102445cfc,32f8ab9b-1259-4764-b463-aa2e70ca8c74,33443732-814b-4407-bbf0-8b30b57ef390,5200018e-14e6-46a0-8dff-2aa113ea6b8e,52128184-ee7e-44c6-8c65-31acee1b6843,56b37bdf-5f8b-4110-91b2-e55f6e83eb30,5e23dccd-8454-4c69-96a8-ec5b1d0ec54c,667be1e9-a840-4368-a40a-ed9e89dcf055,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,6e34ce3e-bbcd-4ba7-812e-32b0c39192fb,75e00430-067e-44af-b498-84b28edd51be,767cc150-1746-4d71-a8db-b9771f2f7770,78ba8339-270a-4d10-b7f6-f10999568948,813eac3e-b880-4988-823f-a345c5d6ed87,8481aae6-f7e9-41b1-9a93-77a9fd8e800f,9082191f-69ff-469f-baa6-46cc918346ae,a0a34603-1309-4c2c-9064-02e62cda7d41,a298edef-70b4-4805-95eb-f921c50c2838,a950fdd0-847e-4f4d-96f5-9064719c8953,b2466431-ede1-4eaa-a86e-ad0c7128b125,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,be32d4f4-d8a2-4ac4-8fb2-21879753581c,be3517a2-68e2-4884-85f9-18eb16eebdd0,c465ed34-a5df-42ef-9332-3273a72f4c4d,c83d54c5-3468-4fde-b2b6-220034bb7480,d31a40f9-1972-43e9-9864-277110c9e958,d3920bbc-a281-4b97-bc88-96315e38d3ba,d909f3d1-18e3-4637-9ab4-bd05e81f87af,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca,e790c8d4-4068-4f9e-b34f-633e392c562e,ee7ff6aa-3a38-47e7-92b5-060342521a61}",
              "correlation": "-0.112741"
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{c6d09fc5-3c97-4eac-965c-996615407fa4}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "xp_amount",
              "type": "integer",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 1,
              "most_common_values": "{5}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "transaction_type",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{RESERVE_REWARD}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{\"2025-01-10 00:20:31.186892+00\"}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            }
          ],
          "constraints": [
            {
              "name": "reserve_xp_transactions_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "reserve_xp_transactions_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "transaction_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "transaction_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "transaction_type",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "transaction_type",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "type": "UNIQUE",
              "column": "transaction_type",
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "transaction_type",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "reserve_xp_transactions_transaction_type_check",
              "type": "CHECK",
              "column": null,
              "foreign_table": "reserve_xp_transactions",
              "foreign_column": "transaction_type",
              "check_definition": "CHECK ((transaction_type = ANY (ARRAY['RESERVE_REWARD'::text, 'SLOT_DECLINE_PENALTY'::text])))",
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_158856_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_158856_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_158856_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_158856_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_158856_5_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "reserve_xp_update_trigger",
              "timing": "AFTER",
              "event": "INSERT",
              "statement": "EXECUTE FUNCTION handle_reserve_xp_transaction()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "reserve_xp_update_trigger",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION handle_reserve_xp_transaction()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "reserve_xp_transactions_pkey",
              "definition": "CREATE UNIQUE INDEX reserve_xp_transactions_pkey ON public.reserve_xp_transactions USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "reserve_xp_transactions_player_id_game_id_transaction_type_key",
              "definition": "CREATE UNIQUE INDEX reserve_xp_transactions_player_id_game_id_transaction_type_key ON public.reserve_xp_transactions USING btree (player_id, game_id, transaction_type)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0 100",
              "opclass": "10065 10065 3126",
              "storage_parameters": null
            },
            {
              "name": "reserve_xp_transactions_player_game_idx",
              "definition": "CREATE INDEX reserve_xp_transactions_player_game_idx ON public.reserve_xp_transactions USING btree (player_id, game_id)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0",
              "opclass": "10065 10065",
              "storage_parameters": null
            },
            {
              "name": "reserve_xp_transactions_created_at_idx",
              "definition": "CREATE INDEX reserve_xp_transactions_created_at_idx ON public.reserve_xp_transactions USING btree (created_at)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "3127",
              "storage_parameters": null
            },
            {
              "name": "idx_reserve_xp_transactions_player_game",
              "definition": "CREATE INDEX idx_reserve_xp_transactions_player_game ON public.reserve_xp_transactions USING btree (player_id, game_id)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0",
              "opclass": "10065 10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can insert and update XP transactions",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "INSERT",
              "definition": null,
              "with_check": "(EXISTS ( SELECT 1\n   FROM ((admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n     JOIN admin_permissions ap ON ((ar.id = ap.admin_role_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'MANAGE_XP'::text))))"
            },
            {
              "name": "Admins can manage all XP transactions",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "ALL",
              "definition": "(EXISTS ( SELECT 1\n   FROM ((admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n     JOIN admin_permissions ap ON ((ar.id = ap.admin_role_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'MANAGE_XP'::text))))",
              "with_check": null
            },
            {
              "name": "Admins can update XP transactions",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "(EXISTS ( SELECT 1\n   FROM ((admin_roles ar\n     JOIN players p ON ((p.id = ar.player_id)))\n     JOIN admin_permissions ap ON ((ar.id = ap.admin_role_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'MANAGE_XP'::text))))",
              "with_check": null
            },
            {
              "name": "Players can view their own XP transactions",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "(auth.uid() IN ( SELECT players.user_id\n   FROM players\n  WHERE (players.id = reserve_xp_transactions.player_id)))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "slot_offers",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "72 kB",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{008c5e91-540d-4551-9793-e39ea4c82426,015caeef-5b9e-4678-a4c3-affd3444cc13,2f6ff643-bf24-4ad8-a884-7949b7886979,31898447-b7eb-4096-9ea5-9460908cd473,363c873b-a2b7-487a-a0c5-3abe0cb1cbff,44d02296-5c81-4331-8822-9f978f2f9ddc,4511cc16-4486-49ab-b648-64feb1e3f306,4d2ee122-0d0e-44c2-bb40-53c60dba2505,62c16b90-a249-4b15-8aef-56aa11fa0880,97cd0254-d581-4ecc-ae8b-cf848913f8e3,af501653-c369-471f-9862-6b953dd10415,bab1ab8b-00e6-4be0-a4db-1baab5cb4a9e,fff2297e-1d43-4eff-ad91-aa623bdb499d}",
              "correlation": "0.203297"
            },
            {
              "name": "game_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 1,
              "most_common_values": "{96702b26-ca36-487e-9b0c-e60f261522d5}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "player_id",
              "type": "uuid",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{18ebd05e-2357-44c6-a49d-d280ceed7784,33443732-814b-4407-bbf0-8b30b57ef390,694e67d6-e9d9-49f9-9a8a-1ea4bada9ae4,8ad90589-7135-461f-b61d-272cbf3f6d04,9082191f-69ff-469f-baa6-46cc918346ae,a950fdd0-847e-4f4d-96f5-9064719c8953,b2466431-ede1-4eaa-a86e-ad0c7128b125,ba4d8e2a-5559-4cfe-a7a1-92e6d03efe65,bca1e452-a4c1-4ecc-bc95-8c17c3974e8d,be32d4f4-d8a2-4ac4-8fb2-21879753581c,be3517a2-68e2-4884-85f9-18eb16eebdd0,c465ed34-a5df-42ef-9332-3273a72f4c4d,e5472c2e-b3b7-4fa6-b1c7-f4221cb4beca}",
              "correlation": "-0.186813"
            },
            {
              "name": "status",
              "type": "USER-DEFINED",
              "nullable": "NO",
              "default": "'pending'::slot_offer_status",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.153846,
              "most_common_values": "{declined}",
              "most_common_frequencies": "{0.923077}",
              "histogram_bounds": null,
              "correlation": "0.637363"
            },
            {
              "name": "offered_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2025-01-07 16:40:10.096879+00\",\"2025-01-07 16:43:07.713679+00\",\"2025-01-07 16:43:09.67902+00\",\"2025-01-07 16:43:24.308184+00\",\"2025-01-07 16:43:29.611093+00\",\"2025-01-07 16:43:37.052732+00\",\"2025-01-07 16:43:37.822155+00\",\"2025-01-07 16:43:38.463852+00\",\"2025-01-07 16:43:39.246381+00\",\"2025-01-07 16:43:39.878478+00\",\"2025-01-07 16:43:40.50784+00\",\"2025-01-07 16:43:41.168814+00\",\"2025-01-07 16:43:43.018035+00\"}",
              "correlation": "0.994505"
            },
            {
              "name": "responded_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.923077,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2025-01-07 16:43:07.713679+00\",\"2025-01-07 16:43:09.67902+00\",\"2025-01-07 16:43:24.308184+00\",\"2025-01-07 16:43:29.611093+00\",\"2025-01-07 16:43:37.052732+00\",\"2025-01-07 16:43:37.822155+00\",\"2025-01-07 16:43:38.463852+00\",\"2025-01-07 16:43:39.246381+00\",\"2025-01-07 16:43:39.878478+00\",\"2025-01-07 16:43:40.50784+00\",\"2025-01-07 16:43:41.168814+00\",\"2025-01-07 16:43:43.018035+00\"}",
              "correlation": "1"
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2025-01-07 16:40:10.096879+00\",\"2025-01-07 16:43:07.713679+00\",\"2025-01-07 16:43:09.67902+00\",\"2025-01-07 16:43:24.308184+00\",\"2025-01-07 16:43:29.611093+00\",\"2025-01-07 16:43:37.052732+00\",\"2025-01-07 16:43:37.822155+00\",\"2025-01-07 16:43:38.463852+00\",\"2025-01-07 16:43:39.246381+00\",\"2025-01-07 16:43:39.878478+00\",\"2025-01-07 16:43:40.50784+00\",\"2025-01-07 16:43:41.168814+00\",\"2025-01-07 16:43:43.018035+00\"}",
              "correlation": "0.994505"
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "NO",
              "default": "now()",
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2025-01-07 16:40:10.096879+00\",\"2025-01-07 16:43:07.713679+00\",\"2025-01-07 16:43:09.67902+00\",\"2025-01-07 16:43:24.308184+00\",\"2025-01-07 16:43:29.611093+00\",\"2025-01-07 16:43:37.052732+00\",\"2025-01-07 16:43:37.822155+00\",\"2025-01-07 16:43:38.463852+00\",\"2025-01-07 16:43:39.246381+00\",\"2025-01-07 16:43:39.878478+00\",\"2025-01-07 16:43:40.50784+00\",\"2025-01-07 16:43:41.168814+00\",\"2025-01-07 16:43:43.018035+00\"}",
              "correlation": "0.994505"
            },
            {
              "name": "expires_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2025-01-07 16:52:24.81641+00\",\"2025-01-07 17:43:07.713679+00\",\"2025-01-07 17:43:09.67902+00\",\"2025-01-07 17:43:24.308184+00\",\"2025-01-07 17:43:29.611093+00\",\"2025-01-07 17:43:37.052732+00\",\"2025-01-07 17:43:37.822155+00\",\"2025-01-07 17:43:38.463852+00\",\"2025-01-07 17:43:39.246381+00\",\"2025-01-07 17:43:39.878478+00\",\"2025-01-07 17:43:40.50784+00\",\"2025-01-07 17:43:41.168814+00\",\"2025-01-07 17:43:43.018035+00\"}",
              "correlation": "0.994505"
            },
            {
              "name": "available_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -1,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2025-01-07 16:40:10.096879+00\",\"2025-01-07 16:43:07.713679+00\",\"2025-01-07 16:43:09.67902+00\",\"2025-01-07 16:43:24.308184+00\",\"2025-01-07 16:43:29.611093+00\",\"2025-01-07 16:43:37.052732+00\",\"2025-01-07 16:43:37.822155+00\",\"2025-01-07 16:43:38.463852+00\",\"2025-01-07 16:43:39.246381+00\",\"2025-01-07 16:43:39.878478+00\",\"2025-01-07 16:43:40.50784+00\",\"2025-01-07 16:43:41.168814+00\",\"2025-01-07 16:43:43.018035+00\"}",
              "correlation": "0.994505"
            },
            {
              "name": "rank",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "accepted_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": 0,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "declined_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 13,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.923077,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": "{\"2025-01-07 16:43:07.713679+00\",\"2025-01-07 16:43:09.67902+00\",\"2025-01-07 16:43:24.308184+00\",\"2025-01-07 16:43:29.611093+00\",\"2025-01-07 16:43:37.052732+00\",\"2025-01-07 16:43:37.822155+00\",\"2025-01-07 16:43:38.463852+00\",\"2025-01-07 16:43:39.246381+00\",\"2025-01-07 16:43:39.878478+00\",\"2025-01-07 16:43:40.50784+00\",\"2025-01-07 16:43:41.168814+00\",\"2025-01-07 16:43:43.018035+00\"}",
              "correlation": "1"
            },
            {
              "name": "priority",
              "type": "integer",
              "nullable": "YES",
              "default": "1",
              "description": null,
              "position": 14,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": 1,
              "most_common_values": "{1}",
              "most_common_frequencies": "{1}",
              "histogram_bounds": null,
              "correlation": "1"
            },
            {
              "name": "admin_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 15,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0769231,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "dropped_out_player_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 16,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": -0.0769231,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "slot_offers_admin_id_fkey",
              "type": "FOREIGN KEY",
              "column": "admin_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "slot_offers_dropped_out_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "dropped_out_player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "slot_offers_game_id_fkey",
              "type": "FOREIGN KEY",
              "column": "game_id",
              "foreign_table": "games",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "slot_offers",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "slot_offers",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "game_id",
              "foreign_table": "slot_offers",
              "foreign_column": "status",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "slot_offers",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "slot_offers",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "player_id",
              "foreign_table": "slot_offers",
              "foreign_column": "status",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "status",
              "foreign_table": "slot_offers",
              "foreign_column": "game_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "status",
              "foreign_table": "slot_offers",
              "foreign_column": "player_id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "type": "UNIQUE",
              "column": "status",
              "foreign_table": "slot_offers",
              "foreign_column": "status",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "slot_offers",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "slot_offers_player_id_fkey",
              "type": "FOREIGN KEY",
              "column": "player_id",
              "foreign_table": "players",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "NO ACTION"
            },
            {
              "name": "2200_127245_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_5_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_7_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127245_8_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": [
            {
              "name": "slot_decline_penalty_trigger",
              "timing": "AFTER",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION handle_slot_decline_penalty()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            },
            {
              "name": "slot_offer_response_trigger",
              "timing": "BEFORE",
              "event": "UPDATE",
              "statement": "EXECUTE FUNCTION handle_slot_offer_response()",
              "orientation": "ROW",
              "old_table": null,
              "new_table": null
            }
          ],
          "indexes": [
            {
              "name": "slot_offers_game_id_player_id_status_key",
              "definition": "CREATE UNIQUE INDEX slot_offers_game_id_player_id_status_key ON public.slot_offers USING btree (game_id, player_id, status)",
              "is_unique": true,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0 0",
              "opclass": "10065 10065 10069",
              "storage_parameters": null
            },
            {
              "name": "slot_offers_pkey",
              "definition": "CREATE UNIQUE INDEX slot_offers_pkey ON public.slot_offers USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            },
            {
              "name": "idx_slot_offers_game_player",
              "definition": "CREATE INDEX idx_slot_offers_game_player ON public.slot_offers USING btree (game_id, player_id)",
              "is_unique": false,
              "is_primary": false,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0 0",
              "opclass": "10065 10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Admins can manage slot offers",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "ALL",
              "definition": "(EXISTS ( SELECT 1\n   FROM ((admin_permissions ap\n     JOIN admin_roles ar ON ((ap.admin_role_id = ar.id)))\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text))))",
              "with_check": "(EXISTS ( SELECT 1\n   FROM ((admin_permissions ap\n     JOIN admin_roles ar ON ((ap.admin_role_id = ar.id)))\n     JOIN players p ON ((p.id = ar.player_id)))\n  WHERE ((p.user_id = auth.uid()) AND (ap.permission = 'manage_games'::text))))"
            },
            {
              "name": "Anyone can view all slot offers",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            },
            {
              "name": "Players can update their own slot offers",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "UPDATE",
              "definition": "(player_id IN ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid())))",
              "with_check": "(player_id IN ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid())))"
            },
            {
              "name": "Players can view their own slot offers",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "SELECT",
              "definition": "(player_id IN ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid())))",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "venue_presets",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "32 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "venue_id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "name",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "day_of_week",
              "type": "USER-DEFINED",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "start_time",
              "type": "time without time zone",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "registration_hours_before",
              "type": "integer",
              "nullable": "NO",
              "default": "48",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "registration_hours_until",
              "type": "integer",
              "nullable": "NO",
              "default": "1",
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "CURRENT_TIMESTAMP",
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "pitch_cost",
              "type": "numeric",
              "nullable": "YES",
              "default": "0",
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 10,
              "numeric_scale": 2,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "team_announcement_hours",
              "type": "integer",
              "nullable": "NO",
              "default": "4",
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "venue_presets_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "venue_presets",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "venue_presets_venue_id_fkey",
              "type": "FOREIGN KEY",
              "column": "venue_id",
              "foreign_table": "venues",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": "NO ACTION",
              "delete_rule": "CASCADE"
            },
            {
              "name": "2200_127254_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_4_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_5_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_6_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_7_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127254_11_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "venue_presets_pkey",
              "definition": "CREATE UNIQUE INDEX venue_presets_pkey ON public.venue_presets USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": [
            {
              "name": "Allow admin write access",
              "permissive": "PERMISSIVE",
              "roles": [
                "authenticated"
              ],
              "command": "ALL",
              "definition": "(EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.user_id = auth.uid()) AND (players.is_admin = true))))",
              "with_check": null
            },
            {
              "name": "Allow public read access",
              "permissive": "PERMISSIVE",
              "roles": [
                "public"
              ],
              "command": "SELECT",
              "definition": "true",
              "with_check": null
            }
          ]
        },
        {
          "table_name": "venues",
          "table_type": "BASE TABLE",
          "description": null,
          "total_size": "32 kB",
          "estimated_rows": 1,
          "storage_parameters": null,
          "replica_identity": "d",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "NO",
              "default": "uuid_generate_v4()",
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "name",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "address",
              "type": "text",
              "nullable": "NO",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "is_default",
              "type": "boolean",
              "nullable": "YES",
              "default": "false",
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "created_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "updated_at",
              "type": "timestamp with time zone",
              "nullable": "YES",
              "default": "now()",
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "google_maps_url",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": [
            {
              "name": "venues_pkey",
              "type": "PRIMARY KEY",
              "column": "id",
              "foreign_table": "venues",
              "foreign_column": "id",
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127266_1_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127266_2_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            },
            {
              "name": "2200_127266_3_not_null",
              "type": "CHECK",
              "column": null,
              "foreign_table": null,
              "foreign_column": null,
              "check_definition": null,
              "update_rule": null,
              "delete_rule": null
            }
          ],
          "triggers": null,
          "indexes": [
            {
              "name": "venues_pkey",
              "definition": "CREATE UNIQUE INDEX venues_pkey ON public.venues USING btree (id)",
              "is_unique": true,
              "is_primary": true,
              "is_exclusion": false,
              "is_immediate": true,
              "partial_predicate": null,
              "collation": "0",
              "opclass": "10065",
              "storage_parameters": null
            }
          ],
          "rls_policies": null
        },
        {
          "table_name": "xp_comparison",
          "table_type": "VIEW",
          "description": null,
          "total_size": "0 bytes",
          "estimated_rows": 0,
          "storage_parameters": null,
          "replica_identity": "n",
          "columns": [
            {
              "name": "id",
              "type": "uuid",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 1,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "friendly_name",
              "type": "text",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 2,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 3,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 4,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "active_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 5,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "current_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 6,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "game_sequences",
              "type": "ARRAY",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 7,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": null,
              "numeric_scale": null,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "database_xp",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 8,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "frontend_caps",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 9,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "frontend_bonuses",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 10,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "frontend_penalties",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 11,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            },
            {
              "name": "frontend_streak",
              "type": "integer",
              "nullable": "YES",
              "default": null,
              "description": null,
              "position": 12,
              "identity_generation": null,
              "is_generated": "NEVER",
              "generation_expression": null,
              "numeric_precision": 32,
              "numeric_scale": 0,
              "n_distinct": null,
              "most_common_values": null,
              "most_common_frequencies": null,
              "histogram_bounds": null,
              "correlation": null
            }
          ],
          "constraints": null,
          "triggers": null,
          "indexes": null,
          "rls_policies": null
        }
      ],
      "enums": [
        {
          "name": "admin_permission",
          "values": [
            "manage_games",
            "manage_players",
            "manage_teams",
            "manage_payments",
            "manage_admins",
            "manage_history"
          ],
          "description": null
        },
        {
          "name": "day_of_week",
          "values": [
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday"
          ],
          "description": null
        },
        {
          "name": "game_status",
          "values": [
            "open",
            "upcoming",
            "players_announced",
            "teams_announced",
            "completed"
          ],
          "description": null
        },
        {
          "name": "notification_type",
          "values": [
            "slot_offer",
            "admin_slot_offer",
            "game_update",
            "system_message",
            "payment_request",
            "game_reminder",
            "team_selection"
          ],
          "description": "Types of notifications that can be sent to users"
        },
        {
          "name": "slot_offer_status",
          "values": [
            "pending",
            "accepted",
            "declined",
            "expired",
            "voided"
          ],
          "description": null
        }
      ],
      "sequences": [
        {
          "name": "debug_logs_id_seq",
          "type": "bigint",
          "start": "1",
          "min": "1",
          "max": "9223372036854775807",
          "increment": "1",
          "cycle": "NO"
        }
      ],
      "functions": [
        {
          "name": "update_bench_warmer_streak",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_bench_warmer_streak()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Update bench_warmer_streak for the affected player\r\n    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN\r\n        UPDATE players\r\n        SET bench_warmer_streak = calculate_bench_warmer_streak(NEW.player_id)\r\n        WHERE id = NEW.player_id;\r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_next_slot_offer_players",
          "arguments": "p_game_id uuid, p_hours_until_game numeric",
          "return_type": "TABLE(player_id uuid)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_next_slot_offer_players(p_game_id uuid, p_hours_until_game numeric)\n RETURNS TABLE(player_id uuid)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_selected_player uuid;\r\n    v_selected_name text;\r\n    v_selected_xp integer;\r\n    v_selected_whatsapp text;\r\nBEGIN\r\n    -- First get the next eligible player and store their details\r\n    WITH eligible_players AS (\r\n        SELECT \r\n            p.id as eligible_player_id,\r\n            p.friendly_name,\r\n            p.whatsapp_group_member,\r\n            gr.created_at,\r\n            ps.xp,\r\n            p.current_streak,\r\n            p.caps\r\n        FROM game_registrations gr\r\n        INNER JOIN players p ON p.id = gr.player_id\r\n        INNER JOIN player_stats ps ON ps.id = p.id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n        AND NOT EXISTS (\r\n            SELECT 1 \r\n            FROM slot_offers so \r\n            WHERE so.game_id = p_game_id \r\n            AND so.player_id = p.id \r\n            AND so.status IN ('pending', 'declined')\r\n        )\r\n    )\r\n    SELECT \r\n        eligible_player_id,\r\n        friendly_name,\r\n        xp,\r\n        whatsapp_group_member\r\n    INTO \r\n        v_selected_player,\r\n        v_selected_name,\r\n        v_selected_xp,\r\n        v_selected_whatsapp\r\n    FROM eligible_players\r\n    ORDER BY \r\n        CASE WHEN whatsapp_group_member IN ('Yes', 'Proxy') THEN 0 ELSE 1 END ASC,\r\n        xp DESC,\r\n        current_streak DESC,\r\n        caps DESC,\r\n        created_at ASC\r\n    LIMIT 1;\r\n\r\n    -- Log the selection process\r\n    IF v_selected_player IS NOT NULL THEN\r\n        INSERT INTO debug_logs (event_type, message, details)\r\n        VALUES (\r\n            'player_selection',\r\n            'Selected next player based on WhatsApp status and XP',\r\n            jsonb_build_object(\r\n                'game_id', p_game_id,\r\n                'selected_player', v_selected_player,\r\n                'player_name', v_selected_name,\r\n                'xp', v_selected_xp,\r\n                'whatsapp_status', v_selected_whatsapp,\r\n                'selection_criteria', 'WhatsApp members first, then by XP'\r\n            )\r\n        );\r\n    ELSE\r\n        INSERT INTO debug_logs (event_type, message, details)\r\n        VALUES (\r\n            'player_selection',\r\n            'No eligible players found',\r\n            jsonb_build_object(\r\n                'game_id', p_game_id\r\n            )\r\n        );\r\n    END IF;\r\n\r\n    -- Return the selected player\r\n    RETURN QUERY\r\n    SELECT v_selected_player AS player_id\r\n    WHERE v_selected_player IS NOT NULL;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_slot_offer_times",
          "arguments": "p_game_id uuid, p_num_players bigint",
          "return_type": "TABLE(player_rank bigint, available_time timestamp with time zone, next_player_access_time timestamp with time zone, debug_info jsonb)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_slot_offer_times(p_game_id uuid, p_num_players bigint)\n RETURNS TABLE(player_rank bigint, available_time timestamp with time zone, next_player_access_time timestamp with time zone, debug_info jsonb)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_total_time interval;\r\n    v_time_interval interval;\r\n    v_game_date timestamp with time zone;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT * INTO v_game FROM games WHERE id = p_game_id;\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Game not found';\r\n    END IF;\r\n\r\n    -- Calculate time intervals\r\n    v_game_date := date_trunc('day', v_game.date) + interval '1 minute';\r\n    v_total_time := v_game_date - CURRENT_TIMESTAMP;\r\n    \r\n    -- Handle case where there are no players\r\n    IF p_num_players = 0 THEN\r\n        RETURN;\r\n    END IF;\r\n    \r\n    v_time_interval := v_total_time / GREATEST(p_num_players, 1);\r\n\r\n    -- Return the results with debug info\r\n    RETURN QUERY\r\n    WITH RankedPlayers AS (\r\n        SELECT \r\n            p.id,\r\n            p.friendly_name,\r\n            p.whatsapp_group_member,\r\n            ps.xp,\r\n            p.current_streak,\r\n            p.caps,\r\n            gr.created_at as registration_time,\r\n            ROW_NUMBER() OVER (\r\n                ORDER BY \r\n                    CASE WHEN p.whatsapp_group_member IN ('Yes', 'Proxy') THEN 0 ELSE 1 END ASC,\r\n                    ps.xp DESC,\r\n                    p.current_streak DESC,\r\n                    p.caps DESC,\r\n                    gr.created_at ASC\r\n            ) as rank\r\n        FROM game_registrations gr\r\n        JOIN players p ON p.id = gr.player_id\r\n        JOIN player_stats ps ON ps.id = p.id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n    )\r\n    SELECT \r\n        rank as player_rank,\r\n        CURRENT_TIMESTAMP + ((rank - 1) * v_time_interval) as available_time,\r\n        CURRENT_TIMESTAMP + (rank * v_time_interval) as next_player_access_time,\r\n        jsonb_build_object(\r\n            'player_name', friendly_name,\r\n            'whatsapp_status', whatsapp_group_member,\r\n            'xp', xp,\r\n            'streak', current_streak,\r\n            'caps', caps,\r\n            'registration_time', registration_time,\r\n            'rank', rank,\r\n            'whatsapp_priority', CASE WHEN whatsapp_group_member IN ('Yes', 'Proxy') THEN 0 ELSE 1 END\r\n        ) as debug_info\r\n    FROM RankedPlayers\r\n    ORDER BY rank;\r\n\r\n    -- Log debug info\r\n    RAISE NOTICE 'Game ID: %, Total Players: %, Time Interval: %', p_game_id, p_num_players, v_time_interval;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_slot_offers_for_game",
          "arguments": "p_game_id uuid, p_admin_id uuid DEFAULT NULL::uuid, p_dropped_out_player_id uuid DEFAULT NULL::uuid",
          "return_type": "TABLE(slot_offer_id uuid, debug_info jsonb)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_slot_offers_for_game(p_game_id uuid, p_admin_id uuid DEFAULT NULL::uuid, p_dropped_out_player_id uuid DEFAULT NULL::uuid)\n RETURNS TABLE(slot_offer_id uuid, debug_info jsonb)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_highest_priority_player record;\r\n    v_time_slot record;\r\n    v_reserve_count bigint;\r\n    v_slot_offer_id uuid;\r\n    v_debug_info jsonb;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT * INTO v_game FROM games WHERE id = p_game_id;\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Game not found';\r\n    END IF;\r\n\r\n    -- Get the count of reserve players\r\n    SELECT COUNT(*) INTO v_reserve_count \r\n    FROM game_registrations \r\n    WHERE game_id = p_game_id \r\n    AND status = 'reserve';\r\n\r\n    -- Get the highest priority reserve player\r\n    WITH RankedPlayers AS (\r\n        SELECT \r\n            gr.player_id,\r\n            p.friendly_name,\r\n            p.whatsapp_group_member,\r\n            ps.xp,\r\n            p.current_streak,\r\n            p.caps,\r\n            gr.created_at as registration_time,\r\n            ROW_NUMBER() OVER (\r\n                ORDER BY \r\n                    CASE WHEN p.whatsapp_group_member IN ('Yes', 'Proxy') THEN 0 ELSE 1 END ASC,\r\n                    ps.xp DESC,\r\n                    p.current_streak DESC,\r\n                    p.caps DESC,\r\n                    gr.created_at ASC\r\n            ) as rank\r\n        FROM game_registrations gr\r\n        JOIN players p ON p.id = gr.player_id\r\n        JOIN player_stats ps ON ps.id = p.id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n        AND NOT EXISTS (\r\n            -- Exclude players who already have any slot offer (pending or declined) for this game\r\n            SELECT 1 FROM slot_offers so\r\n            WHERE so.player_id = gr.player_id\r\n            AND so.game_id = p_game_id\r\n            AND (so.status = 'pending' OR so.status = 'declined')\r\n        )\r\n    )\r\n    SELECT * INTO v_highest_priority_player\r\n    FROM RankedPlayers\r\n    WHERE rank = 1;\r\n\r\n    -- If no eligible player found, return null\r\n    IF NOT FOUND THEN\r\n        RETURN;\r\n    END IF;\r\n\r\n    -- Get the time slot for the highest priority player with debug info\r\n    SELECT * INTO v_time_slot\r\n    FROM public.calculate_slot_offer_times(p_game_id, v_reserve_count)\r\n    WHERE player_rank = 1;\r\n\r\n    -- Store debug info\r\n    v_debug_info := jsonb_build_object(\r\n        'highest_priority_player', jsonb_build_object(\r\n            'name', v_highest_priority_player.friendly_name,\r\n            'whatsapp_status', v_highest_priority_player.whatsapp_group_member,\r\n            'xp', v_highest_priority_player.xp,\r\n            'rank', v_highest_priority_player.rank\r\n        ),\r\n        'time_slot', jsonb_build_object(\r\n            'available_at', v_time_slot.available_time,\r\n            'expires_at', v_time_slot.next_player_access_time\r\n        ),\r\n        'reserve_count', v_reserve_count,\r\n        'calculated_times_debug', v_time_slot.debug_info\r\n    );\r\n\r\n    -- Create slot offer\r\n    INSERT INTO slot_offers (\r\n        game_id,\r\n        player_id,\r\n        status,\r\n        available_at,\r\n        expires_at,\r\n        admin_id,\r\n        dropped_out_player_id,\r\n        priority\r\n    ) VALUES (\r\n        p_game_id,\r\n        v_highest_priority_player.player_id,\r\n        'pending',\r\n        v_time_slot.available_time,\r\n        v_time_slot.next_player_access_time,\r\n        p_admin_id,\r\n        p_dropped_out_player_id,\r\n        1\r\n    ) RETURNING id INTO v_slot_offer_id;\r\n\r\n    -- Create notification for the eligible player\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    ) VALUES (\r\n        v_highest_priority_player.player_id,\r\n        'slot_offer',\r\n        format('A spot has opened up in a game on %s. You have exclusive access until %s!',\r\n               to_char(v_game.date, 'DD/MM/YYYY'),\r\n               to_char(v_time_slot.next_player_access_time, 'HH24:MI')),\r\n        jsonb_build_object(\r\n            'game_id', p_game_id,\r\n            'slot_offer_id', v_slot_offer_id,\r\n            'exclusive_until', v_time_slot.next_player_access_time,\r\n            'debug_info', v_debug_info\r\n        ),\r\n        'Exclusive Game Slot Available!',\r\n        2\r\n    );\r\n\r\n    -- Return both the slot offer ID and debug info\r\n    RETURN QUERY\r\n    SELECT v_slot_offer_id, v_debug_info;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "admin_recalculate_all_player_streaks",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.admin_recalculate_all_player_streaks()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    player_rec RECORD;\r\nBEGIN\r\n    -- Check if user is admin or super admin\r\n    IF NOT EXISTS (\r\n        SELECT 1 \r\n        FROM players \r\n        WHERE user_id = auth.uid() \r\n        AND (is_admin = true OR is_super_admin = true)\r\n    ) THEN\r\n        RAISE EXCEPTION 'Unauthorized: User does not have admin permissions';\r\n    END IF;\r\n\r\n    -- Loop through each player and recalculate their streaks\r\n    FOR player_rec IN SELECT id FROM players\r\n    LOOP\r\n        UPDATE players\r\n        SET \r\n            current_streak = calculate_player_streak(player_rec.id),\r\n            bench_warmer_streak = calculate_bench_warmer_streak(player_rec.id)\r\n        WHERE id = player_rec.id;\r\n    END LOOP;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "process_reserve_xp",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.process_reserve_xp()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Get the latest game number for calculating games_ago\r\n    WITH latest_game AS (\r\n        SELECT MAX(sequence_number) as max_seq\r\n        FROM games \r\n        WHERE completed = true\r\n    )\r\n    -- Insert reserve rewards for eligible players with tapering\r\n    INSERT INTO reserve_xp_transactions (player_id, game_id, xp_amount, transaction_type)\r\n    SELECT DISTINCT\r\n        gr.player_id,\r\n        gr.game_id,\r\n        CASE\r\n            WHEN (latest.max_seq - g.sequence_number) BETWEEN 0 AND 39 THEN \r\n                5 * (40 - (latest.max_seq - g.sequence_number)) / 40  -- Linear taper from 5 to 0 over 40 games\r\n            ELSE 0  -- No XP for games older than 40 games ago\r\n        END as xp_amount,\r\n        'RESERVE_REWARD' as transaction_type\r\n    FROM game_registrations gr\r\n    JOIN games g ON g.id = gr.game_id\r\n    CROSS JOIN latest_game latest\r\n    LEFT JOIN reserve_xp_transactions rxp \r\n        ON rxp.player_id = gr.player_id \r\n        AND rxp.game_id = gr.game_id\r\n        AND rxp.transaction_type = 'RESERVE_REWARD'\r\n    WHERE \r\n        gr.status = 'reserve'\r\n        AND g.date < CURRENT_TIMESTAMP\r\n        AND g.status = 'completed'  -- Only award XP for completed games\r\n        AND rxp.id IS NULL\r\n        -- Ensure player wasn't moved from reserve to selected\r\n        AND NOT EXISTS (\r\n            SELECT 1 \r\n            FROM game_registrations gr2\r\n            WHERE gr2.game_id = gr.game_id\r\n            AND gr2.player_id = gr.player_id\r\n            AND gr2.status = 'selected'\r\n        );\r\n\r\n    -- Update player_xp table with new XP\r\n    UPDATE player_xp px\r\n    SET \r\n        xp = calculate_player_xp(px.player_id),\r\n        last_calculated = CURRENT_TIMESTAMP\r\n    WHERE EXISTS (\r\n        SELECT 1 \r\n        FROM reserve_xp_transactions rt\r\n        WHERE rt.player_id = px.player_id\r\n        AND rt.created_at > px.last_calculated\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "process_game_completion",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.process_game_completion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Only process if the game is being marked as completed\r\n    IF NEW.status = 'completed' AND OLD.status != 'completed' THEN\r\n        -- Get the latest game number for calculating games_ago\r\n        WITH latest_game AS (\r\n            SELECT MAX(sequence_number) as max_seq\r\n            FROM games \r\n            WHERE completed = true\r\n        )\r\n        -- Insert reserve rewards for eligible players with tapering\r\n        INSERT INTO reserve_xp_transactions (\r\n            player_id,\r\n            game_id,\r\n            xp_amount,\r\n            transaction_type\r\n        )\r\n        SELECT \r\n            gr.player_id,\r\n            gr.game_id,\r\n            CASE\r\n                WHEN (latest.max_seq - NEW.sequence_number) BETWEEN 0 AND 39 THEN \r\n                    5 * (40 - (latest.max_seq - NEW.sequence_number)) / 40  -- Linear taper from 5 to 0 over 40 games\r\n                ELSE 0  -- No XP for games older than 40 games ago\r\n            END as xp_amount,\r\n            'RESERVE_REWARD' as transaction_type\r\n        FROM game_registrations gr\r\n        CROSS JOIN latest_game latest\r\n        WHERE gr.game_id = NEW.id\r\n        AND gr.status = 'reserve'\r\n        AND NOT EXISTS (\r\n            SELECT 1 \r\n            FROM reserve_xp_transactions rt \r\n            WHERE rt.player_id = gr.player_id \r\n            AND rt.game_id = gr.game_id\r\n        );\r\n\r\n        -- Update player XP for all affected players\r\n        UPDATE player_xp px\r\n        SET \r\n            xp = calculate_player_xp(px.player_id),\r\n            last_calculated = CURRENT_TIMESTAMP\r\n        FROM game_registrations gr\r\n        WHERE gr.game_id = NEW.id\r\n        AND gr.player_id = px.player_id;\r\n    END IF;\r\n\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_all_player_xp",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_all_player_xp()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_player record;\r\nBEGIN\r\n    FOR v_player IN SELECT id FROM players LOOP\r\n        PERFORM calculate_player_xp(v_player.id);\r\n    END LOOP;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_game_registration_xp",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_game_registration_xp()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Update player XP using the calculate_player_xp function\r\n    INSERT INTO player_xp (player_id, xp, last_calculated)\r\n    VALUES (\r\n        NEW.player_id, \r\n        calculate_player_xp(NEW.player_id), \r\n        CURRENT_TIMESTAMP\r\n    )\r\n    ON CONFLICT (player_id) \r\n    DO UPDATE SET \r\n        xp = EXCLUDED.xp,\r\n        last_calculated = EXCLUDED.last_calculated;\r\n\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_acceptance",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_acceptance()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    IF NEW.status = 'accepted' AND OLD.status != 'accepted' THEN\r\n        -- Update the game registration status\r\n        UPDATE game_registrations\r\n        SET \r\n            status = 'selected',\r\n            selection_method = 'slot_offer'  -- Using the correct allowed value\r\n        WHERE game_id = NEW.game_id\r\n        AND player_id = NEW.player_id;\r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_streaks_on_game_completion",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_streaks_on_game_completion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- When a game is marked as completed\r\n    IF (TG_OP = 'UPDATE' AND NEW.completed = true AND (OLD.completed = false OR OLD.completed IS NULL)) THEN\r\n        -- Update streaks for all players in this game\r\n        UPDATE players p\r\n        SET \r\n            current_streak = calculate_player_streak(p.id),\r\n            bench_warmer_streak = calculate_bench_warmer_streak(p.id)\r\n        FROM game_registrations gr\r\n        WHERE gr.game_id = NEW.id \r\n        AND gr.player_id = p.id;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "maintenance_cleanup_debug_logs",
          "arguments": "p_hours_to_retain integer DEFAULT 24",
          "return_type": "jsonb",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.maintenance_cleanup_debug_logs(p_hours_to_retain integer DEFAULT 24)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_deleted_count integer;\r\n    v_result jsonb;\r\nBEGIN\r\n    -- Delete logs older than specified hours and get count of deleted rows\r\n    WITH deleted AS (\r\n        DELETE FROM debug_logs \r\n        WHERE timestamp < NOW() - (p_hours_to_retain || ' hours')::interval\r\n        RETURNING *\r\n    )\r\n    SELECT COUNT(*) INTO v_deleted_count FROM deleted;\r\n\r\n    -- Create result object\r\n    v_result := jsonb_build_object(\r\n        'deleted_count', v_deleted_count,\r\n        'cleanup_time', NOW()::text,\r\n        'retention_hours', p_hours_to_retain,\r\n        'remaining_logs', (SELECT COUNT(*) FROM debug_logs)\r\n    );\r\n\r\n    -- Log the cleanup operation itself\r\n    INSERT INTO debug_logs (\r\n        event_type,\r\n        message,\r\n        details\r\n    ) VALUES (\r\n        'maintenance',\r\n        'Cleaned up old debug logs',\r\n        v_result\r\n    );\r\n\r\n    RETURN v_result;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_ranks",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_ranks()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Update ranks for all players based on XP\r\n    WITH ranked_players AS (\r\n        SELECT \r\n            player_id,\r\n            ROW_NUMBER() OVER (ORDER BY xp DESC) as new_rank\r\n        FROM player_xp\r\n        WHERE xp > 0\r\n    )\r\n    UPDATE player_xp px\r\n    SET rank = rp.new_rank\r\n    FROM ranked_players rp\r\n    WHERE px.player_id = rp.player_id;\r\n\r\n    -- Set rank to NULL for players with 0 XP\r\n    UPDATE player_xp\r\n    SET rank = NULL\r\n    WHERE xp = 0;\r\n\r\n    RETURN NULL;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_game_registration_status",
          "arguments": "p_registration_id uuid, p_old_status text, p_new_status text",
          "return_type": "boolean",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_game_registration_status(p_registration_id uuid, p_old_status text, p_new_status text)\n RETURNS boolean\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  v_updated boolean;\r\nBEGIN\r\n  -- Update the registration status only if it matches the old status\r\n  UPDATE game_registrations\r\n  SET status = p_new_status,\r\n      updated_at = NOW()\r\n  WHERE id = p_registration_id\r\n    AND status = p_old_status;\r\n\r\n  -- Check if a row was updated\r\n  GET DIAGNOSTICS v_updated = ROW_COUNT;\r\n  \r\n  -- Return true if a row was updated, false otherwise\r\n  RETURN v_updated > 0;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_win_rates",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, total_games integer, wins integer, draws integer, losses integer, win_rate numeric)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_win_rates(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, total_games integer, wins integer, draws integer, losses integer, win_rate numeric)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    WITH player_games AS (\r\n        SELECT \r\n            p.id,\r\n            p.friendly_name,\r\n            g.outcome,\r\n            gr.team,\r\n            -- Count players on each team\r\n            (SELECT COUNT(*) FILTER (WHERE team = 'blue' AND status = 'selected') \r\n             FROM game_registrations gr2 \r\n             WHERE gr2.game_id = g.id) as blue_count,\r\n            (SELECT COUNT(*) FILTER (WHERE team = 'orange' AND status = 'selected') \r\n             FROM game_registrations gr2 \r\n             WHERE gr2.game_id = g.id) as orange_count,\r\n            -- Determine result for each player\r\n            CASE \r\n                WHEN g.outcome = 'draw' THEN 'draw'\r\n                WHEN (gr.team = 'blue' AND g.outcome = 'blue_win') OR \r\n                     (gr.team = 'orange' AND g.outcome = 'orange_win') THEN 'win'\r\n                WHEN (gr.team = 'blue' AND g.outcome = 'orange_win') OR \r\n                     (gr.team = 'orange' AND g.outcome = 'blue_win') THEN 'loss'\r\n            END as player_result\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN games g ON g.id = gr.game_id\r\n        WHERE gr.status = 'selected'\r\n        AND g.outcome IS NOT NULL\r\n        AND (target_year IS NULL OR EXTRACT(YEAR FROM g.date) = target_year)\r\n    )\r\n    SELECT \r\n        p.id,\r\n        p.friendly_name,\r\n        -- Count all games with even teams\r\n        COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count)::integer as total_games,\r\n        COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count AND pg.player_result = 'win')::integer as wins,\r\n        COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count AND pg.player_result = 'draw')::integer as draws,\r\n        COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count AND pg.player_result = 'loss')::integer as losses,\r\n        -- Calculate win rate percentage only if they have 10+ games\r\n        CASE \r\n            WHEN COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count) >= 10 THEN\r\n                ROUND(\r\n                    COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count AND pg.player_result = 'win')::numeric / \r\n                    NULLIF(COUNT(*) FILTER (WHERE pg.blue_count = pg.orange_count), 0) * 100,\r\n                    1\r\n                )\r\n            ELSE NULL\r\n        END as win_rate\r\n    FROM players p\r\n    LEFT JOIN player_games pg ON pg.id = p.id\r\n    GROUP BY p.id, p.friendly_name\r\n    ORDER BY win_rate DESC NULLS LAST;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_rank",
          "arguments": "player_uuid uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_rank(player_uuid uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN (\r\n        SELECT rank\r\n        FROM player_xp\r\n        WHERE player_id = player_uuid\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response",
          "arguments": "p_offer_id uuid, p_status slot_offer_status",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response(p_offer_id uuid, p_status slot_offer_status)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_game_id UUID;\r\n  v_player_id UUID;\r\n  v_game_date TIMESTAMP WITH TIME ZONE;\r\n  v_game_number INTEGER;\r\n  v_hours_until_game NUMERIC;\r\n  v_next_players UUID[];\r\n  v_current_selected_players JSONB;\r\nBEGIN\r\n  -- Get the offer details\r\n  SELECT \r\n    game_id,\r\n    player_id,\r\n    g.date,\r\n    COUNT(g2.*) + 1,\r\n    EXTRACT(EPOCH FROM (g.date - NOW())) / 3600 \r\n    INTO v_game_id, v_player_id, v_game_date, v_game_number, v_hours_until_game\r\n  FROM slot_offers so\r\n  JOIN games g ON g.id = so.game_id\r\n  LEFT JOIN games g2 ON g2.date < g.date OR (g2.date = g.date AND g2.id < g.id)\r\n  WHERE so.id = p_offer_id\r\n  GROUP BY so.game_id, so.player_id, g.date;\r\n\r\n  IF p_status = 'accepted' THEN\r\n    -- Get current selected players from game_selections\r\n    SELECT COALESCE(selected_players, '[]'::jsonb)\r\n    INTO v_current_selected_players\r\n    FROM game_selections\r\n    WHERE game_id = v_game_id;\r\n\r\n    -- If no game_selections entry exists, create one\r\n    IF NOT FOUND THEN\r\n      INSERT INTO game_selections (game_id, selected_players)\r\n      VALUES (v_game_id, '[]'::jsonb)\r\n      RETURNING selected_players INTO v_current_selected_players;\r\n    END IF;\r\n\r\n    -- Add the new player to selected_players if not already present\r\n    IF NOT v_current_selected_players ? v_player_id::text THEN\r\n      UPDATE game_selections\r\n      SET selected_players = (\r\n        SELECT jsonb_agg(value)\r\n        FROM (\r\n          SELECT * FROM jsonb_array_elements(v_current_selected_players)\r\n          UNION ALL\r\n          SELECT to_jsonb(v_player_id::text)\r\n        ) t\r\n      )\r\n      WHERE game_id = v_game_id;\r\n    END IF;\r\n\r\n    -- Update game registration status\r\n    UPDATE game_registrations\r\n    SET status = 'selected'\r\n    WHERE game_id = v_game_id AND player_id = v_player_id;\r\n\r\n    -- Update other pending offers to voided\r\n    UPDATE slot_offers\r\n    SET \r\n      status = 'voided',\r\n      responded_at = NOW()\r\n    WHERE \r\n      game_id = v_game_id \r\n      AND id != p_offer_id \r\n      AND status = 'pending';\r\n\r\n  ELSIF p_status = 'declined' THEN\r\n    -- Get next eligible players\r\n    SELECT ARRAY(\r\n      SELECT player_id \r\n      FROM get_next_slot_offer_players(v_game_id, v_hours_until_game)\r\n      LIMIT 1\r\n    ) INTO v_next_players;\r\n\r\n    -- Create new offers for next eligible players\r\n    IF array_length(v_next_players, 1) > 0 THEN\r\n      INSERT INTO slot_offers (\r\n        game_id,\r\n        player_id,\r\n        status,\r\n        offered_at,\r\n        expires_at,\r\n        available_at\r\n      )\r\n      SELECT \r\n        v_game_id,\r\n        player_id,\r\n        'pending'::slot_offer_status,\r\n        NOW(),\r\n        NOW() + INTERVAL '1 hour',\r\n        NOW()\r\n      FROM unnest(v_next_players) AS player_id;\r\n    END IF;\r\n  END IF;\r\n\r\n  -- Update the slot offer status\r\n  UPDATE slot_offers\r\n  SET \r\n    status = p_status,\r\n    responded_at = NOW(),\r\n    accepted_at = CASE WHEN p_status = 'accepted' THEN NOW() ELSE NULL END,\r\n    declined_at = CASE WHEN p_status = 'declined' THEN NOW() ELSE NULL END\r\n  WHERE id = p_offer_id;\r\n\r\nEND;\r\n$function$\n"
        },
        {
          "name": "process_reserve_xp_rewards",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.process_reserve_xp_rewards()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Insert reserve rewards for eligible players\r\n    INSERT INTO reserve_xp_transactions (player_id, game_id, xp_amount, transaction_type)\r\n    SELECT DISTINCT\r\n        gr.player_id,\r\n        gr.game_id,\r\n        5 as xp_amount,\r\n        'RESERVE_REWARD' as transaction_type\r\n    FROM game_registrations gr\r\n    JOIN games g ON g.id = gr.game_id\r\n    LEFT JOIN reserve_xp_transactions rxp \r\n        ON rxp.player_id = gr.player_id \r\n        AND rxp.game_id = gr.game_id\r\n        AND rxp.transaction_type = 'RESERVE_REWARD'\r\n    WHERE \r\n        gr.status = 'reserve'\r\n        AND g.date < CURRENT_TIMESTAMP\r\n        AND g.status = 'completed'  -- Only award XP for completed games\r\n        AND rxp.id IS NULL\r\n        -- Ensure player wasn't moved from reserve to selected\r\n        AND NOT EXISTS (\r\n            SELECT 1 \r\n            FROM game_registrations gr2\r\n            WHERE gr2.game_id = gr.game_id\r\n            AND gr2.player_id = gr.player_id\r\n            AND gr2.status = 'selected'\r\n        );\r\n\r\n    -- Update player_xp table with new XP\r\n    UPDATE player_xp px\r\n    SET \r\n        xp = px.xp + (\r\n            SELECT COALESCE(SUM(xp_amount), 0)\r\n            FROM reserve_xp_transactions rt\r\n            WHERE rt.player_id = px.player_id\r\n            AND rt.created_at > px.last_calculated\r\n        ),\r\n        last_calculated = CURRENT_TIMESTAMP\r\n    WHERE EXISTS (\r\n        SELECT 1 \r\n        FROM reserve_xp_transactions rt\r\n        WHERE rt.player_id = px.player_id\r\n        AND rt.created_at > px.last_calculated\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_xp",
          "arguments": "p_player_id uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_xp(p_player_id uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_base_xp integer;\r\n    v_streak_multiplier decimal;\r\n    v_bench_warmer_multiplier decimal;\r\n    v_reserve_xp integer;\r\n    v_final_xp integer;\r\n    v_latest_game_number integer;\r\nBEGIN\r\n    -- Get the latest game number from ALL games\r\n    SELECT MAX(sequence_number) INTO v_latest_game_number FROM games WHERE completed = true;\r\n\r\n    -- Calculate base XP from game participation (only for selected players)\r\n    WITH player_games AS (\r\n        SELECT \r\n            g.id,\r\n            g.sequence_number,\r\n            gr.status,\r\n            (v_latest_game_number - g.sequence_number) as games_ago  -- Calculate based on global game count\r\n        FROM game_registrations gr\r\n        JOIN games g ON g.id = gr.game_id\r\n        WHERE gr.player_id = p_player_id\r\n        AND g.completed = true\r\n        AND gr.status = 'selected'  -- Only include selected games\r\n        ORDER BY g.sequence_number DESC\r\n    ),\r\n    game_weights AS (\r\n        SELECT \r\n            id,\r\n            sequence_number,\r\n            games_ago,\r\n            CASE\r\n                WHEN games_ago = 0 THEN 20   -- Most recent historical game\r\n                WHEN games_ago BETWEEN 1 AND 2 THEN 18   -- 1-2 games ago\r\n                WHEN games_ago BETWEEN 3 AND 4 THEN 16   -- 3-4 games ago\r\n                WHEN games_ago BETWEEN 5 AND 9 THEN 14   -- 5-9 games ago\r\n                WHEN games_ago BETWEEN 10 AND 19 THEN 12  -- 10-19 games ago\r\n                WHEN games_ago BETWEEN 20 AND 29 THEN 10  -- 20-29 games ago\r\n                WHEN games_ago BETWEEN 30 AND 39 THEN 5   -- 30-39 games ago\r\n                ELSE 0                        -- 40+ games ago\r\n            END as weight\r\n        FROM player_games\r\n    )\r\n    SELECT COALESCE(SUM(weight), 0)\r\n    INTO v_base_xp \r\n    FROM game_weights;\r\n\r\n    -- Get reserve XP (flat +5 for being reserve, -10 for declining slots)\r\n    SELECT \r\n        COALESCE(SUM(xp_amount), 0)\r\n    INTO v_reserve_xp\r\n    FROM reserve_xp_transactions\r\n    WHERE player_id = p_player_id;\r\n\r\n    -- Add reserve XP to base XP before multipliers\r\n    v_base_xp := v_base_xp + v_reserve_xp;\r\n\r\n    -- Get streak multiplier (applies to all XP)\r\n    -- +10% per streak level\r\n    SELECT \r\n        COALESCE(1 + (current_streak * 0.1), 1)\r\n    INTO v_streak_multiplier\r\n    FROM players\r\n    WHERE id = p_player_id;\r\n\r\n    -- Get bench warmer streak multiplier\r\n    -- +5% per bench warmer streak level\r\n    SELECT \r\n        COALESCE(1 + (bench_warmer_streak * 0.05), 1)\r\n    INTO v_bench_warmer_multiplier\r\n    FROM players\r\n    WHERE id = p_player_id;\r\n\r\n    -- Calculate final XP\r\n    -- All XP gets both streak multipliers\r\n    v_final_xp := (v_base_xp * v_streak_multiplier * v_bench_warmer_multiplier)::integer;\r\n    \r\n    RETURN v_final_xp;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "recalculate_all_player_xp",
          "arguments": "",
          "return_type": "TABLE(player_id uuid, old_xp integer, new_xp integer, friendly_name text)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.recalculate_all_player_xp()\n RETURNS TABLE(player_id uuid, old_xp integer, new_xp integer, friendly_name text)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- First, get the old XP values\r\n    CREATE TEMP TABLE temp_old_xp AS\r\n    SELECT px.player_id as px_player_id, px.xp as old_xp\r\n    FROM player_xp px;\r\n\r\n    -- Then update all XP values\r\n    WITH updated_xp AS (\r\n        UPDATE player_xp px\r\n        SET \r\n            xp = calculate_player_xp(px.player_id),\r\n            last_calculated = CURRENT_TIMESTAMP\r\n        FROM players p\r\n        WHERE px.player_id = p.id\r\n        RETURNING px.player_id, px.xp as new_xp\r\n    )\r\n    -- Insert for any players that don't have an XP record\r\n    INSERT INTO player_xp (player_id, xp, last_calculated)\r\n    SELECT \r\n        p.id,\r\n        calculate_player_xp(p.id),\r\n        CURRENT_TIMESTAMP\r\n    FROM players p\r\n    WHERE NOT EXISTS (\r\n        SELECT 1 FROM player_xp px WHERE px.player_id = p.id\r\n    );\r\n\r\n    -- Return the results showing changes\r\n    RETURN QUERY\r\n    SELECT \r\n        px.player_id,\r\n        COALESCE(t.old_xp, 0),\r\n        px.xp as new_xp,\r\n        p.friendly_name\r\n    FROM player_xp px\r\n    JOIN players p ON p.id = px.player_id\r\n    LEFT JOIN temp_old_xp t ON t.px_player_id = px.player_id\r\n    WHERE COALESCE(t.old_xp, 0) != px.xp\r\n    ORDER BY ABS(px.xp - COALESCE(t.old_xp, 0)) DESC;\r\n\r\n    -- Clean up\r\n    DROP TABLE temp_old_xp;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "recalculate_player_xp",
          "arguments": "target_player_id uuid",
          "return_type": "TABLE(old_xp integer, new_xp integer, friendly_name text)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.recalculate_player_xp(target_player_id uuid)\n RETURNS TABLE(old_xp integer, new_xp integer, friendly_name text)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_old_xp integer;\r\nBEGIN\r\n    -- Get old XP value\r\n    SELECT px.xp INTO v_old_xp\r\n    FROM player_xp px\r\n    WHERE px.player_id = target_player_id;\r\n\r\n    RETURN QUERY\r\n    WITH new_value AS (\r\n        INSERT INTO player_xp (player_id, xp, last_calculated)\r\n        SELECT \r\n            target_player_id,\r\n            calculate_player_xp(target_player_id),\r\n            CURRENT_TIMESTAMP\r\n        ON CONFLICT (player_id) DO UPDATE\r\n        SET \r\n            xp = EXCLUDED.xp,\r\n            last_calculated = EXCLUDED.last_calculated\r\n        RETURNING xp as new_xp\r\n    )\r\n    SELECT \r\n        COALESCE(v_old_xp, 0) as old_xp,\r\n        nv.new_xp,\r\n        p.friendly_name\r\n    FROM new_value nv\r\n    JOIN players p ON p.id = target_player_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_xp_on_streak_change",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_xp_on_streak_change()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- If bench_warmer_streak or current_streak has changed\r\n    IF (TG_OP = 'UPDATE' AND (\r\n        NEW.bench_warmer_streak IS DISTINCT FROM OLD.bench_warmer_streak OR \r\n        NEW.current_streak IS DISTINCT FROM OLD.current_streak\r\n    )) THEN\r\n        -- Update player_xp table\r\n        INSERT INTO player_xp (player_id, xp, last_calculated)\r\n        VALUES (\r\n            NEW.id,\r\n            calculate_player_xp(NEW.id),\r\n            CURRENT_TIMESTAMP\r\n        )\r\n        ON CONFLICT (player_id) \r\n        DO UPDATE SET \r\n            xp = EXCLUDED.xp,\r\n            last_calculated = EXCLUDED.last_calculated;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_suggested_players_to_rate",
          "arguments": "current_player_id uuid, min_games_together integer DEFAULT 5",
          "return_type": "TABLE(id uuid, friendly_name text, games_together bigint, total_players_played_with bigint, total_players_rated bigint, max_games_with_any_player bigint, status text, next_eligible_count bigint)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_suggested_players_to_rate(current_player_id uuid, min_games_together integer DEFAULT 5)\n RETURNS TABLE(id uuid, friendly_name text, games_together bigint, total_players_played_with bigint, total_players_rated bigint, max_games_with_any_player bigint, status text, next_eligible_count bigint)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\ndeclare\r\n  total_played bigint;\r\n  total_rated bigint;\r\n  max_games bigint;\r\n  almost_eligible bigint;\r\nbegin\r\n  -- Get players close to being eligible (3-4 games)\r\n  select count(*)\r\n  into almost_eligible\r\n  from (\r\n    select count(distinct g.id) as games\r\n    from games g\r\n    join game_registrations gr1 on g.id = gr1.game_id\r\n    join game_registrations gr2 on g.id = gr2.game_id\r\n    where gr1.player_id = current_player_id\r\n    and gr2.player_id != current_player_id\r\n    and g.status = 'open'\r\n    and g.date < NOW()\r\n    group by gr2.player_id\r\n    having count(distinct g.id) between 3 and 4\r\n  ) as almost;\r\n\r\n  -- Get total players played with and max games\r\n  with player_games as (\r\n    select distinct \r\n      g.id as game_id,\r\n      p.id as player_id,\r\n      p.friendly_name as player_name\r\n    from games g\r\n    join game_registrations gr1 on g.id = gr1.game_id\r\n    join game_registrations gr2 on g.id = gr2.game_id\r\n    join players p on gr2.player_id = p.id\r\n    where gr1.player_id = current_player_id\r\n    and g.status = 'open'\r\n    and g.date < NOW()\r\n    and gr2.player_id != current_player_id\r\n  ),\r\n  games_count as (\r\n    select \r\n      player_id,\r\n      player_name,\r\n      count(*) as games_count\r\n    from player_games\r\n    group by player_id, player_name\r\n  )\r\n  select \r\n    count(distinct player_id),\r\n    coalesce(max(games_count), 0)\r\n  into\r\n    total_played,\r\n    max_games\r\n  from games_count;\r\n\r\n  -- Get total players rated\r\n  select count(distinct rated_player_id)\r\n  into total_rated\r\n  from player_ratings\r\n  where rater_id = current_player_id;\r\n\r\n  -- Get player to rate if available\r\n  return query\r\n  with games_together as (\r\n    select \r\n      p.id as player_id,\r\n      p.friendly_name as player_name,\r\n      count(distinct g.id) as games_count\r\n    from games g\r\n    join game_registrations gr1 on g.id = gr1.game_id\r\n    join game_registrations gr2 on g.id = gr2.game_id\r\n    join players p on gr2.player_id = p.id\r\n    where gr1.player_id = current_player_id\r\n    and gr2.player_id != current_player_id\r\n    and g.status = 'open'\r\n    and g.date < NOW()\r\n    group by p.id, p.friendly_name\r\n    having count(distinct g.id) >= min_games_together\r\n  ),\r\n  existing_ratings as (\r\n    select distinct rated_player_id\r\n    from player_ratings\r\n    where rater_id = current_player_id\r\n  ),\r\n  player_to_rate as (\r\n    select \r\n      gt.player_id as id,\r\n      gt.player_name as friendly_name,\r\n      gt.games_count as games_together\r\n    from games_together gt\r\n    left join existing_ratings er on gt.player_id = er.rated_player_id\r\n    where er.rated_player_id is null\r\n    order by gt.games_count desc\r\n    limit 1\r\n  )\r\n  select \r\n    ptr.id,\r\n    ptr.friendly_name,\r\n    ptr.games_together,\r\n    total_played,\r\n    total_rated,\r\n    max_games,\r\n    case\r\n      when total_played = 0 then 'No past games found'\r\n      when max_games < min_games_together then \r\n        format('Need to play at least %s games with a player (current max: %s games)', min_games_together, max_games)\r\n      when total_rated >= total_played then \r\n        format('You''ve rated all %s eligible players! (%s/%s players have played %s+ games with you)', \r\n          total_rated, total_rated, total_played, min_games_together)\r\n      else 'Player available to rate'\r\n    end as status,\r\n    almost_eligible as next_eligible_count\r\n  from player_to_rate ptr\r\n  union all\r\n  select \r\n    null::uuid,\r\n    null::text,\r\n    0::bigint,\r\n    total_played,\r\n    total_rated,\r\n    max_games,\r\n    case\r\n      when total_played = 0 then 'No past games found'\r\n      when max_games < min_games_together then \r\n        format('Need to play at least %s games with a player (current max: %s games)', min_games_together, max_games)\r\n      when total_rated >= total_played then \r\n        format('You''ve rated all %s eligible players! (%s/%s players have played %s+ games with you)%s', \r\n          total_rated, total_rated, total_played, min_games_together,\r\n          case when almost_eligible > 0 \r\n            then format(E'\\n%s players are close to being eligible (3-4 games played)', almost_eligible)\r\n            else ''\r\n          end)\r\n      else 'No players to rate'\r\n    end as status,\r\n    almost_eligible as next_eligible_count\r\n  where not exists (select 1 from player_to_rate)\r\n  limit 1;\r\nend;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_selected_count integer;\r\n    v_dropped_count integer;\r\n    v_active_selected integer;\r\n    v_current_selected_players jsonb;\r\nBEGIN\r\n    -- Only handle status changes\r\n    IF NEW.status = OLD.status THEN\r\n        RETURN NEW;\r\n    END IF;\r\n\r\n    -- Log the start of processing\r\n    INSERT INTO debug_logs (event_type, message, details)\r\n    VALUES (\r\n        'slot_offer_response',\r\n        'Processing slot offer response',\r\n        jsonb_build_object(\r\n            'old_status', OLD.status,\r\n            'new_status', NEW.status,\r\n            'game_id', NEW.game_id,\r\n            'player_id', NEW.player_id\r\n        )\r\n    );\r\n\r\n    -- Get current counts and game date\r\n    SELECT \r\n        g.*,\r\n        COUNT(*) FILTER (WHERE gr.status = 'selected') as selected_count,\r\n        COUNT(*) FILTER (WHERE gr.status = 'dropped_out') as dropped_count\r\n    INTO v_game\r\n    FROM games g\r\n    LEFT JOIN game_registrations gr ON gr.game_id = g.id\r\n    WHERE g.id = NEW.game_id\r\n    GROUP BY g.id;\r\n\r\n    -- Calculate active selected players\r\n    v_active_selected := v_game.selected_count - v_game.dropped_count;\r\n\r\n    -- Handle accepted status\r\n    IF NEW.status = 'accepted' THEN\r\n        -- First check if game_selections record exists\r\n        IF NOT EXISTS (SELECT 1 FROM game_selections WHERE game_id = NEW.game_id) THEN\r\n            -- Create new record if it doesn't exist\r\n            INSERT INTO game_selections (\r\n                game_id,\r\n                selected_players,\r\n                reserve_players,\r\n                selection_metadata\r\n            )\r\n            VALUES (\r\n                NEW.game_id,\r\n                jsonb_build_array(NEW.player_id::text),\r\n                '[]'::jsonb,\r\n                '{}'::jsonb\r\n            );\r\n        ELSE\r\n            -- Update existing record\r\n            UPDATE game_selections\r\n            SET selected_players = (\r\n                CASE \r\n                    WHEN selected_players IS NULL THEN jsonb_build_array(NEW.player_id::text)\r\n                    ELSE selected_players || jsonb_build_array(NEW.player_id::text)\r\n                END\r\n            )\r\n            WHERE game_id = NEW.game_id;\r\n        END IF;\r\n\r\n        -- Update game registration\r\n        UPDATE game_registrations\r\n        SET status = 'selected'\r\n        WHERE game_id = NEW.game_id\r\n        AND player_id = NEW.player_id;\r\n\r\n        NEW.responded_at := NOW();\r\n        NEW.accepted_at := NOW();\r\n    ELSIF NEW.status IN ('declined', 'expired', 'voided') THEN\r\n        NEW.responded_at := NOW();\r\n        NEW.declined_at := CASE WHEN NEW.status = 'declined' THEN NOW() ELSE NULL END;\r\n    END IF;\r\n\r\n    -- Log game stats\r\n    INSERT INTO debug_logs (event_type, message, details)\r\n    VALUES (\r\n        'game_stats',\r\n        'Game statistics',\r\n        jsonb_build_object(\r\n            'game_id', NEW.game_id,\r\n            'max_players', v_game.max_players,\r\n            'selected_count', v_game.selected_count,\r\n            'dropped_count', v_game.dropped_count,\r\n            'active_selected', v_active_selected\r\n        )\r\n    );\r\n\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_game_sequences",
          "arguments": "",
          "return_type": "TABLE(player_id uuid, game_sequences bigint[])",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_game_sequences()\n RETURNS TABLE(player_id uuid, game_sequences bigint[])\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  WITH game_numbers AS (\r\n    SELECT \r\n      gr.player_id,\r\n      g.id as game_id,\r\n      ROW_NUMBER() OVER (PARTITION BY gr.player_id ORDER BY g.date DESC) as game_sequence\r\n    FROM game_registrations gr\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE gr.status = 'selected'\r\n  )\r\n  SELECT \r\n    gn.player_id,\r\n    ARRAY_AGG(gn.game_sequence ORDER BY gn.game_sequence) as game_sequences\r\n  FROM game_numbers gn\r\n  GROUP BY gn.player_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_streak",
          "arguments": "",
          "return_type": "trigger",
          "description": "Updates player streak based on consecutive selected games. Any non-selected game (including reserve) breaks the streak.",
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_streak()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Only update streak for status changes that affect past games\r\n    IF EXISTS (\r\n        SELECT 1 \r\n        FROM games g \r\n        WHERE g.id = NEW.game_id \r\n        AND g.date < NOW()\r\n    ) THEN\r\n        UPDATE players \r\n        SET current_streak = calculate_player_streak(NEW.player_id)\r\n        WHERE id = NEW.player_id;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "balance_teams",
          "arguments": "game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.balance_teams(game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    total_players INTEGER;\r\n    team_size INTEGER;\r\n    player_record RECORD;\r\n    best_difference DECIMAL := 999999;\r\n    current_attempt INTEGER := 0;\r\n    max_attempts INTEGER := 1000;\r\n    best_team_assignments JSONB;\r\n    current_blue_team UUID[];\r\n    current_orange_team UUID[];\r\n    difference DECIMAL;\r\nBEGIN\r\n    -- Get the total number of selected players for this game\r\n    SELECT COUNT(*) INTO total_players\r\n    FROM game_selections\r\n    WHERE game_id = $1 AND status = 'selected';\r\n\r\n    -- Calculate team size (rounded down for even teams)\r\n    team_size := total_players / 2;\r\n\r\n    -- Create temporary table for player ratings\r\n    CREATE TEMP TABLE temp_player_ratings AS\r\n    SELECT \r\n        gs.player_id,\r\n        COALESCE(AVG(pr.attack_rating), 5) as avg_attack,\r\n        COALESCE(AVG(pr.defense_rating), 5) as avg_defense,\r\n        COALESCE(\r\n            (SELECT CAST(COUNT(CASE WHEN g.outcome = 'Blue Win' AND gs2.team = 'Blue' \r\n                                  OR g.outcome = 'Orange Win' AND gs2.team = 'Orange' \r\n                             THEN 1 END) AS DECIMAL) / \r\n                    NULLIF(COUNT(*), 0)\r\n             FROM game_selections gs2\r\n             JOIN games g ON g.id = gs2.game_id\r\n             WHERE gs2.player_id = gs.player_id\r\n               AND g.outcome IS NOT NULL\r\n            ), 0.5\r\n        ) as win_rate\r\n    FROM game_selections gs\r\n    LEFT JOIN player_ratings pr ON pr.rated_player_id = gs.player_id\r\n    WHERE gs.game_id = $1 AND gs.status = 'selected'\r\n    GROUP BY gs.player_id;\r\n\r\n    -- Try different combinations\r\n    WHILE current_attempt < max_attempts LOOP\r\n        -- Get random team assignments\r\n        WITH shuffled_players AS (\r\n            SELECT \r\n                player_id,\r\n                avg_attack,\r\n                avg_defense,\r\n                win_rate,\r\n                ROW_NUMBER() OVER (ORDER BY random()) as rn\r\n            FROM temp_player_ratings\r\n        )\r\n        SELECT \r\n            array_agg(CASE WHEN rn <= team_size THEN player_id END) FILTER (WHERE rn <= team_size),\r\n            array_agg(CASE WHEN rn > team_size THEN player_id END) FILTER (WHERE rn > team_size)\r\n        INTO current_blue_team, current_orange_team\r\n        FROM shuffled_players;\r\n\r\n        -- Calculate team stats\r\n        WITH team_stats AS (\r\n            SELECT \r\n                'Blue' as team,\r\n                AVG(avg_attack) as team_attack,\r\n                AVG(avg_defense) as team_defense,\r\n                AVG(win_rate) as team_win_rate\r\n            FROM temp_player_ratings\r\n            WHERE player_id = ANY(current_blue_team)\r\n            UNION ALL\r\n            SELECT \r\n                'Orange' as team,\r\n                AVG(avg_attack) as team_attack,\r\n                AVG(avg_defense) as team_defense,\r\n                AVG(win_rate) as team_win_rate\r\n            FROM temp_player_ratings\r\n            WHERE player_id = ANY(current_orange_team)\r\n        )\r\n        SELECT \r\n            ABS(MAX(CASE WHEN team = 'Blue' THEN team_attack END) - \r\n                MAX(CASE WHEN team = 'Orange' THEN team_attack END)) +\r\n            ABS(MAX(CASE WHEN team = 'Blue' THEN team_defense END) - \r\n                MAX(CASE WHEN team = 'Orange' THEN team_defense END)) +\r\n            ABS(MAX(CASE WHEN team = 'Blue' THEN team_win_rate END) - \r\n                MAX(CASE WHEN team = 'Orange' THEN team_win_rate END))\r\n        INTO difference\r\n        FROM team_stats;\r\n\r\n        -- Update best teams if current difference is lower\r\n        IF difference < best_difference THEN\r\n            best_difference := difference;\r\n            best_team_assignments := jsonb_build_object(\r\n                'blue', current_blue_team,\r\n                'orange', current_orange_team,\r\n                'difference', difference\r\n            );\r\n        END IF;\r\n\r\n        current_attempt := current_attempt + 1;\r\n    END LOOP;\r\n\r\n    -- Update game_selections with the best team assignments\r\n    UPDATE game_selections\r\n    SET team = 'Blue'\r\n    WHERE game_id = $1 \r\n    AND player_id = ANY((best_team_assignments->>'blue')::uuid[]);\r\n\r\n    UPDATE game_selections\r\n    SET team = 'Orange'\r\n    WHERE game_id = $1 \r\n    AND player_id = ANY((best_team_assignments->>'orange')::uuid[]);\r\n\r\n    -- Clean up\r\n    DROP TABLE temp_player_ratings;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "add_admin_role",
          "arguments": "p_player_id uuid, p_permissions text[]",
          "return_type": "uuid",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.add_admin_role(p_player_id uuid, p_permissions text[])\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_role_id UUID;\r\nBEGIN\r\n    -- Insert or get admin role\r\n    INSERT INTO admin_roles (player_id)\r\n    VALUES (p_player_id)\r\n    ON CONFLICT (player_id) DO UPDATE\r\n    SET updated_at = NOW()\r\n    RETURNING id INTO v_role_id;\r\n\r\n    -- Add permissions\r\n    INSERT INTO admin_permissions (admin_role_id, permission)\r\n    SELECT v_role_id, unnest(p_permissions)\r\n    ON CONFLICT (admin_role_id, permission) DO NOTHING;\r\n\r\n    RETURN v_role_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_game_completion_reserve_xp",
          "arguments": "",
          "return_type": "trigger",
          "description": "Trigger function that awards +5 XP to reserve players when a game is completed.",
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_game_completion_reserve_xp()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Only process if the game is being marked as completed\r\n    IF NEW.completed = true AND (OLD.completed = false OR OLD.completed IS NULL) THEN\r\n        -- Insert reserve rewards for eligible players\r\n        INSERT INTO reserve_xp_transactions (\r\n            player_id,\r\n            game_id,\r\n            xp_amount,\r\n            transaction_type\r\n        )\r\n        SELECT \r\n            (rp->>'id')::uuid as player_id,\r\n            NEW.id as game_id,\r\n            5 as xp_amount,\r\n            'RESERVE_REWARD' as transaction_type  -- Changed from RESERVE_BONUS to RESERVE_REWARD\r\n        FROM game_selections gs\r\n        CROSS JOIN jsonb_array_elements(gs.reserve_players) as rp\r\n        JOIN game_registrations gr ON gr.game_id = NEW.id AND gr.player_id = (rp->>'id')::uuid\r\n        WHERE gs.game_id = NEW.id\r\n        AND gr.status = 'reserve'\r\n        AND NOT EXISTS (\r\n            SELECT 1 \r\n            FROM reserve_xp_transactions rt \r\n            WHERE rt.player_id = (rp->>'id')::uuid\r\n            AND rt.game_id = NEW.id\r\n        );\r\n\r\n        -- Update player XP for all affected players\r\n        UPDATE player_xp px\r\n        SET \r\n            xp = calculate_player_xp(px.player_id),\r\n            last_calculated = CURRENT_TIMESTAMP\r\n        FROM game_selections gs\r\n        CROSS JOIN jsonb_array_elements(gs.reserve_players) as rp\r\n        WHERE gs.game_id = NEW.id\r\n        AND (rp->>'id')::uuid = px.player_id;\r\n    END IF;\r\n\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_streaks",
          "arguments": "player_id uuid",
          "return_type": "TABLE(current_streak integer, max_streak integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_streaks(player_id uuid)\n RETURNS TABLE(current_streak integer, max_streak integer)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  WITH consecutive_games AS (\r\n    SELECT \r\n      g.date::date,\r\n      g.is_historical,\r\n      gr.status,\r\n      g.sequence_number,\r\n      CASE \r\n        WHEN gr.status = 'selected' THEN 0\r\n        ELSE 1\r\n      END as streak_break,\r\n      SUM(CASE \r\n        WHEN gr.status = 'selected' THEN 0\r\n        ELSE 1\r\n      END) OVER (ORDER BY g.sequence_number) as streak_group\r\n    FROM games g\r\n    LEFT JOIN game_registrations gr \r\n      ON gr.game_id = g.id \r\n      AND gr.player_id = calculate_player_streaks.player_id\r\n    WHERE g.status = 'completed'\r\n    ORDER BY g.sequence_number DESC\r\n  ),\r\n  streak_lengths AS (\r\n    SELECT \r\n      streak_group,\r\n      (COUNT(*)::integer - SUM(streak_break)::integer)::integer as streak_length,\r\n      ROW_NUMBER() OVER (ORDER BY MIN(sequence_number) DESC) as group_order\r\n    FROM consecutive_games\r\n    GROUP BY streak_group\r\n    HAVING (COUNT(*)::integer - SUM(streak_break)::integer) > 0\r\n  )\r\n  SELECT \r\n    COALESCE((\r\n      SELECT streak_length::integer \r\n      FROM streak_lengths \r\n      WHERE group_order = 1\r\n    ), 0)::integer as current_streak,\r\n    COALESCE((\r\n      SELECT MAX(streak_length)::integer \r\n      FROM streak_lengths\r\n    ), 0)::integer as max_streak;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_caps",
          "arguments": "player_id uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_caps(player_id uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    caps_count INTEGER;\r\nBEGIN\r\n    SELECT COUNT(DISTINCT gr.game_id)\r\n    INTO caps_count\r\n    FROM game_registrations gr\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE gr.player_id = calculate_player_caps.player_id\r\n    AND gr.team IS NOT NULL; -- Only count actual players, not reserves\r\n\r\n    RETURN caps_count;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "check_rating_eligibility",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.check_rating_eligibility()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    IF check_games_played_together(NEW.rater_id, NEW.rated_player_id) < 5 THEN\r\n        RAISE EXCEPTION 'Players must have played at least 5 games together before rating';\r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_game_years",
          "arguments": "",
          "return_type": "TABLE(year integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_game_years()\n RETURNS TABLE(year integer)\n LANGUAGE plpgsql\nAS $function$\r\n#variable_conflict use_column\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT DISTINCT \r\n    date_part('year', date)::integer as year\r\n  FROM games\r\n  WHERE date <= CURRENT_TIMESTAMP\r\n  AND completed = true  -- Only include completed games\r\n  ORDER BY year DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "check_games_played_together",
          "arguments": "player1_id uuid, player2_id uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.check_games_played_together(player1_id uuid, player2_id uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    games_count INTEGER;\r\nBEGIN\r\n    SELECT COUNT(*) INTO games_count\r\n    FROM game_selections gs1\r\n    JOIN game_selections gs2 ON gs1.game_id = gs2.game_id\r\n    WHERE gs1.player_id = player1_id \r\n    AND gs2.player_id = player2_id\r\n    AND gs1.game_id IN (\r\n        SELECT id FROM games WHERE completed = true\r\n    );\r\n    RETURN games_count;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "check_game_completion_status",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.check_game_completion_status()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- Check if game is more than 1 hour past kickoff and still in teams_announced status\r\n  IF NEW.status = 'teams_announced' AND \r\n     NEW.date < (NOW() - INTERVAL '1 hour') THEN\r\n    NEW.status := 'pending_completion';\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "check_game_registration_permissions",
          "arguments": "p_game_id uuid, p_player_id uuid",
          "return_type": "boolean",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.check_game_registration_permissions(p_game_id uuid, p_player_id uuid)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_is_admin boolean;\r\n    v_is_owner boolean;\r\nBEGIN\r\n    -- Check if the current user is an admin\r\n    SELECT is_admin INTO v_is_admin\r\n    FROM players\r\n    WHERE id = auth.uid();\r\n\r\n    -- Check if the current user owns this registration\r\n    SELECT (auth.uid() = p_player_id) INTO v_is_owner;\r\n\r\n    -- Return true if user is admin or owns the registration\r\n    RETURN v_is_admin OR v_is_owner;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_new_game",
          "arguments": "p_date timestamp with time zone, p_registration_window_start timestamp with time zone, p_registration_window_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2",
          "return_type": "uuid",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_new_game(p_date timestamp with time zone, p_registration_window_start timestamp with time zone, p_registration_window_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2)\n RETURNS uuid\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game_id uuid;\r\nBEGIN\r\n    -- Validate dates\r\n    IF p_registration_window_start >= p_registration_window_end THEN\r\n        RAISE EXCEPTION 'Registration start must be before registration end';\r\n    END IF;\r\n    \r\n    IF p_registration_window_end > p_date THEN\r\n        RAISE EXCEPTION 'Registration must end before game starts';\r\n    END IF;\r\n\r\n    -- Insert the game with initial status\r\n    INSERT INTO games (\r\n        date,\r\n        registration_window_start,\r\n        registration_window_end,\r\n        status,\r\n        needs_completion,\r\n        is_historical,\r\n        teams_announced,\r\n        completed,\r\n        random_slots,\r\n        max_players\r\n    ) VALUES (\r\n        p_date,\r\n        p_registration_window_start,\r\n        p_registration_window_end,\r\n        'created',\r\n        false,\r\n        false,\r\n        false,\r\n        false,\r\n        p_random_slots,\r\n        p_max_players\r\n    )\r\n    RETURNING id INTO v_game_id;\r\n\r\n    RETURN v_game_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_rarity_on_xp_change",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_rarity_on_xp_change()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  IF TG_OP = 'UPDATE' AND NEW.xp <> OLD.xp THEN\r\n    PERFORM calculate_player_rarity();\r\n  ELSIF TG_OP = 'INSERT' THEN\r\n    PERFORM calculate_player_rarity();\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_rarity",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_rarity()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  WITH player_rankings AS (\r\n    SELECT \r\n      player_id,\r\n      xp,\r\n      CASE\r\n        WHEN percent_rank() OVER (ORDER BY xp DESC) <= 0.02 THEN 'Legendary'\r\n        WHEN percent_rank() OVER (ORDER BY xp DESC) <= 0.07 THEN 'World Class'\r\n        WHEN percent_rank() OVER (ORDER BY xp DESC) <= 0.20 THEN 'Professional'\r\n        WHEN percent_rank() OVER (ORDER BY xp DESC) <= 0.40 THEN 'Semi Pro'\r\n        ELSE 'Amateur'\r\n      END as calculated_rarity\r\n    FROM player_xp\r\n  )\r\n  UPDATE player_xp\r\n  SET rarity = pr.calculated_rarity\r\n  FROM player_rankings pr\r\n  WHERE player_xp.player_id = pr.player_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_xp",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_xp()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- When a game is marked as completed\r\n    IF (TG_OP = 'UPDATE' AND NEW.completed = true AND (OLD.completed = false OR OLD.completed IS NULL)) THEN\r\n        -- Update XP for all players who participated in this game\r\n        INSERT INTO player_xp (player_id, xp, last_calculated)\r\n        SELECT \r\n            gr.player_id,\r\n            calculate_player_xp(gr.player_id),\r\n            CURRENT_TIMESTAMP\r\n        FROM game_registrations gr\r\n        WHERE gr.game_id = NEW.id\r\n        ON CONFLICT (player_id) DO UPDATE\r\n        SET \r\n            xp = EXCLUDED.xp,\r\n            last_calculated = EXCLUDED.last_calculated;\r\n    END IF;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "delete_game_cascade",
          "arguments": "game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.delete_game_cascade(game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nbegin\r\n  -- Delete game selections first\r\n  delete from game_selections where game_id = $1;\r\n  \r\n  -- Delete game registrations\r\n  delete from game_registrations where game_id = $1;\r\n  \r\n  -- Finally delete the game\r\n  delete from games where id = $1;\r\nend;\r\n$function$\n"
        },
        {
          "name": "expire_slot_offers",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.expire_slot_offers()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    UPDATE slot_offers\r\n    SET status = 'expired',\r\n        updated_at = NOW()\r\n    WHERE status = 'pending'\r\n    AND expires_at < NOW();\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_caps",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, total_games integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_caps(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, total_games integer)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    SELECT \r\n        p.id,\r\n        p.friendly_name,\r\n        COUNT(gr.id)::integer as total_games\r\n    FROM players p\r\n    JOIN game_registrations gr ON gr.player_id = p.id\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE gr.status = 'selected'\r\n    AND (target_year IS NULL OR EXTRACT(YEAR FROM g.date) = target_year)\r\n    GROUP BY p.id, p.friendly_name\r\n    HAVING COUNT(gr.id) >= 10\r\n    ORDER BY COUNT(gr.id) DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_with_reserve_xp",
          "arguments": "p_player_id uuid",
          "return_type": "TABLE(id uuid, friendly_name text, avatar_svg text, caps integer, active_bonuses integer, active_penalties integer, current_streak integer, max_streak integer, win_rate numeric, xp integer, user_id uuid, reserve_xp integer, reserve_count integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_with_reserve_xp(p_player_id uuid)\n RETURNS TABLE(id uuid, friendly_name text, avatar_svg text, caps integer, active_bonuses integer, active_penalties integer, current_streak integer, max_streak integer, win_rate numeric, xp integer, user_id uuid, reserve_xp integer, reserve_count integer)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    SELECT \r\n        p.id,\r\n        p.friendly_name,\r\n        p.avatar_svg,\r\n        p.caps,\r\n        p.active_bonuses,\r\n        p.active_penalties,\r\n        p.current_streak,\r\n        p.max_streak,\r\n        p.win_rate,\r\n        COALESCE(px.xp, 0) as xp,\r\n        p.user_id,\r\n        COALESCE(SUM(rt.xp_amount), 0)::INTEGER as reserve_xp,\r\n        COUNT(rt.id)::INTEGER as reserve_count\r\n    FROM players p\r\n    LEFT JOIN player_xp px ON px.player_id = p.id\r\n    LEFT JOIN reserve_xp_transactions rt ON rt.player_id = p.id\r\n    WHERE p.id = p_player_id\r\n    GROUP BY \r\n        p.id,\r\n        p.friendly_name,\r\n        p.avatar_svg,\r\n        p.caps,\r\n        p.active_bonuses,\r\n        p.active_penalties,\r\n        p.current_streak,\r\n        p.max_streak,\r\n        p.win_rate,\r\n        px.xp,\r\n        p.user_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "reject_slot_offer",
          "arguments": "p_slot_offer_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.reject_slot_offer(p_slot_offer_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_offer record;\r\nBEGIN\r\n    -- Get offer details\r\n    SELECT * INTO v_offer\r\n    FROM slot_offers\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Slot offer not found';\r\n    END IF;\r\n\r\n    -- Mark this offer as rejected\r\n    UPDATE slot_offers\r\n    SET status = 'rejected'\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    -- Create next slot offer\r\n    PERFORM create_next_slot_offer(v_offer.game_id, v_offer.rank);\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_game_needs_completion",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_game_needs_completion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  -- Only set needs_completion for games created from today onwards\r\n  IF NEW.created_at > '2024-11-28'::timestamp AND\r\n     (NEW.score_blue IS NULL OR NEW.score_orange IS NULL OR NEW.outcome IS NULL) THEN\r\n    NEW.needs_completion := true;\r\n  ELSE\r\n    NEW.needs_completion := false;\r\n  END IF;\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_game_sequence_numbers",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_game_sequence_numbers()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Update sequence numbers for all games\r\n    -- Orders by date ascending (oldest first), then by created_at for games with same date\r\n    WITH numbered_games AS (\r\n        SELECT id,\r\n               ROW_NUMBER() OVER (ORDER BY date ASC, created_at ASC) as new_seq\r\n        FROM games\r\n    )\r\n    UPDATE games g\r\n    SET sequence_number = ng.new_seq\r\n    FROM numbered_games ng\r\n    WHERE g.id = ng.id;\r\n    \r\n    RETURN NULL;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_players_with_game_count",
          "arguments": "current_player_id uuid",
          "return_type": "TABLE(id uuid, friendly_name text, games_played bigint)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_players_with_game_count(current_player_id uuid)\n RETURNS TABLE(id uuid, friendly_name text, games_played bigint)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    SELECT \r\n        p.id,\r\n        p.friendly_name,\r\n        COUNT(DISTINCT gr1.game_id)::BIGINT as games_played\r\n    FROM players p\r\n    LEFT JOIN (\r\n        SELECT gr1.player_id, gr1.game_id\r\n        FROM game_registrations gr1\r\n        INNER JOIN game_registrations gr2 ON gr1.game_id = gr2.game_id\r\n            AND gr2.player_id = current_player_id\r\n            AND gr2.status IN ('selected', 'confirmed')\r\n        INNER JOIN games g ON gr1.game_id = g.id\r\n            AND g.completed = true\r\n        WHERE gr1.status IN ('selected', 'confirmed')\r\n    ) gr1 ON gr1.player_id = p.id\r\n    WHERE p.id != current_player_id\r\n    GROUP BY p.id, p.friendly_name\r\n    ORDER BY p.friendly_name;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_game_registration_status",
          "arguments": "p_game_id uuid, p_player_id uuid, p_status text",
          "return_type": "SETOF game_registrations",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_game_registration_status(p_game_id uuid, p_player_id uuid, p_status text)\n RETURNS SETOF game_registrations\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    -- Update the registration\r\n    RETURN QUERY\r\n    UPDATE game_registrations\r\n    SET status = p_status\r\n    WHERE game_id = p_game_id\r\n    AND player_id = p_player_id\r\n    RETURNING *;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "reset_game_selection",
          "arguments": "game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.reset_game_selection(game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nbegin\r\n  -- Reset game status to open\r\n  update games\r\n  set status = 'open'\r\n  where id = game_id;\r\n\r\n  -- Reset all registrations\r\n  update game_registrations\r\n  set status = 'registered',\r\n      randomly_selected = false\r\n  where game_id = game_id;\r\nend;\r\n$function$\n"
        },
        {
          "name": "handle_game_deletion",
          "arguments": "",
          "return_type": "trigger",
          "description": "Handles cleanup when a game is deleted:\r\n1. Deletes all reserve XP transactions for the game\r\n2. Recalculates XP for all affected players (both those with reserve XP and those who were registered)",
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_game_deletion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Recalculate attendance streaks\r\n    WITH player_streaks AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            COALESCE(\r\n                (\r\n                    SELECT COUNT(*)\r\n                    FROM game_registrations gr\r\n                    JOIN games g ON g.id = gr.game_id\r\n                    WHERE gr.player_id = p.id\r\n                    AND gr.status = 'selected'\r\n                    AND g.completed = true\r\n                    AND g.date >= (\r\n                        SELECT MAX(g2.date)\r\n                        FROM game_registrations gr2\r\n                        JOIN games g2 ON g2.id = gr2.game_id\r\n                        WHERE gr2.player_id = p.id\r\n                        AND (gr2.status != 'selected' OR NOT g2.completed)\r\n                        AND g2.date < NOW()\r\n                    )\r\n                ), 0\r\n            ) as streak\r\n        FROM players p\r\n    )\r\n    UPDATE players p\r\n    SET current_streak = ps.streak\r\n    FROM player_streaks ps\r\n    WHERE p.id = ps.player_id;\r\n\r\n    -- Recalculate bench warmer streaks\r\n    WITH bench_streaks AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            COALESCE(\r\n                (\r\n                    SELECT COUNT(*)\r\n                    FROM game_registrations gr\r\n                    JOIN games g ON g.id = gr.game_id\r\n                    WHERE gr.player_id = p.id\r\n                    AND gr.status = 'reserve'\r\n                    AND g.completed = true\r\n                    AND g.date >= (\r\n                        SELECT MAX(g2.date)\r\n                        FROM game_registrations gr2\r\n                        JOIN games g2 ON g2.id = gr2.game_id\r\n                        WHERE gr2.player_id = p.id\r\n                        AND (gr2.status != 'reserve' OR NOT g2.completed)\r\n                        AND g2.date < NOW()\r\n                    )\r\n                ), 0\r\n            ) as streak\r\n        FROM players p\r\n    )\r\n    UPDATE players p\r\n    SET bench_warmer_streak = bs.streak\r\n    FROM bench_streaks bs\r\n    WHERE p.id = bs.player_id;\r\n\r\n    RETURN OLD;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response",
          "arguments": "p_offer_id uuid, p_status text",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response(p_offer_id uuid, p_status text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_game_id UUID;\r\n  v_player_id UUID;\r\nBEGIN\r\n  -- Get the offer details\r\n  SELECT game_id, player_id INTO v_game_id, v_player_id\r\n  FROM slot_offers\r\n  WHERE id = p_offer_id;\r\n\r\n  IF NOT FOUND THEN\r\n    RAISE EXCEPTION 'Slot offer not found';\r\n  END IF;\r\n\r\n  -- If accepting the offer\r\n  IF p_status = 'accepted' THEN\r\n    -- Update game registration to selected\r\n    UPDATE game_registrations\r\n    SET status = 'selected'\r\n    WHERE game_id = v_game_id\r\n    AND player_id = v_player_id;\r\n\r\n    -- Mark all other offers for this game as void\r\n    UPDATE slot_offers\r\n    SET status = 'void'\r\n    WHERE game_id = v_game_id\r\n    AND id != p_offer_id;\r\n\r\n    -- Create notifications for other players\r\n    INSERT INTO notifications (\r\n      player_id,\r\n      type,\r\n      message,\r\n      metadata,\r\n      created_at\r\n    )\r\n    SELECT \r\n      so.player_id,\r\n      'system_message',\r\n      'The slot you were offered has been filled by another player.',\r\n      jsonb_build_object(\r\n        'game_id', v_game_id,\r\n        'action', 'slot_filled'\r\n      ),\r\n      NOW()\r\n    FROM slot_offers so\r\n    WHERE so.game_id = v_game_id\r\n    AND so.id != p_offer_id\r\n    AND so.status = 'pending';\r\n  END IF;\r\n\r\n  -- Update the offer status\r\n  UPDATE slot_offers\r\n  SET \r\n    status = p_status,\r\n    responded_at = NOW()\r\n  WHERE id = p_offer_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_streaks_on_game_change",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_streaks_on_game_change()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Update attendance streaks\r\n    WITH player_streaks AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            COUNT(*) as streak\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN games g ON g.id = gr.game_id\r\n        WHERE gr.status = 'selected'\r\n        AND g.completed = true\r\n        AND NOT EXISTS (\r\n            SELECT 1\r\n            FROM games g2\r\n            LEFT JOIN game_registrations gr2 ON gr2.game_id = g2.id AND gr2.player_id = p.id\r\n            WHERE g2.sequence_number > g.sequence_number\r\n            AND g2.completed = true\r\n            AND (gr2.id IS NULL OR gr2.status != 'selected')\r\n        )\r\n        GROUP BY p.id\r\n    )\r\n    UPDATE players p\r\n    SET current_streak = COALESCE(ps.streak, 0)\r\n    FROM player_streaks ps\r\n    WHERE p.id = ps.player_id;\r\n\r\n    -- Update bench warmer streaks\r\n    WITH bench_streaks AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            COUNT(*) as streak\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN games g ON g.id = gr.game_id\r\n        WHERE gr.status = 'reserve'\r\n        AND g.completed = true\r\n        AND NOT EXISTS (\r\n            SELECT 1\r\n            FROM games g2\r\n            LEFT JOIN game_registrations gr2 ON gr2.game_id = g2.id AND gr2.player_id = p.id\r\n            WHERE g2.sequence_number > g.sequence_number\r\n            AND g2.completed = true\r\n            AND (gr2.id IS NULL OR gr2.status != 'reserve')\r\n        )\r\n        GROUP BY p.id\r\n    )\r\n    UPDATE players p\r\n    SET bench_warmer_streak = COALESCE(bs.streak, 0)\r\n    FROM bench_streaks bs\r\n    WHERE p.id = bs.player_id;\r\n\r\n    -- The XP will be automatically recalculated by our existing XP trigger\r\n    RETURN NULL;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "promote_to_super_admin",
          "arguments": "target_user_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.promote_to_super_admin(target_user_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  IF EXISTS (\r\n    SELECT 1 FROM players \r\n    WHERE user_id = auth.uid() \r\n    AND is_super_admin = true\r\n  ) THEN\r\n    UPDATE players \r\n    SET is_super_admin = true \r\n    WHERE user_id = target_user_id;\r\n  ELSE\r\n    RAISE EXCEPTION 'Only super admins can promote other users to super admin';\r\n  END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "has_permission",
          "arguments": "permission_type admin_permission",
          "return_type": "boolean",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.has_permission(permission_type admin_permission)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RETURN EXISTS (\r\n    SELECT 1 \r\n    FROM admin_roles ar\r\n    LEFT JOIN admin_permissions ap ON ar.id = ap.admin_role_id\r\n    WHERE ar.player_id = (\r\n      SELECT id FROM players WHERE user_id = auth.uid()\r\n    )\r\n    AND (\r\n      ar.is_super_admin = true \r\n      OR ap.permission = permission_type\r\n    )\r\n  );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response_text",
          "arguments": "p_offer_id uuid, p_status text",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response_text(p_offer_id uuid, p_status text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RAISE NOTICE 'Text version called with status: %', p_status;\r\n  -- Call the main function with the converted enum\r\n  PERFORM handle_slot_offer_response(p_offer_id, p_status::slot_offer_status);\r\nEND;\r\n$function$\n"
        },
        {
          "name": "log_debug",
          "arguments": "message text",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.log_debug(message text)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RAISE NOTICE '%', message;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "process_team_announcements",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.process_team_announcements()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    game_record RECORD;\r\nBEGIN\r\n    FOR game_record IN\r\n        SELECT id\r\n        FROM games\r\n        WHERE team_announcement_time <= NOW()\r\n        AND team_announcement_time > NOW() - INTERVAL '5 minutes'\r\n        AND teams_announced = FALSE\r\n    LOOP\r\n        -- Balance teams for this game\r\n        PERFORM balance_teams(game_record.id);\r\n        \r\n        -- Mark the game as having teams announced\r\n        UPDATE games\r\n        SET teams_announced = TRUE\r\n        WHERE id = game_record.id;\r\n    END LOOP;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_caps_on_game_completion",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_caps_on_game_completion()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Only process when a game becomes historical\r\n    IF NEW.is_historical = true AND (OLD.is_historical = false OR OLD.is_historical IS NULL) THEN\r\n        -- Update caps for all players who participated in this game\r\n        UPDATE players p\r\n        SET caps = calculate_player_caps(p.id)\r\n        FROM game_registrations gr\r\n        WHERE gr.game_id = NEW.id \r\n        AND gr.player_id = p.id\r\n        AND gr.team IS NOT NULL  -- Only count actual players, not reserves\r\n        AND (p.manual_caps_override IS NULL OR p.manual_caps_override = false);\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_updated_at",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    NEW.updated_at = CURRENT_TIMESTAMP;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_updated_at_column",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    NEW.updated_at = CURRENT_TIMESTAMP;\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "count_games_played_together",
          "arguments": "player_one_id uuid, player_two_id uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.count_games_played_together(player_one_id uuid, player_two_id uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n  RETURN (\r\n    SELECT COUNT(DISTINCT gr1.game_id)\r\n    FROM game_registrations gr1\r\n    INNER JOIN game_registrations gr2 ON gr1.game_id = gr2.game_id\r\n    INNER JOIN games g ON gr1.game_id = g.id\r\n    WHERE gr1.player_id = player_one_id\r\n    AND gr2.player_id = player_two_id\r\n    AND g.completed = true\r\n  );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_game_deletion_xp",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_game_deletion_xp()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    affected_player_id uuid;\r\nBEGIN\r\n    -- Store the affected player IDs before the game is deleted\r\n    FOR affected_player_id IN \r\n        SELECT DISTINCT player_id \r\n        FROM game_registrations \r\n        WHERE game_id = OLD.id\r\n    LOOP\r\n        -- Update player_xp table using the same pattern as other triggers\r\n        INSERT INTO player_xp (player_id, xp, last_calculated)\r\n        VALUES (\r\n            affected_player_id,\r\n            calculate_player_xp(affected_player_id),\r\n            CURRENT_TIMESTAMP\r\n        )\r\n        ON CONFLICT (player_id) \r\n        DO UPDATE SET \r\n            xp = EXCLUDED.xp,\r\n            last_calculated = EXCLUDED.last_calculated;\r\n    END LOOP;\r\n    \r\n    RETURN OLD;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_random_weighted_players",
          "arguments": "",
          "return_type": "TABLE(id uuid, friendly_name text, caps integer, chance_of_playing_percentage numeric)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_random_weighted_players()\n RETURNS TABLE(id uuid, friendly_name text, caps integer, chance_of_playing_percentage numeric)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  team_size integer;\r\nBEGIN\r\n  -- Generate random team size between 18 and 22\r\n  team_size := floor(random() * (22-18+1) + 18)::int;\r\n\r\n  RETURN QUERY\r\n  WITH random_team_size AS (\r\n    SELECT team_size as size\r\n  ),\r\n  player_probabilities AS (\r\n    SELECT \r\n      p.id,\r\n      p.friendly_name,\r\n      COALESCE(p.caps, 0) as caps,\r\n      CASE \r\n        WHEN SUM(COALESCE(p.caps, 0)) OVER () = 0 THEN 1.0/COUNT(*) OVER ()\r\n        ELSE CAST(COALESCE(p.caps, 0) AS FLOAT) / NULLIF(SUM(COALESCE(p.caps, 0)) OVER (), 0)\r\n      END as play_probability\r\n    FROM players p\r\n  ),\r\n  ranked_random_selection AS (\r\n    SELECT \r\n      p.*,\r\n      (SELECT size FROM random_team_size) as team_size,\r\n      ROW_NUMBER() OVER (ORDER BY random() * play_probability DESC) as selection_rank\r\n    FROM player_probabilities p\r\n  )\r\n  SELECT \r\n    rrs.id,\r\n    rrs.friendly_name,\r\n    rrs.caps,\r\n    (rrs.play_probability * 100)::numeric(5,2) as chance_of_playing_percentage\r\n  FROM ranked_random_selection rrs\r\n  WHERE rrs.selection_rank <= rrs.team_size\r\n  ORDER BY rrs.selection_rank;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_player_streak",
          "arguments": "player_uuid uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_player_streak(player_uuid uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN (\r\n        SELECT \r\n            COUNT(*)\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN games g ON g.id = gr.game_id\r\n        WHERE p.id = player_uuid\r\n        AND gr.status = 'selected'\r\n        AND g.completed = true\r\n        AND NOT EXISTS (\r\n            SELECT 1\r\n            FROM games g2\r\n            LEFT JOIN game_registrations gr2 ON gr2.game_id = g2.id AND gr2.player_id = p.id\r\n            WHERE g2.sequence_number > g.sequence_number\r\n            AND g2.completed = true\r\n            AND (gr2.id IS NULL OR gr2.status != 'selected')\r\n        )\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response",
          "arguments": "p_slot_offer_id uuid, p_action text, p_admin_id uuid DEFAULT NULL::uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response(p_slot_offer_id uuid, p_action text, p_admin_id uuid DEFAULT NULL::uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_slot_offer record;\r\n    v_game record;\r\n    v_current_players jsonb;\r\n    v_next_players UUID[];\r\n    v_hours_until_game NUMERIC;\r\nBEGIN\r\n    -- Get slot offer details\r\n    SELECT * INTO v_slot_offer\r\n    FROM slot_offers\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Slot offer not found';\r\n    END IF;\r\n\r\n    -- Get game details including current selected players\r\n    SELECT g.*, gs.selected_players, \r\n           EXTRACT(EPOCH FROM (g.date - NOW())) / 3600 as hours_until_game\r\n    INTO v_game\r\n    FROM games g\r\n    LEFT JOIN game_selections gs ON gs.game_id = g.id\r\n    WHERE g.id = v_slot_offer.game_id;\r\n\r\n    IF p_action = 'accept' THEN\r\n        -- Update or insert game_selections with the new player\r\n        INSERT INTO game_selections (\r\n            game_id,\r\n            selected_players,\r\n            reserve_players\r\n        )\r\n        VALUES (\r\n            v_slot_offer.game_id,\r\n            COALESCE(v_game.selected_players, '[]'::jsonb) || jsonb_build_array(v_slot_offer.player_id::text),\r\n            '[]'::jsonb\r\n        )\r\n        ON CONFLICT (game_id) DO UPDATE\r\n        SET selected_players = COALESCE(game_selections.selected_players, '[]'::jsonb) || jsonb_build_array(v_slot_offer.player_id::text);\r\n\r\n        -- Update game registration status\r\n        UPDATE game_registrations\r\n        SET status = 'selected'\r\n        WHERE game_id = v_slot_offer.game_id\r\n        AND player_id = v_slot_offer.player_id;\r\n\r\n        -- Update slot offer status\r\n        UPDATE slot_offers\r\n        SET \r\n            status = 'accepted',\r\n            responded_at = CURRENT_TIMESTAMP,\r\n            accepted_at = CURRENT_TIMESTAMP\r\n        WHERE id = p_slot_offer_id;\r\n\r\n    ELSIF p_action = 'decline' THEN\r\n        -- Rest of the decline logic remains the same...\r\n        -- [Previous decline logic here]\r\n    END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_decline_penalty",
          "arguments": "",
          "return_type": "trigger",
          "description": "Trigger function that applies -10 XP penalty when a player declines a slot offer, \r\nunless the offer was made on the same day as the game.",
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_decline_penalty()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Only process if the slot offer is being declined\r\n    IF NEW.status = 'declined' AND OLD.status != 'declined' THEN\r\n        -- Check if the offer was made on the same day as the game\r\n        IF NOT EXISTS (\r\n            SELECT 1 \r\n            FROM games g \r\n            WHERE g.id = NEW.game_id \r\n            AND DATE(g.date) = DATE(NEW.created_at)\r\n        ) THEN\r\n            -- Insert penalty transaction\r\n            INSERT INTO reserve_xp_transactions (\r\n                player_id,\r\n                game_id,\r\n                xp_amount,\r\n                transaction_type\r\n            )\r\n            VALUES (\r\n                NEW.player_id,\r\n                NEW.game_id,\r\n                -10,\r\n                'SLOT_DECLINE_PENALTY'\r\n            );\r\n\r\n            -- Update player XP\r\n            UPDATE player_xp\r\n            SET \r\n                xp = calculate_player_xp(player_id),\r\n                last_calculated = CURRENT_TIMESTAMP\r\n            WHERE player_id = NEW.player_id;\r\n        END IF;\r\n    END IF;\r\n\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_bench_warmer_streak",
          "arguments": "player_uuid uuid",
          "return_type": "integer",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_bench_warmer_streak(player_uuid uuid)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN (\r\n        SELECT \r\n            COUNT(*)\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN games g ON g.id = gr.game_id\r\n        WHERE p.id = player_uuid\r\n        AND gr.status = 'reserve'\r\n        AND g.completed = true\r\n        AND NOT EXISTS (\r\n            SELECT 1\r\n            FROM games g2\r\n            LEFT JOIN game_registrations gr2 ON gr2.game_id = g2.id AND gr2.player_id = p.id\r\n            WHERE g2.sequence_number > g.sequence_number\r\n            AND g2.completed = true\r\n            AND (gr2.id IS NULL OR gr2.status != 'reserve')\r\n        )\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "accept_slot_offer",
          "arguments": "p_slot_offer_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.accept_slot_offer(p_slot_offer_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_offer record;\r\nBEGIN\r\n    -- Get offer details\r\n    SELECT * INTO v_offer\r\n    FROM slot_offers\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Slot offer not found';\r\n    END IF;\r\n\r\n    -- Update the player's registration to selected\r\n    UPDATE game_registrations\r\n    SET status = 'selected'\r\n    WHERE game_id = v_offer.game_id\r\n    AND player_id = v_offer.player_id;\r\n\r\n    -- Mark this offer as accepted\r\n    UPDATE slot_offers\r\n    SET status = 'accepted'\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    -- Void all other pending offers for this game\r\n    UPDATE slot_offers\r\n    SET status = 'voided'\r\n    WHERE game_id = v_offer.game_id\r\n    AND id != p_slot_offer_id\r\n    AND status = 'pending';\r\n\r\n    -- Notify other players that their offers were voided\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    )\r\n    SELECT \r\n        so.player_id,\r\n        'slot_offer_update',\r\n        'The slot has been filled by another player.',\r\n        jsonb_build_object(\r\n            'game_id', so.game_id,\r\n            'slot_offer_id', so.id,\r\n            'status', 'voided'\r\n        ),\r\n        'Slot Offer Voided',\r\n        1\r\n    FROM slot_offers so\r\n    WHERE so.game_id = v_offer.game_id\r\n    AND so.id != p_slot_offer_id\r\n    AND so.status = 'voided';\r\nEND;\r\n$function$\n"
        },
        {
          "name": "calculate_balanced_teams",
          "arguments": "input_game_id uuid",
          "return_type": "TABLE(team text, player_id uuid, friendly_name text, attack_rating numeric, defense_rating numeric, experience_factor numeric)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.calculate_balanced_teams(input_game_id uuid)\n RETURNS TABLE(team text, player_id uuid, friendly_name text, attack_rating numeric, defense_rating numeric, experience_factor numeric)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    total_players integer;\r\n    players_per_team integer;\r\nBEGIN\r\n    -- Get total number of confirmed players\r\n    SELECT COUNT(*) INTO total_players\r\n    FROM public.game_registrations gp\r\n    WHERE gp.game_id = input_game_id AND gp.status = 'confirmed';\r\n\r\n    -- Calculate players per team\r\n    players_per_team := total_players / 2;\r\n\r\n    RETURN QUERY\r\n    WITH player_stats AS (\r\n        SELECT \r\n            gp.player_id,\r\n            p.friendly_name,\r\n            COALESCE(ps.attack_rating, 0) as attack_rating,\r\n            COALESCE(ps.defense_rating, 0) as defense_rating,\r\n            -- Calculate experience factor based on caps and streaks\r\n            (COALESCE(ps.caps, 0) * 0.1 + COALESCE(ps.current_streak, 0) * 0.05) as experience_factor,\r\n            -- Calculate weighted total rating\r\n            (COALESCE(ps.attack_rating, 0) + COALESCE(ps.defense_rating, 0)) * \r\n            (1 + (COALESCE(ps.active_bonuses, 0) * 0.1) - (COALESCE(ps.active_penalties, 0) * 0.1)) as weighted_rating\r\n        FROM public.game_registrations gp\r\n        JOIN public.players p ON p.id = gp.player_id\r\n        LEFT JOIN public.player_stats ps ON ps.id = gp.player_id\r\n        WHERE gp.game_id = input_game_id AND gp.status = 'confirmed'\r\n    ),\r\n    ranked_players AS (\r\n        SELECT \r\n            *,\r\n            ROW_NUMBER() OVER (\r\n                ORDER BY weighted_rating DESC\r\n            ) as rank\r\n        FROM player_stats\r\n    ),\r\n    team_assignments AS (\r\n        SELECT \r\n            CASE \r\n                -- Zigzag pattern for more balanced distribution\r\n                WHEN rank % 4 IN (1, 4) THEN 'blue'\r\n                ELSE 'orange'\r\n            END as team,\r\n            player_id,\r\n            friendly_name,\r\n            attack_rating,\r\n            defense_rating,\r\n            experience_factor\r\n        FROM ranked_players\r\n    )\r\n    SELECT \r\n        ta.team,\r\n        ta.player_id,\r\n        ta.friendly_name,\r\n        ta.attack_rating,\r\n        ta.defense_rating,\r\n        ta.experience_factor\r\n    FROM team_assignments ta\r\n    ORDER BY ta.team, (ta.attack_rating + ta.defense_rating) DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_streaks",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_streaks()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- For game_registrations changes\r\n    IF TG_TABLE_NAME = 'game_registrations' THEN\r\n        -- Only update streak for completed/historical games\r\n        IF EXISTS (\r\n            SELECT 1 \r\n            FROM games g \r\n            WHERE g.id = NEW.game_id \r\n            AND ((g.completed = true AND g.needs_completion = false) OR g.is_historical = true)\r\n        ) THEN\r\n            UPDATE players \r\n            SET \r\n                current_streak = calculate_player_streak(NEW.player_id),\r\n                bench_warmer_streak = calculate_bench_warmer_streak(NEW.player_id)\r\n            WHERE id = NEW.player_id;\r\n        END IF;\r\n    \r\n    -- For games changes\r\n    ELSIF TG_TABLE_NAME = 'games' THEN\r\n        -- When a game is marked as completed or historical, or deleted\r\n        IF (TG_OP = 'UPDATE' AND \r\n            (\r\n                (NEW.completed = true AND (OLD.completed = false OR OLD.completed IS NULL))\r\n                OR (NEW.is_historical = true AND (OLD.is_historical = false OR OLD.is_historical IS NULL))\r\n            )\r\n        ) OR TG_OP = 'DELETE' THEN\r\n            -- Update streaks for all players in this game\r\n            UPDATE players p\r\n            SET \r\n                current_streak = calculate_player_streak(p.id),\r\n                bench_warmer_streak = calculate_bench_warmer_streak(p.id)\r\n            FROM game_registrations gr\r\n            WHERE gr.game_id = COALESCE(NEW.id, OLD.id)\r\n            AND gr.player_id = p.id;\r\n        END IF;\r\n    END IF;\r\n    \r\n    RETURN COALESCE(NEW, OLD);\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_game",
          "arguments": "p_date timestamp with time zone, p_reg_start timestamp with time zone, p_reg_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2",
          "return_type": "uuid",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_game(p_date timestamp with time zone, p_reg_start timestamp with time zone, p_reg_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2)\n RETURNS uuid\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game_id uuid;\r\nBEGIN\r\n    -- Validate dates\r\n    IF p_reg_start >= p_reg_end THEN\r\n        RAISE EXCEPTION 'Registration start must be before registration end';\r\n    END IF;\r\n    \r\n    IF p_reg_end > p_date THEN\r\n        RAISE EXCEPTION 'Registration must end before game starts';\r\n    END IF;\r\n\r\n    -- Insert the game with explicit enum casting\r\n    INSERT INTO games (\r\n        date,\r\n        registration_window_start,\r\n        registration_window_end,\r\n        status,\r\n        needs_completion,\r\n        is_historical,\r\n        teams_announced,\r\n        completed,\r\n        random_slots,\r\n        max_players,\r\n        score_blue,\r\n        score_orange,\r\n        outcome\r\n    ) VALUES (\r\n        p_date,\r\n        p_reg_start,\r\n        p_reg_end,\r\n        'created'::game_status,\r\n        true,\r\n        false,\r\n        false,\r\n        false,\r\n        p_random_slots,\r\n        p_max_players,\r\n        NULL,\r\n        NULL,\r\n        NULL\r\n    )\r\n    RETURNING id INTO v_game_id;\r\n\r\n    RETURN v_game_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_admin_slot_offer_action",
          "arguments": "p_slot_offer_id uuid, p_action text, p_admin_id uuid DEFAULT NULL::uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_admin_slot_offer_action(p_slot_offer_id uuid, p_action text, p_admin_id uuid DEFAULT NULL::uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_slot_offer record;\r\n    v_game record;\r\n    v_current_players jsonb;\r\n    v_next_players UUID[];\r\n    v_hours_until_game NUMERIC;\r\n    v_game_selection_id uuid;\r\nBEGIN\r\n    -- Get slot offer details\r\n    SELECT * INTO v_slot_offer\r\n    FROM slot_offers\r\n    WHERE id = p_slot_offer_id;\r\n\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Slot offer not found';\r\n    END IF;\r\n\r\n    -- Get game details including current selected players\r\n    SELECT g.*, gs.id as game_selection_id, gs.selected_players, \r\n           EXTRACT(EPOCH FROM (g.date - NOW())) / 3600 as hours_until_game\r\n    INTO v_game\r\n    FROM games g\r\n    LEFT JOIN game_selections gs ON gs.game_id = g.id\r\n    WHERE g.id = v_slot_offer.game_id;\r\n\r\n    IF p_action = 'accept' THEN\r\n        IF v_game.game_selection_id IS NULL THEN\r\n            -- Create new game_selections record if it doesn't exist\r\n            INSERT INTO game_selections (\r\n                game_id,\r\n                selected_players,\r\n                reserve_players,\r\n                selection_metadata\r\n            )\r\n            VALUES (\r\n                v_slot_offer.game_id,\r\n                jsonb_build_array(v_slot_offer.player_id::text),\r\n                '[]'::jsonb,\r\n                '{}'::jsonb\r\n            );\r\n        ELSE\r\n            -- Update existing game_selections record\r\n            UPDATE game_selections\r\n            SET selected_players = (\r\n                CASE \r\n                    WHEN selected_players IS NULL THEN jsonb_build_array(v_slot_offer.player_id::text)\r\n                    ELSE selected_players || jsonb_build_array(v_slot_offer.player_id::text)\r\n                END\r\n            )\r\n            WHERE id = v_game.game_selection_id;\r\n        END IF;\r\n\r\n        -- Update game registration status\r\n        UPDATE game_registrations\r\n        SET status = 'selected'\r\n        WHERE game_id = v_slot_offer.game_id\r\n        AND player_id = v_slot_offer.player_id;\r\n\r\n        -- Update slot offer status\r\n        UPDATE slot_offers\r\n        SET \r\n            status = 'accepted',\r\n            responded_at = CURRENT_TIMESTAMP,\r\n            accepted_at = CURRENT_TIMESTAMP\r\n        WHERE id = p_slot_offer_id;\r\n\r\n        -- Void other pending offers for this game\r\n        UPDATE slot_offers\r\n        SET \r\n            status = 'voided',\r\n            responded_at = CURRENT_TIMESTAMP\r\n        WHERE \r\n            game_id = v_slot_offer.game_id \r\n            AND id != p_slot_offer_id \r\n            AND status = 'pending';\r\n\r\n    ELSIF p_action = 'decline' THEN\r\n        -- Update slot offer status\r\n        UPDATE slot_offers\r\n        SET \r\n            status = 'declined',\r\n            responded_at = CURRENT_TIMESTAMP,\r\n            declined_at = CURRENT_TIMESTAMP\r\n        WHERE id = p_slot_offer_id;\r\n\r\n        -- Get next eligible players based on XP\r\n        SELECT ARRAY(\r\n            SELECT player_id \r\n            FROM get_next_slot_offer_players(v_slot_offer.game_id, v_game.hours_until_game)\r\n            LIMIT 1\r\n        ) INTO v_next_players;\r\n\r\n        -- Create new offers for next eligible players\r\n        IF array_length(v_next_players, 1) > 0 THEN\r\n            INSERT INTO slot_offers (\r\n                game_id,\r\n                player_id,\r\n                status,\r\n                offered_at,\r\n                expires_at,\r\n                available_at,\r\n                rank\r\n            )\r\n            SELECT \r\n                v_slot_offer.game_id,\r\n                player_id,\r\n                'pending'::slot_offer_status,\r\n                NOW(),\r\n                NOW() + INTERVAL '1 hour',\r\n                NOW(),\r\n                COALESCE(v_slot_offer.rank, 1) + ROW_NUMBER() OVER ()\r\n            FROM unnest(v_next_players) AS player_id;\r\n\r\n            -- Create notifications for new offers\r\n            INSERT INTO notifications (\r\n                player_id,\r\n                type,\r\n                message,\r\n                metadata\r\n            )\r\n            SELECT \r\n                player_id,\r\n                'slot_offer',\r\n                'A spot has opened up in game #' || v_game.game_number || '. Would you like to play?',\r\n                jsonb_build_object(\r\n                    'game_id', v_slot_offer.game_id,\r\n                    'action', 'new_slot_offer'\r\n                )\r\n            FROM unnest(v_next_players) AS player_id;\r\n        END IF;\r\n    END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_game_with_status",
          "arguments": "p_date timestamp with time zone, p_reg_start timestamp with time zone, p_reg_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2",
          "return_type": "uuid",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_game_with_status(p_date timestamp with time zone, p_reg_start timestamp with time zone, p_reg_end timestamp with time zone, p_max_players integer DEFAULT 18, p_random_slots integer DEFAULT 2)\n RETURNS uuid\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game_id uuid;\r\n    v_status text := 'created';\r\nBEGIN\r\n    -- Validate dates\r\n    IF p_reg_start >= p_reg_end THEN\r\n        RAISE EXCEPTION 'Registration start must be before registration end';\r\n    END IF;\r\n    \r\n    IF p_reg_end > p_date THEN\r\n        RAISE EXCEPTION 'Registration must end before game starts';\r\n    END IF;\r\n\r\n    -- Validate status is in allowed values\r\n    IF NOT (v_status = ANY(ARRAY['created', 'registration_open', 'teams_announced', 'pending_completion', 'completed']::text[])) THEN\r\n        RAISE EXCEPTION 'Invalid status value: %', v_status;\r\n    END IF;\r\n\r\n    -- Insert the game with explicit casting of status\r\n    EXECUTE 'INSERT INTO games (\r\n        date,\r\n        registration_window_start,\r\n        registration_window_end,\r\n        status,\r\n        needs_completion,\r\n        is_historical,\r\n        teams_announced,\r\n        completed,\r\n        random_slots,\r\n        max_players,\r\n        score_blue,\r\n        score_orange,\r\n        outcome\r\n    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) RETURNING id'\r\n    INTO v_game_id\r\n    USING \r\n        p_date,\r\n        p_reg_start,\r\n        p_reg_end,\r\n        v_status,\r\n        true,\r\n        false,\r\n        false,\r\n        false,\r\n        p_random_slots,\r\n        p_max_players,\r\n        NULL,\r\n        NULL,\r\n        NULL;\r\n\r\n    IF v_game_id IS NULL THEN\r\n        RAISE EXCEPTION 'Failed to create game';\r\n    END IF;\r\n\r\n    RETURN v_game_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_initial_slot_offer",
          "arguments": "p_game_id uuid, p_admin_id uuid, p_dropped_out_player_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_initial_slot_offer(p_game_id uuid, p_admin_id uuid, p_dropped_out_player_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_eligible_players record;\r\n    v_slot_offer_id UUID;\r\n    v_player_count integer;\r\n    v_time_slots record;\r\n    v_current_rank integer := 1;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT * INTO v_game FROM games WHERE id = p_game_id;\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Game not found';\r\n    END IF;\r\n\r\n    -- Get count of eligible players\r\n    SELECT COUNT(*) INTO v_player_count\r\n    FROM players p\r\n    JOIN game_registrations gr ON gr.player_id = p.id\r\n    WHERE gr.game_id = p_game_id\r\n    AND gr.status = 'reserve';\r\n\r\n    -- Get highest XP reserve player\r\n    WITH RankedPlayers AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            p.friendly_name,\r\n            ps.xp,\r\n            ROW_NUMBER() OVER (ORDER BY ps.xp DESC) as rank\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN player_stats ps ON ps.player_id = p.id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n    )\r\n    SELECT * INTO v_eligible_players\r\n    FROM RankedPlayers\r\n    WHERE rank = 1;\r\n\r\n    -- Calculate time slots\r\n    SELECT * INTO v_time_slots\r\n    FROM calculate_slot_offer_times(p_game_id, v_player_count)\r\n    WHERE player_rank = 1;\r\n\r\n    -- Create slot offer for highest XP player\r\n    INSERT INTO slot_offers (\r\n        game_id,\r\n        player_id,\r\n        status,\r\n        rank,\r\n        available_at,\r\n        expires_at\r\n    ) VALUES (\r\n        p_game_id,\r\n        v_eligible_players.player_id,\r\n        'pending',\r\n        1,\r\n        v_time_slots.available_time,\r\n        v_time_slots.expire_time\r\n    ) RETURNING id INTO v_slot_offer_id;\r\n\r\n    -- Create notification for the eligible player\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    ) VALUES (\r\n        v_eligible_players.player_id,\r\n        'slot_offer',\r\n        format('A spot has opened up in a game on %s. You have exclusive access until %s!',\r\n               to_char(v_game.date, 'DD/MM/YYYY'),\r\n               to_char(v_time_slots.expire_time, 'HH24:MI')),\r\n        jsonb_build_object(\r\n            'game_id', p_game_id,\r\n            'slot_offer_id', v_slot_offer_id,\r\n            'exclusive_until', v_time_slots.expire_time\r\n        ),\r\n        'Exclusive Game Slot Available!',\r\n        2\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_next_slot_offer",
          "arguments": "p_game_id uuid, p_previous_rank integer",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_next_slot_offer(p_game_id uuid, p_previous_rank integer)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_next_player record;\r\n    v_slot_offer_id UUID;\r\n    v_player_count integer;\r\n    v_time_slots record;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT * INTO v_game FROM games WHERE id = p_game_id;\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Game not found';\r\n    END IF;\r\n\r\n    -- Get count of remaining eligible players\r\n    SELECT COUNT(*) INTO v_player_count\r\n    FROM players p\r\n    JOIN game_registrations gr ON gr.player_id = p.id\r\n    WHERE gr.game_id = p_game_id\r\n    AND gr.status = 'reserve'\r\n    AND NOT EXISTS (\r\n        SELECT 1 FROM slot_offers so\r\n        WHERE so.game_id = p_game_id\r\n        AND so.player_id = p.id\r\n        AND so.status = 'rejected'\r\n    );\r\n\r\n    -- Recalculate time slots with remaining players\r\n    SELECT * INTO v_time_slots\r\n    FROM calculate_slot_offer_times(p_game_id, v_player_count)\r\n    WHERE player_rank = 1;\r\n\r\n    -- Get next eligible player by XP\r\n    WITH RankedPlayers AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            p.friendly_name,\r\n            ps.xp,\r\n            ROW_NUMBER() OVER (ORDER BY ps.xp DESC) as rank\r\n        FROM players p\r\n        JOIN game_registrations gr ON gr.player_id = p.id\r\n        JOIN player_stats ps ON ps.player_id = p.id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n        AND NOT EXISTS (\r\n            SELECT 1 FROM slot_offers so\r\n            WHERE so.game_id = p_game_id\r\n            AND so.player_id = p.id\r\n            AND so.status = 'rejected'\r\n        )\r\n    )\r\n    SELECT * INTO v_next_player\r\n    FROM RankedPlayers\r\n    WHERE rank = 1;\r\n\r\n    -- Create slot offer for next player\r\n    INSERT INTO slot_offers (\r\n        game_id,\r\n        player_id,\r\n        status,\r\n        rank,\r\n        available_at,\r\n        expires_at\r\n    ) VALUES (\r\n        p_game_id,\r\n        v_next_player.player_id,\r\n        'pending',\r\n        p_previous_rank + 1,\r\n        v_time_slots.available_time,\r\n        v_time_slots.expire_time\r\n    ) RETURNING id INTO v_slot_offer_id;\r\n\r\n    -- Create notification for the next player\r\n    INSERT INTO notifications (\r\n        player_id,\r\n        type,\r\n        message,\r\n        metadata,\r\n        title,\r\n        priority\r\n    ) VALUES (\r\n        v_next_player.player_id,\r\n        'slot_offer',\r\n        format('A spot has opened up in a game on %s. You have exclusive access until %s!',\r\n               to_char(v_game.date, 'DD/MM/YYYY'),\r\n               to_char(v_time_slots.expire_time, 'HH24:MI')),\r\n        jsonb_build_object(\r\n            'game_id', p_game_id,\r\n            'slot_offer_id', v_slot_offer_id,\r\n            'exclusive_until', v_time_slots.expire_time\r\n        ),\r\n        'Exclusive Game Slot Available!',\r\n        2\r\n    );\r\nEND;\r\n$function$\n"
        },
        {
          "name": "debug_game_state",
          "arguments": "p_game_id uuid",
          "return_type": "TABLE(message text, details jsonb)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.debug_game_state(p_game_id uuid)\n RETURNS TABLE(message text, details jsonb)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_game record;\r\n    v_selected_count integer;\r\n    v_selected_players text;\r\n    v_debug_info jsonb;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT \r\n        g.*,\r\n        COUNT(CASE WHEN gr.status = 'selected' THEN 1 END) as selected_count,\r\n        string_agg(\r\n            CASE WHEN gr.status = 'selected' THEN \r\n                format('%s (ID: %s)', p.friendly_name, p.id)\r\n            END, \r\n            ', '\r\n        ) as selected_players\r\n    INTO v_game\r\n    FROM games g\r\n    LEFT JOIN game_registrations gr ON gr.game_id = g.id\r\n    LEFT JOIN players p ON p.id = gr.player_id\r\n    WHERE g.id = p_game_id\r\n    GROUP BY g.id;\r\n\r\n    IF NOT FOUND THEN\r\n        RETURN QUERY SELECT 'Game not found'::text, jsonb_build_object('game_id', p_game_id);\r\n        RETURN;\r\n    END IF;\r\n\r\n    -- Return basic game info\r\n    message := 'Game Info';\r\n    details := jsonb_build_object(\r\n        'game_id', v_game.id,\r\n        'max_players', v_game.max_players,\r\n        'selected_count', v_game.selected_count,\r\n        'selected_players', v_game.selected_players\r\n    );\r\n    RETURN NEXT;\r\n\r\n    -- Check for any inconsistencies\r\n    WITH Inconsistencies AS (\r\n        SELECT \r\n            gr.player_id,\r\n            p.friendly_name,\r\n            gr.status as registration_status,\r\n            so.status as offer_status,\r\n            so.accepted_at,\r\n            so.declined_at\r\n        FROM game_registrations gr\r\n        JOIN players p ON p.id = gr.player_id\r\n        LEFT JOIN slot_offers so ON so.game_id = gr.game_id AND so.player_id = gr.player_id\r\n        WHERE gr.game_id = p_game_id\r\n        AND (\r\n            -- Selected but no accepted offer\r\n            (gr.status = 'selected' AND (so.status IS NULL OR so.status != 'accepted'))\r\n            OR\r\n            -- Accepted offer but not selected\r\n            (so.status = 'accepted' AND gr.status != 'selected')\r\n            OR\r\n            -- Accepted timestamp but not accepted status\r\n            (so.accepted_at IS NOT NULL AND so.status != 'accepted')\r\n            OR\r\n            -- Accepted status but no timestamp\r\n            (so.status = 'accepted' AND so.accepted_at IS NULL)\r\n        )\r\n    )\r\n    SELECT \r\n        'Inconsistencies Found',\r\n        jsonb_agg(\r\n            jsonb_build_object(\r\n                'player_id', player_id,\r\n                'player_name', friendly_name,\r\n                'registration_status', registration_status,\r\n                'offer_status', offer_status,\r\n                'accepted_at', accepted_at,\r\n                'declined_at', declined_at\r\n            )\r\n        )\r\n    INTO message, v_debug_info\r\n    FROM Inconsistencies;\r\n\r\n    IF v_debug_info IS NOT NULL THEN\r\n        details := v_debug_info;\r\n        RETURN NEXT;\r\n    END IF;\r\n\r\n    -- Check for pending offers\r\n    WITH PendingOffers AS (\r\n        SELECT \r\n            p.id as player_id,\r\n            p.friendly_name,\r\n            so.status as offer_status,\r\n            so.created_at,\r\n            so.expires_at,\r\n            gr.status as registration_status\r\n        FROM slot_offers so\r\n        JOIN players p ON p.id = so.player_id\r\n        JOIN game_registrations gr ON gr.game_id = so.game_id AND gr.player_id = so.player_id\r\n        WHERE so.game_id = p_game_id\r\n        AND so.status = 'pending'\r\n    )\r\n    SELECT \r\n        'Pending Offers',\r\n        jsonb_agg(\r\n            jsonb_build_object(\r\n                'player_id', player_id,\r\n                'player_name', friendly_name,\r\n                'offer_status', offer_status,\r\n                'created_at', created_at,\r\n                'expires_at', expires_at,\r\n                'registration_status', registration_status\r\n            )\r\n        )\r\n    INTO message, v_debug_info\r\n    FROM PendingOffers;\r\n\r\n    IF v_debug_info IS NOT NULL THEN\r\n        details := v_debug_info;\r\n        RETURN NEXT;\r\n    END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_balanced_teams",
          "arguments": "game_id uuid",
          "return_type": "jsonb",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_balanced_teams(game_id uuid)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    cached_results JSONB;\r\n    calculated_teams JSONB;\r\nBEGIN\r\n    -- Check cache first\r\n    SELECT team_assignments INTO cached_results\r\n    FROM public.balanced_team_assignments bta\r\n    WHERE bta.game_id = get_balanced_teams.game_id \r\n    AND bta.created_at > NOW() - INTERVAL '1 hour';\r\n\r\n    IF FOUND THEN\r\n        RETURN cached_results;\r\n    END IF;\r\n\r\n    -- Calculate teams if not in cache\r\n    WITH calculated_assignments AS (\r\n        SELECT \r\n            jsonb_agg(\r\n                jsonb_build_object(\r\n                    'team', t.team,\r\n                    'player_id', t.player_id,\r\n                    'friendly_name', t.friendly_name,\r\n                    'attack_rating', t.attack_rating,\r\n                    'defense_rating', t.defense_rating,\r\n                    'experience_factor', t.experience_factor\r\n                )\r\n                ORDER BY t.team, (t.attack_rating + t.defense_rating) DESC\r\n            ) as teams,\r\n            SUM(CASE WHEN t.team = 'blue' THEN t.attack_rating ELSE 0 END) as blue_attack,\r\n            SUM(CASE WHEN t.team = 'orange' THEN t.attack_rating ELSE 0 END) as orange_attack,\r\n            SUM(CASE WHEN t.team = 'blue' THEN t.defense_rating ELSE 0 END) as blue_defense,\r\n            SUM(CASE WHEN t.team = 'orange' THEN t.defense_rating ELSE 0 END) as orange_defense,\r\n            SUM(CASE WHEN t.team = 'blue' THEN t.experience_factor ELSE 0 END) as blue_experience,\r\n            SUM(CASE WHEN t.team = 'orange' THEN t.experience_factor ELSE 0 END) as orange_experience\r\n        FROM public.calculate_balanced_teams(get_balanced_teams.game_id) t\r\n    )\r\n    SELECT \r\n        jsonb_build_object(\r\n            'teams', teams,\r\n            'stats', jsonb_build_object(\r\n                'attack_differential', ABS(blue_attack - orange_attack),\r\n                'defense_differential', ABS(blue_defense - orange_defense),\r\n                'experience_differential', ABS(blue_experience - orange_experience),\r\n                'total_differential', ABS(blue_attack + blue_defense - orange_attack - orange_defense),\r\n                'blue_stats', jsonb_build_object(\r\n                    'attack', blue_attack,\r\n                    'defense', blue_defense,\r\n                    'experience', blue_experience\r\n                ),\r\n                'orange_stats', jsonb_build_object(\r\n                    'attack', orange_attack,\r\n                    'defense', orange_defense,\r\n                    'experience', orange_experience\r\n                )\r\n            )\r\n        ) INTO calculated_teams\r\n    FROM calculated_assignments;\r\n\r\n    -- Cache the results\r\n    INSERT INTO public.balanced_team_assignments (\r\n        game_id, \r\n        team_assignments,\r\n        attack_differential,\r\n        defense_differential,\r\n        total_differential,\r\n        experience_differential\r\n    )\r\n    SELECT \r\n        get_balanced_teams.game_id,\r\n        calculated_teams,\r\n        (calculated_teams->'stats'->>'attack_differential')::numeric,\r\n        (calculated_teams->'stats'->>'defense_differential')::numeric,\r\n        (calculated_teams->'stats'->>'total_differential')::numeric,\r\n        (calculated_teams->'stats'->>'experience_differential')::numeric;\r\n\r\n    RETURN calculated_teams;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_best_buddies",
          "arguments": "",
          "return_type": "TABLE(id uuid, friendly_name text, buddy_id uuid, buddy_friendly_name text, games_together bigint)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_best_buddies()\n RETURNS TABLE(id uuid, friendly_name text, buddy_id uuid, buddy_friendly_name text, games_together bigint)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    WITH team_pairs AS (\r\n        SELECT \r\n            gr1.player_id as player1_id,\r\n            gr2.player_id as player2_id,\r\n            COUNT(*) as games_together\r\n        FROM game_registrations gr1\r\n        JOIN game_registrations gr2 \r\n            ON gr1.game_id = gr2.game_id \r\n            AND gr1.team = gr2.team\r\n            AND gr1.player_id < gr2.player_id\r\n        WHERE gr1.status = 'selected' \r\n        AND gr2.status = 'selected'\r\n        GROUP BY gr1.player_id, gr2.player_id\r\n    )\r\n    SELECT \r\n        p1.id,\r\n        p1.friendly_name,\r\n        p2.id as buddy_id,\r\n        p2.friendly_name as buddy_friendly_name,\r\n        tp.games_together\r\n    FROM team_pairs tp\r\n    JOIN players p1 ON p1.id = tp.player1_id\r\n    JOIN players p2 ON p2.id = tp.player2_id\r\n    ORDER BY tp.games_together DESC\r\n    LIMIT 3;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_stats",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, caps integer, win_rate numeric, current_streak integer, max_streak integer, recent_games integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_stats(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, caps integer, win_rate numeric, current_streak integer, max_streak integer, recent_games integer)\n LANGUAGE sql\nAS $function$\r\n  WITH player_base AS (\r\n    SELECT \r\n      p.id::uuid as player_id,\r\n      p.friendly_name::text,\r\n      COUNT(DISTINCT g.id)::integer as total_games,\r\n      SUM(CASE \r\n        WHEN (gr.team = 'blue' AND g.score_blue > g.score_orange) OR \r\n             (gr.team = 'orange' AND g.score_orange > g.score_blue) \r\n        THEN 1 \r\n        ELSE 0\r\n      END)::integer as wins,\r\n      COUNT(CASE WHEN g.score_blue != g.score_orange THEN 1 END)::integer as non_draws\r\n    FROM players p\r\n    LEFT JOIN game_registrations gr ON gr.player_id = p.id\r\n    LEFT JOIN games g ON g.id = gr.game_id \r\n      AND gr.status = 'selected'\r\n      AND g.status = 'completed'\r\n      AND (target_year IS NULL OR EXTRACT(YEAR FROM g.created_at)::integer = target_year)\r\n    GROUP BY p.id, p.friendly_name\r\n    HAVING COUNT(DISTINCT g.id) >= 10\r\n  ),\r\n  player_streaks AS (\r\n    SELECT \r\n      pb.player_id,\r\n      s.current_streak,\r\n      s.max_streak\r\n    FROM player_base pb\r\n    CROSS JOIN LATERAL calculate_player_streaks(pb.player_id) s\r\n  ),\r\n  recent_games AS (\r\n    SELECT \r\n      pb.player_id,\r\n      COUNT(*)::integer as recent_count\r\n    FROM player_base pb\r\n    JOIN game_registrations gr ON gr.player_id = pb.player_id\r\n    JOIN games g ON g.id = gr.game_id\r\n    WHERE gr.status = 'selected'\r\n    AND g.status = 'completed'\r\n    AND g.created_at >= (\r\n      SELECT g2.created_at \r\n      FROM games g2\r\n      JOIN game_registrations gr2 ON gr2.game_id = g2.id\r\n      WHERE gr2.player_id = pb.player_id\r\n      AND gr2.status = 'selected'\r\n      AND g2.status = 'completed'\r\n      ORDER BY g2.created_at DESC\r\n      OFFSET 9 LIMIT 1\r\n    )\r\n    GROUP BY pb.player_id\r\n  )\r\n  SELECT \r\n    pb.player_id::uuid as id,\r\n    pb.friendly_name::text,\r\n    pb.total_games::integer as caps,\r\n    ROUND((pb.wins::numeric / NULLIF(pb.non_draws, 0)::numeric), 3) as win_rate,\r\n    COALESCE(ps.current_streak, 0)::integer as current_streak,\r\n    COALESCE(ps.max_streak, 0)::integer as max_streak,\r\n    COALESCE(rg.recent_count, 0)::integer as recent_games\r\n  FROM player_base pb\r\n  LEFT JOIN player_streaks ps ON ps.player_id = pb.player_id\r\n  LEFT JOIN recent_games rg ON rg.player_id = pb.player_id\r\n  ORDER BY \r\n    CASE WHEN target_year IS NULL THEN ps.max_streak ELSE ps.current_streak END DESC NULLS LAST,\r\n    pb.total_games DESC;\r\n$function$\n"
        },
        {
          "name": "get_player_team_colors",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, team text, team_frequency numeric, caps integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_team_colors(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, team text, team_frequency numeric, caps integer)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  WITH player_games AS (\r\n    -- Get total games for each player\r\n    SELECT \r\n      p.id as player_id,\r\n      p.friendly_name as player_name,\r\n      COUNT(*)::integer as total_games\r\n    FROM players p\r\n    JOIN game_registrations gr ON p.id = gr.player_id\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE gr.status = 'selected'\r\n    AND (target_year IS NULL OR EXTRACT(YEAR FROM g.created_at) = target_year)\r\n    GROUP BY p.id, p.friendly_name\r\n    HAVING COUNT(*) >= 10\r\n  ),\r\n  team_frequencies AS (\r\n    -- Calculate frequency for each team\r\n    SELECT \r\n      p.id as player_id,\r\n      p.friendly_name as player_name,\r\n      gr.team as player_team,\r\n      COUNT(*)::numeric as team_games,\r\n      pg.total_games,\r\n      ROUND(COUNT(*)::numeric / pg.total_games, 3) as frequency\r\n    FROM players p\r\n    JOIN game_registrations gr ON p.id = gr.player_id\r\n    JOIN games g ON gr.game_id = g.id\r\n    JOIN player_games pg ON p.id = pg.player_id\r\n    WHERE gr.status = 'selected'\r\n    AND gr.team IN ('blue', 'orange')\r\n    AND (target_year IS NULL OR EXTRACT(YEAR FROM g.created_at) = target_year)\r\n    GROUP BY p.id, p.friendly_name, gr.team, pg.total_games\r\n  )\r\n  SELECT\r\n    tf1.player_id as id,\r\n    tf1.player_name as friendly_name,\r\n    tf1.player_team as team,\r\n    tf1.frequency as team_frequency,\r\n    tf1.total_games as caps\r\n  FROM team_frequencies tf1\r\n  WHERE tf1.frequency >= 0.5  -- Only show players who play on a team more than 50% of the time\r\n  AND NOT EXISTS (\r\n    -- Exclude if they play more on the other team\r\n    SELECT 1 FROM team_frequencies tf2\r\n    WHERE tf1.player_id = tf2.player_id\r\n    AND tf2.frequency > tf1.frequency\r\n  )\r\n  ORDER BY tf1.frequency DESC, tf1.total_games DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_reserve_players_by_xp",
          "arguments": "p_game_id uuid",
          "return_type": "TABLE(player_id uuid, xp numeric, rank integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_reserve_players_by_xp(p_game_id uuid)\n RETURNS TABLE(player_id uuid, xp numeric, rank integer)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    WITH player_xp AS (\r\n        SELECT \r\n            p.id,\r\n            (p.caps * \r\n                GREATEST(\r\n                    (10 + \r\n                     COALESCE(p.active_bonuses, 0) - \r\n                     COALESCE(p.active_penalties, 0) + \r\n                     COALESCE(p.current_streak, 0)\r\n                    ), \r\n                    1\r\n                )\r\n            ) as calculated_xp\r\n        FROM game_registrations gr\r\n        INNER JOIN players p ON p.id = gr.player_id\r\n        WHERE gr.game_id = p_game_id\r\n        AND gr.status = 'reserve'\r\n    )\r\n    SELECT \r\n        px.id,\r\n        px.calculated_xp,\r\n        RANK() OVER (ORDER BY px.calculated_xp DESC)::INTEGER\r\n    FROM player_xp px;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_team_color_stats",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(winning_color text, win_rate numeric)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_team_color_stats(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(winning_color text, win_rate numeric)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n  RETURN QUERY\r\n  WITH game_results AS (\r\n    SELECT\r\n      gr.team,\r\n      g.outcome,\r\n      COUNT(*) as total_games,\r\n      SUM(CASE \r\n        WHEN (gr.team = 'blue' AND g.outcome = 'blue_win') OR \r\n             (gr.team = 'orange' AND g.outcome = 'orange_win') \r\n        THEN 1 \r\n        ELSE 0 \r\n      END) as wins\r\n    FROM game_registrations gr\r\n    JOIN games g ON gr.game_id = g.id\r\n    WHERE g.outcome IS NOT NULL\r\n    AND gr.status = 'selected'\r\n    AND (target_year IS NULL OR EXTRACT(YEAR FROM g.created_at) = target_year)\r\n    GROUP BY gr.team, g.outcome\r\n  )\r\n  SELECT\r\n    team as winning_color,\r\n    ROUND(CAST(SUM(wins) AS numeric) / NULLIF(SUM(total_games), 0), 3) as win_rate\r\n  FROM game_results\r\n  GROUP BY team\r\n  ORDER BY win_rate DESC\r\n  LIMIT 1;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "grant_admin_role",
          "arguments": "target_player_id uuid, make_super_admin boolean DEFAULT false, permissions admin_permission[] DEFAULT NULL::admin_permission[]",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.grant_admin_role(target_player_id uuid, make_super_admin boolean DEFAULT false, permissions admin_permission[] DEFAULT NULL::admin_permission[])\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  new_role_id UUID;\r\n  permission admin_permission;\r\nBEGIN\r\n  -- Check if executor is super admin\r\n  IF NOT EXISTS (\r\n    SELECT 1 FROM admin_roles \r\n    WHERE player_id = (SELECT id FROM players WHERE user_id = auth.uid())\r\n    AND is_super_admin = true\r\n  ) THEN\r\n    RAISE EXCEPTION 'Only super admins can grant admin roles';\r\n  END IF;\r\n\r\n  -- Create new admin role\r\n  INSERT INTO admin_roles (player_id, is_super_admin)\r\n  VALUES (target_player_id, make_super_admin)\r\n  RETURNING id INTO new_role_id;\r\n\r\n  -- Grant permissions if provided\r\n  IF permissions IS NOT NULL THEN\r\n    FOREACH permission IN ARRAY permissions\r\n    LOOP\r\n      INSERT INTO admin_permissions (admin_role_id, permission)\r\n      VALUES (new_role_id, permission);\r\n    END LOOP;\r\n  END IF;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_registration_close",
          "arguments": "input_game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_registration_close(input_game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    total_slots INTEGER;\r\n    random_slots INTEGER;\r\n    xp_slots INTEGER;\r\nBEGIN\r\n    -- Get game details\r\n    SELECT max_players, random_slots INTO total_slots, random_slots\r\n    FROM games\r\n    WHERE id = input_game_id;\r\n    \r\n    -- Calculate XP-based slots\r\n    xp_slots := total_slots - random_slots;\r\n    \r\n    -- Update game status\r\n    UPDATE games \r\n    SET status = 'registration_closed'\r\n    WHERE id = input_game_id;\r\n    \r\n    -- Select players by XP (for xp_slots)\r\n    WITH xp_selections AS (\r\n        SELECT gr.id\r\n        FROM game_registrations gr\r\n        JOIN players p ON gr.player_id = p.id\r\n        WHERE gr.game_id = input_game_id\r\n        ORDER BY p.xp DESC\r\n        LIMIT xp_slots\r\n    ),\r\n    -- Select remaining players randomly (for random_slots)\r\n    random_selections AS (\r\n        SELECT gr.id\r\n        FROM game_registrations gr\r\n        WHERE gr.game_id = input_game_id\r\n        AND gr.id NOT IN (SELECT id FROM xp_selections)\r\n        ORDER BY random()\r\n        LIMIT random_slots\r\n    )\r\n    -- Update selected players' status\r\n    UPDATE game_registrations\r\n    SET status = \r\n        CASE \r\n            WHEN id IN (SELECT id FROM xp_selections) OR \r\n                 id IN (SELECT id FROM random_selections)\r\n            THEN 'selected'\r\n            ELSE 'reserve'\r\n        END\r\n    WHERE game_id = input_game_id;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "admin_recalculate_all_player_xp",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.admin_recalculate_all_player_xp()\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    player_rec RECORD;\r\nBEGIN\r\n    -- Check if user is admin or super admin\r\n    IF NOT EXISTS (\r\n        SELECT 1 \r\n        FROM players \r\n        WHERE user_id = auth.uid() \r\n        AND (is_admin = true OR is_super_admin = true)\r\n    ) THEN\r\n        RAISE EXCEPTION 'Unauthorized: User does not have admin permissions';\r\n    END IF;\r\n\r\n    -- Loop through each player and recalculate their XP\r\n    FOR player_rec IN SELECT id FROM players\r\n    LOOP\r\n        -- Update player_xp table with the calculated XP\r\n        INSERT INTO player_xp (player_id, xp, last_calculated)\r\n        VALUES (\r\n            player_rec.id,\r\n            calculate_player_xp(player_rec.id),\r\n            CURRENT_TIMESTAMP\r\n        )\r\n        ON CONFLICT (player_id) \r\n        DO UPDATE SET \r\n            xp = EXCLUDED.xp,\r\n            last_calculated = EXCLUDED.last_calculated;\r\n    END LOOP;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "get_player_attendance_streaks",
          "arguments": "target_year integer DEFAULT NULL::integer",
          "return_type": "TABLE(id uuid, friendly_name text, current_streak integer, max_streak integer)",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.get_player_attendance_streaks(target_year integer DEFAULT NULL::integer)\n RETURNS TABLE(id uuid, friendly_name text, current_streak integer, max_streak integer)\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n  latest_game_number integer;\r\nBEGIN\r\n  -- Get the latest game sequence number\r\n  SELECT MAX(sequence_number) INTO latest_game_number\r\n  FROM games\r\n  WHERE completed = true;\r\n\r\n  RETURN QUERY\r\n  WITH player_games AS (\r\n    -- Get all games for each player with their status and sequence number\r\n    SELECT \r\n      p.id as player_id,\r\n      p.friendly_name as player_friendly_name,\r\n      g.date,\r\n      g.sequence_number,\r\n      gr.status,\r\n      CASE \r\n        WHEN target_year IS NOT NULL THEN \r\n          EXTRACT(YEAR FROM g.date) = target_year\r\n        ELSE TRUE\r\n      END as in_target_year,\r\n      -- Calculate the gap between consecutive games for each player\r\n      sequence_number - ROW_NUMBER() OVER (\r\n        PARTITION BY p.id, \r\n        CASE WHEN gr.status = 'selected' AND \r\n          (target_year IS NULL OR EXTRACT(YEAR FROM g.date) = target_year)\r\n        THEN 1 ELSE 0 END \r\n        ORDER BY g.sequence_number\r\n      ) as streak_group\r\n    FROM players p\r\n    LEFT JOIN game_registrations gr ON gr.player_id = p.id\r\n    LEFT JOIN games g ON g.id = gr.game_id\r\n    WHERE g.completed = true\r\n    ORDER BY g.sequence_number\r\n  ),\r\n  streak_lengths AS (\r\n    -- Calculate streak lengths by counting consecutive games in each streak group\r\n    SELECT \r\n      player_id,\r\n      player_friendly_name,\r\n      streak_group,\r\n      CAST(COUNT(*) AS integer) as streak_length,\r\n      MAX(date) as last_game_date,\r\n      MAX(sequence_number) as last_streak_game\r\n    FROM player_games\r\n    WHERE status = 'selected' AND in_target_year\r\n    GROUP BY player_id, player_friendly_name, streak_group\r\n    HAVING COUNT(*) > 0\r\n  ),\r\n  max_streaks AS (\r\n    -- Get the maximum streak for each player\r\n    SELECT \r\n      player_id,\r\n      player_friendly_name,\r\n      CAST(MAX(streak_length) AS integer) as max_streak\r\n    FROM streak_lengths\r\n    GROUP BY player_id, player_friendly_name\r\n  ),\r\n  current_streaks AS (\r\n    -- Get the current streak by finding the most recent streak\r\n    SELECT DISTINCT ON (player_id)\r\n      player_id,\r\n      player_friendly_name,\r\n      CAST(CASE \r\n        WHEN last_streak_game = latest_game_number THEN streak_length \r\n        ELSE 0 \r\n      END AS integer) as current_streak\r\n    FROM streak_lengths\r\n    ORDER BY player_id, last_streak_game DESC\r\n  )\r\n  -- Combine max and current streaks\r\n  SELECT \r\n    ms.player_id as id,\r\n    ms.player_friendly_name as friendly_name,\r\n    COALESCE(cs.current_streak, 0) as current_streak,\r\n    COALESCE(ms.max_streak, 0) as max_streak\r\n  FROM max_streaks ms\r\n  LEFT JOIN current_streaks cs ON cs.player_id = ms.player_id\r\n  WHERE COALESCE(ms.max_streak, 0) > 0 OR COALESCE(cs.current_streak, 0) > 0\r\n  ORDER BY COALESCE(cs.current_streak, 0) DESC, COALESCE(ms.max_streak, 0) DESC;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_slot_offer_response_text",
          "arguments": "p_game_id uuid, p_player_id uuid, p_response text",
          "return_type": "text",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_slot_offer_response_text(p_game_id uuid, p_player_id uuid, p_response text)\n RETURNS text\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_current_offer_id UUID;\r\n  v_current_offer_status TEXT;\r\n  v_message TEXT;\r\nBEGIN\r\n  -- Get the current offer status\r\n  SELECT id, status INTO v_current_offer_id, v_current_offer_status\r\n  FROM slot_offers\r\n  WHERE game_id = p_game_id \r\n  AND player_id = p_player_id \r\n  AND status = 'pending'\r\n  ORDER BY created_at DESC\r\n  LIMIT 1;\r\n\r\n  -- If no pending offer exists, return error\r\n  IF v_current_offer_id IS NULL THEN\r\n    RETURN 'No pending offer found';\r\n  END IF;\r\n\r\n  -- Update the current offer based on response\r\n  UPDATE slot_offers\r\n  SET \r\n    status = CASE \r\n      WHEN p_response = 'accept' THEN 'accepted'\r\n      WHEN p_response = 'decline' THEN 'declined'\r\n      ELSE status\r\n    END,\r\n    responded_at = NOW()\r\n  WHERE id = v_current_offer_id;\r\n\r\n  -- If offer was declined, create offers for next eligible players\r\n  IF p_response = 'decline' THEN\r\n    -- Update game registration to mark as declined\r\n    UPDATE game_registrations\r\n    SET has_declined = true\r\n    WHERE game_id = p_game_id AND player_id = p_player_id;\r\n\r\n    -- Call create_slot_offers to generate new offers\r\n    PERFORM create_slot_offers(p_game_id);\r\n    \r\n    v_message := 'Offer declined. New offers will be created for eligible players.';\r\n  ELSIF p_response = 'accept' THEN\r\n    -- Update game registration status\r\n    UPDATE game_registrations \r\n    SET status = 'confirmed'\r\n    WHERE game_id = p_game_id AND player_id = p_player_id;\r\n\r\n    -- Update any other pending offers to expired\r\n    UPDATE slot_offers\r\n    SET status = 'expired'\r\n    WHERE game_id = p_game_id \r\n    AND status = 'pending'\r\n    AND player_id != p_player_id;\r\n\r\n    v_message := 'Offer accepted. Your spot has been confirmed.';\r\n  END IF;\r\n\r\n  -- Send notification to admins about the response\r\n  INSERT INTO notifications (\r\n    player_id,\r\n    type,\r\n    message,\r\n    metadata\r\n  )\r\n  SELECT DISTINCT\r\n    ar.player_id,\r\n    'system_message',\r\n    CASE \r\n      WHEN p_response = 'accept' THEN \r\n        (SELECT username FROM players WHERE id = p_player_id) || ' has accepted a slot offer for WNF #' || \r\n        (SELECT COUNT(*) + 1 \r\n         FROM games g2 \r\n         WHERE g2.date < (SELECT date FROM games WHERE id = p_game_id) \r\n         OR (g2.date = (SELECT date FROM games WHERE id = p_game_id) AND g2.id < p_game_id))\r\n      WHEN p_response = 'decline' THEN \r\n        (SELECT username FROM players WHERE id = p_player_id) || ' has declined a slot offer for WNF #' ||\r\n        (SELECT COUNT(*) + 1 \r\n         FROM games g2 \r\n         WHERE g2.date < (SELECT date FROM games WHERE id = p_game_id) \r\n         OR (g2.date = (SELECT date FROM games WHERE id = p_game_id) AND g2.id < p_game_id))\r\n    END,\r\n    jsonb_build_object(\r\n      'game_id', p_game_id,\r\n      'action', CASE \r\n        WHEN p_response = 'accept' THEN 'slot_offer_accepted'\r\n        WHEN p_response = 'decline' THEN 'slot_offer_declined'\r\n      END,\r\n      'player_id', p_player_id,\r\n      'game_number', (\r\n        SELECT COUNT(*) + 1 \r\n        FROM games g2 \r\n        WHERE g2.date < (SELECT date FROM games WHERE id = p_game_id) \r\n        OR (g2.date = (SELECT date FROM games WHERE id = p_game_id) AND g2.id < p_game_id)\r\n      )\r\n    )\r\n  FROM admin_roles ar\r\n  JOIN admin_permissions ap ON ap.admin_role_id = ar.id\r\n  WHERE ap.permission = 'manage_games';\r\n\r\n  -- Also notify admins about new offers being created if this was a decline\r\n  IF p_response = 'decline' THEN\r\n    INSERT INTO notifications (\r\n      player_id,\r\n      type,\r\n      message,\r\n      metadata\r\n    )\r\n    SELECT DISTINCT\r\n      ar.player_id,\r\n      'system_message',\r\n      'Creating new slot offers after ' || (SELECT username FROM players WHERE id = p_player_id) || ' declined',\r\n      jsonb_build_object(\r\n        'game_id', p_game_id,\r\n        'action', 'creating_new_offers',\r\n        'declined_player_id', p_player_id\r\n      )\r\n    FROM admin_roles ar\r\n    JOIN admin_permissions ap ON ap.admin_role_id = ar.id\r\n    WHERE ap.permission = 'manage_games';\r\n  END IF;\r\n\r\n  RETURN v_message;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_average_ratings",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_average_ratings()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\nBEGIN\r\n    -- For INSERT or UPDATE\r\n    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN\r\n        -- Update the rated player's averages\r\n        UPDATE players\r\n        SET \r\n            attack_rating = (\r\n                SELECT COALESCE(AVG(attack_rating), 0)\r\n                FROM player_ratings\r\n                WHERE rated_player_id = NEW.rated_player_id\r\n            ),\r\n            defense_rating = (\r\n                SELECT COALESCE(AVG(defense_rating), 0)\r\n                FROM player_ratings\r\n                WHERE rated_player_id = NEW.rated_player_id\r\n            )\r\n        WHERE id = NEW.rated_player_id;\r\n        \r\n        RETURN NEW;\r\n    -- For DELETE\r\n    ELSIF (TG_OP = 'DELETE') THEN\r\n        -- Update the rated player's averages\r\n        UPDATE players\r\n        SET \r\n            attack_rating = (\r\n                SELECT COALESCE(AVG(attack_rating), 0)\r\n                FROM player_ratings\r\n                WHERE rated_player_id = OLD.rated_player_id\r\n            ),\r\n            defense_rating = (\r\n                SELECT COALESCE(AVG(defense_rating), 0)\r\n                FROM player_ratings\r\n                WHERE rated_player_id = OLD.rated_player_id\r\n            )\r\n        WHERE id = OLD.rated_player_id;\r\n        \r\n        RETURN OLD;\r\n    END IF;\r\n    \r\n    RETURN NULL;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "void_other_slot_offers",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.void_other_slot_offers()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nDECLARE\r\n    v_selected_count INTEGER;\r\n    v_max_players INTEGER;\r\nBEGIN\r\n    -- If a slot offer is being accepted\r\n    IF NEW.status = 'accepted' AND (OLD.status IS NULL OR OLD.status != 'accepted') THEN\r\n        -- Get the current selected player count and add 1 for the current acceptance\r\n        SELECT COUNT(*) + 1 INTO v_selected_count\r\n        FROM game_registrations\r\n        WHERE game_id = NEW.game_id\r\n        AND status = 'selected';\r\n\r\n        -- Get max players for the game\r\n        SELECT max_players INTO v_max_players\r\n        FROM games\r\n        WHERE id = NEW.game_id;\r\n\r\n        -- Check if accepting would exceed max players\r\n        IF v_selected_count > v_max_players THEN\r\n            RAISE EXCEPTION 'Cannot accept offer: maximum players reached';\r\n        END IF;\r\n\r\n        -- Void all other pending offers for this game\r\n        UPDATE slot_offers\r\n        SET status = 'voided',\r\n            updated_at = NOW()\r\n        WHERE game_id = NEW.game_id\r\n        AND id != NEW.id\r\n        AND status = 'pending';\r\n\r\n        -- Update the player's registration status to selected\r\n        UPDATE game_registrations\r\n        SET status = 'selected'\r\n        WHERE game_id = NEW.game_id\r\n        AND player_id = NEW.player_id;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "handle_reserve_xp_transaction",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": false,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.handle_reserve_xp_transaction()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- Update player XP using the calculate_player_xp function\r\n    UPDATE player_xp\r\n    SET \r\n        xp = calculate_player_xp(NEW.player_id),\r\n        last_calculated = CURRENT_TIMESTAMP\r\n    WHERE player_id = NEW.player_id;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "create_slot_offers",
          "arguments": "p_game_id uuid",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.create_slot_offers(p_game_id uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n  v_total_players INTEGER;\r\n  v_available_slots INTEGER;\r\n  v_pending_offers INTEGER;\r\n  v_game_date TIMESTAMP WITH TIME ZONE;\r\n  v_total_hours NUMERIC;\r\n  v_hours_per_player NUMERIC;\r\n  v_players_to_offer INTEGER;\r\n  v_has_recent_decline BOOLEAN;\r\nBEGIN\r\n  -- Check if there was a recent decline\r\n  SELECT EXISTS (\r\n    SELECT 1 \r\n    FROM slot_offers \r\n    WHERE game_id = p_game_id \r\n    AND status = 'declined'\r\n    AND declined_at >= NOW() - INTERVAL '1 minute'\r\n  ) INTO v_has_recent_decline;\r\n\r\n  -- Get total number of reserve players (excluding declined players)\r\n  SELECT COUNT(*)\r\n  INTO v_total_players\r\n  FROM game_registrations gr\r\n  WHERE gr.game_id = p_game_id\r\n  AND gr.status = 'reserve'\r\n  AND NOT EXISTS (\r\n    SELECT 1 FROM slot_offers so\r\n    WHERE so.game_id = gr.game_id\r\n    AND so.player_id = gr.player_id\r\n    AND so.status = 'declined'\r\n  );\r\n\r\n  -- Get number of available slots\r\n  SELECT COUNT(*)\r\n  INTO v_available_slots\r\n  FROM game_registrations gr\r\n  WHERE gr.game_id = p_game_id\r\n  AND gr.status = 'dropped_out';\r\n\r\n  -- Get number of pending offers\r\n  SELECT COUNT(*)\r\n  INTO v_pending_offers\r\n  FROM slot_offers so\r\n  WHERE so.game_id = p_game_id\r\n  AND so.status = 'pending';\r\n\r\n  IF v_available_slots = 0 OR v_pending_offers >= v_available_slots THEN\r\n    RETURN;\r\n  END IF;\r\n\r\n  -- Get the game date (midnight of game day)\r\n  SELECT DATE_TRUNC('day', date) INTO v_game_date\r\n  FROM games \r\n  WHERE id = p_game_id;\r\n\r\n  -- Calculate total remaining hours and hours per player\r\n  v_total_hours := EXTRACT(EPOCH FROM (v_game_date - NOW())) / 3600;\r\n  v_hours_per_player := v_total_hours / GREATEST(v_total_players, 1);\r\n\r\n  -- If recent decline, offer to next player immediately\r\n  -- Otherwise calculate based on time elapsed\r\n  IF v_has_recent_decline THEN\r\n    v_players_to_offer := 1;\r\n  ELSE\r\n    v_players_to_offer := GREATEST(1, FLOOR(v_total_hours / v_hours_per_player));\r\n  END IF;\r\n\r\n  -- Create offers for eligible players\r\n  WITH ranked_players AS (\r\n    SELECT \r\n      gr.player_id,\r\n      ROW_NUMBER() OVER (ORDER BY ps.xp DESC, gr.created_at ASC) as rank\r\n    FROM game_registrations gr\r\n    JOIN player_stats ps ON ps.id = gr.player_id\r\n    LEFT JOIN slot_offers so ON \r\n      so.game_id = gr.game_id \r\n      AND so.player_id = gr.player_id\r\n      AND so.status = 'pending'\r\n    WHERE gr.game_id = p_game_id\r\n    AND gr.status = 'reserve'\r\n    AND NOT EXISTS (\r\n      SELECT 1 FROM slot_offers so2\r\n      WHERE so2.game_id = gr.game_id\r\n      AND so2.player_id = gr.player_id\r\n      AND so2.status = 'declined'\r\n    )\r\n    AND so.id IS NULL\r\n  )\r\n  INSERT INTO slot_offers (game_id, player_id, status, offered_at)\r\n  SELECT \r\n    p_game_id,\r\n    rp.player_id,\r\n    'pending',\r\n    NOW()\r\n  FROM ranked_players rp\r\n  WHERE rp.rank <= LEAST(\r\n    v_players_to_offer,\r\n    v_available_slots - v_pending_offers\r\n  )\r\n  AND NOT EXISTS (\r\n    SELECT 1 FROM slot_offers so2\r\n    WHERE so2.game_id = p_game_id\r\n    AND so2.player_id = rp.player_id\r\n    AND so2.status = 'pending'\r\n  );\r\n\r\n  -- Create notifications for new offers\r\n  INSERT INTO notifications (\r\n    player_id,\r\n    type,\r\n    message,\r\n    metadata\r\n  )\r\n  SELECT \r\n    so.player_id,\r\n    'slot_offer',\r\n    'A spot has opened up in the game. Would you like to play?',\r\n    jsonb_build_object(\r\n      'game_id', p_game_id,\r\n      'action', 'new_slot_offer'\r\n    )\r\n  FROM slot_offers so\r\n  WHERE so.game_id = p_game_id\r\n  AND so.status = 'pending'\r\n  AND so.offered_at >= NOW() - INTERVAL '1 minute';\r\nEND;\r\n$function$\n"
        },
        {
          "name": "update_player_win_rates",
          "arguments": "",
          "return_type": "trigger",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.update_player_win_rates()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    player_record RECORD;\r\n    win_rate_data RECORD;\r\nBEGIN\r\n    -- When a game is completed or its outcome is changed\r\n    IF (TG_OP = 'UPDATE' AND \r\n        (NEW.outcome IS DISTINCT FROM OLD.outcome OR\r\n         NEW.completed = true AND (OLD.completed = false OR OLD.completed IS NULL))\r\n    ) THEN\r\n        -- Get all players from this game\r\n        FOR player_record IN \r\n            SELECT DISTINCT player_id \r\n            FROM game_registrations \r\n            WHERE game_id = NEW.id \r\n            AND status = 'selected'\r\n        LOOP\r\n            -- Get the calculated win rate for this player\r\n            SELECT * INTO win_rate_data \r\n            FROM get_player_win_rates() \r\n            WHERE id = player_record.player_id;\r\n\r\n            -- Update the player's win rate\r\n            IF win_rate_data IS NOT NULL THEN\r\n                UPDATE players \r\n                SET win_rate = win_rate_data.win_rate\r\n                WHERE id = player_record.player_id;\r\n            END IF;\r\n        END LOOP;\r\n    END IF;\r\n    \r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
        },
        {
          "name": "recalculate_all_win_rates",
          "arguments": "",
          "return_type": "void",
          "description": null,
          "volatility": "v",
          "leakproof": false,
          "security_definer": true,
          "parallel_safety": "u",
          "definition": "CREATE OR REPLACE FUNCTION public.recalculate_all_win_rates()\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    win_rate_data RECORD;\r\nBEGIN\r\n    FOR win_rate_data IN SELECT * FROM get_player_win_rates()\r\n    LOOP\r\n        UPDATE players \r\n        SET win_rate = win_rate_data.win_rate\r\n        WHERE id = win_rate_data.id;\r\n    END LOOP;\r\nEND;\r\n$function$\n"
        }
      ]
    }
  }
]